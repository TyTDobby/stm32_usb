ARM GAS  /tmp/ccfFRkoC.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"usb.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.USBConfig,"ax",%progbits
  20              		.align	2
  21              		.global	USBConfig
  22              		.thumb
  23              		.thumb_func
  25              	USBConfig:
  26              	.LFB29:
  27              		.file 1 "usb/usb.c"
   1:usb/usb.c     **** #include "usb.h"
   2:usb/usb.c     **** 
   3:usb/usb.c     **** /* Variables */
   4:usb/usb.c     **** 
   5:usb/usb.c     **** volatile USB_TypeDef       *USB = (USB_TypeDef *)USB_BASE; 
   6:usb/usb.c     **** volatile USBEpBuf_TypeDef *EPBuffTable[3] = {
   7:usb/usb.c     **** 	(USBEpBuf_TypeDef *)USB_PMA_ADDR,
   8:usb/usb.c     **** 	(USBEpBuf_TypeDef *)USB_PMA_ADDR + 0x10,
   9:usb/usb.c     **** 	(USBEpBuf_TypeDef *)USB_PMA_ADDR + 0x20
  10:usb/usb.c     **** };
  11:usb/usb.c     **** 
  12:usb/usb.c     **** USBHeap heap;
  13:usb/usb.c     **** USBSetupPacket SetupPacket; 
  14:usb/usb.c     **** 
  15:usb/usb.c     **** uint8_t debug1 = 0;
  16:usb/usb.c     **** 
  17:usb/usb.c     **** // #define EP_RX_STATUS(epr, status) { \
  18:usb/usb.c     **** // 	register uint16_t valReg = USB->EPR[epr] & USB_EP_STAT_RX;\
  19:usb/usb.c     **** // 	if(status & USB_EP_STAT_RX_0){\
  20:usb/usb.c     **** // 		valReg ^= USB_EP_STAT_RX_0;\
  21:usb/usb.c     **** // 	}\
  22:usb/usb.c     **** // 	if(status & USB_EP_STAT_RX_1){\
  23:usb/usb.c     **** // 		valReg ^= USB_EP_STAT_RX_1;\
  24:usb/usb.c     **** // 	}\
  25:usb/usb.c     **** // 	USB->EPR[epr] = valReg | USB_EP_CTR_RX | USB_EP_CTR_TX;\
  26:usb/usb.c     **** // }/* EP_TX_STATUS */
  27:usb/usb.c     **** 
  28:usb/usb.c     **** // #define EP_CONTROL_RX_STATUS(epr, status) { \
  29:usb/usb.c     **** // 	register uint16_t valReg = USB->EPR[epr] & USB_EP_STAT_RX;\
  30:usb/usb.c     **** // 	if(valReg & USB_EP_STAT_RX_0){\
  31:usb/usb.c     **** // 		valReg ^= USB_EP_STAT_RX_1;\
ARM GAS  /tmp/ccfFRkoC.s 			page 2


  32:usb/usb.c     **** // 	}\
  33:usb/usb.c     **** // 	if(valReg & USB_EP_STAT_RX_1){\
  34:usb/usb.c     **** // 		valReg ^= USB_EP_STAT_RX_0;\
  35:usb/usb.c     **** // 	}\
  36:usb/usb.c     **** // 	USB->EPR[epr] = valReg | USB_EP_CONTROL;\
  37:usb/usb.c     **** // }/* EP_CONTROL_RX_STATUS */
  38:usb/usb.c     **** 
  39:usb/usb.c     **** // #define EP_TX_STATUS(epr, status) { \
  40:usb/usb.c     **** // 	register uint16_t valReg = USB->EPR[epr] & USB_EP_STAT_TX;\
  41:usb/usb.c     **** // 	if(status & USB_EP_STAT_TX_0){\
  42:usb/usb.c     **** // 		valReg ^= USB_EP_STAT_TX_0;\
  43:usb/usb.c     **** // 	}\
  44:usb/usb.c     **** // 	if(status & USB_EP_STAT_TX_1){\
  45:usb/usb.c     **** // 		valReg ^= USB_EP_STAT_TX_1;\
  46:usb/usb.c     **** // 	}\
  47:usb/usb.c     **** // 	USB->EPR[epr] = valReg | USB_EP_CTR_RX | USB_EP_CTR_TX;\
  48:usb/usb.c     **** // }/* EP_TX_STATUS */
  49:usb/usb.c     **** 
  50:usb/usb.c     **** uint8_t descDevice[] = 
  51:usb/usb.c     **** {   
  52:usb/usb.c     ****     0x12,				/* bLength */
  53:usb/usb.c     ****     0x01,				/* bDescriptorType */
  54:usb/usb.c     ****     0x00,				/* bcdUSB */  
  55:usb/usb.c     ****     0x02,
  56:usb/usb.c     ****     0x00,				/* bDeviceClass */
  57:usb/usb.c     ****     0x00,				/* bDeviceSubClass */
  58:usb/usb.c     ****     0x00,				/* bDeviceProtocol */
  59:usb/usb.c     ****     0x40,				/* bMaxPacketSize */
  60:usb/usb.c     ****     LOBYTE(USB_VID),	/* idVendor */ 
  61:usb/usb.c     ****     HIBYTE(USB_VID),	/* idVendor */
  62:usb/usb.c     ****     LOBYTE(USB_PID),	/* idProduct */  
  63:usb/usb.c     ****     HIBYTE(USB_PID),	/* idProduct */
  64:usb/usb.c     ****     0x00,				/* bcdDevice rel. 2.00 */
  65:usb/usb.c     ****     0x02,
  66:usb/usb.c     ****     0x01,				/* Index of manufacturer  string */
  67:usb/usb.c     ****     0x02,				/* Index of product string */
  68:usb/usb.c     ****     0x03,				/* Index of serial number string */
  69:usb/usb.c     ****     0x01 				/* bNumConfigurations */
  70:usb/usb.c     **** };
  71:usb/usb.c     **** /************** Descriptor of device qualifier ****************/
  72:usb/usb.c     **** uint8_t descDeviceQualifier[] = 
  73:usb/usb.c     **** {  
  74:usb/usb.c     ****     0x0a,	/* bLength */
  75:usb/usb.c     ****     0x06,	/* bDescriptorType */
  76:usb/usb.c     ****     0x00,	/* bcdUSB */  
  77:usb/usb.c     ****     0x02,
  78:usb/usb.c     ****     0x00,	/* bDeviceClass */
  79:usb/usb.c     ****     0x00,	/* bDeviceSubClass */
  80:usb/usb.c     ****     0x00,	/* bDeviceProtocol */
  81:usb/usb.c     ****     0x40,	/* bMaxPacketSize */
  82:usb/usb.c     ****     0x01,	/* bNumConfigurations */
  83:usb/usb.c     ****     0x00 	/* bReserve */ 
  84:usb/usb.c     **** };
  85:usb/usb.c     **** /*
  86:usb/usb.c     ****  * Descriptor of configuration 
  87:usb/usb.c     ****  */ 
  88:usb/usb.c     **** uint8_t descConfiguration[] =
ARM GAS  /tmp/ccfFRkoC.s 			page 3


  89:usb/usb.c     **** {
  90:usb/usb.c     ****  	0x09,		/* bLength: Configuration Descriptor size */
  91:usb/usb.c     ****  	0x02,		/* bDescriptorType: Configuration */
  92:usb/usb.c     ****  	0x29,		/* wTotalLength: Bytes returned */
  93:usb/usb.c     ****  	0x00,
  94:usb/usb.c     ****  	0x01,		/* bNumInterfaces: 1 interface */
  95:usb/usb.c     ****  	0x01,		/* bConfigurationValue: Configuration value */
  96:usb/usb.c     ****  	0x00,		/* iConfiguration: Index of string descriptor describing the configuration */
  97:usb/usb.c     ****  	0xC0,		/* bmAttributes: bus powered */
  98:usb/usb.c     ****  	0x32,		/* MaxPower 100 mA: this current is used for detecting Vbus */
  99:usb/usb.c     **** /*
 100:usb/usb.c     ****  * Descriptor of interface 
 101:usb/usb.c     ****  */
 102:usb/usb.c     ****  	0x09,		/* bLength: Interface Descriptor size */
 103:usb/usb.c     ****  	0x04,		/* bDescriptorType: Interface descriptor type */
 104:usb/usb.c     ****  	0x00,		/* bInterfaceNumber: Number of Interface */
 105:usb/usb.c     ****  	0x00,		/* bAlternateSetting: Alternate setting */
 106:usb/usb.c     ****  	0x02,		/* bNumEndpoints */
 107:usb/usb.c     ****  	0x03,		/* bInterfaceClass: USB_HID */
 108:usb/usb.c     ****  	0x00,		/* bInterfaceSubClass : 1=BOOT, 0=no boot */
 109:usb/usb.c     ****  	0x00,		/* nInterfaceProtocol : 0=none, 1=keyboard, 2=mouse */
 110:usb/usb.c     ****  	0x05,		/* iInterface: Index of string descriptor */
 111:usb/usb.c     **** /*
 112:usb/usb.c     ****  * Descriptor of USB_HID 
 113:usb/usb.c     ****  */
 114:usb/usb.c     ****  	0x09,		/* bLength: USB_HID Descriptor size */
 115:usb/usb.c     ****  	0x21,		/* bDescriptorType: USB_HID */ 
 116:usb/usb.c     ****  	0x01,		/* bUSB_HIDUSTOM_HID: USB_HID Class Spec release number */
 117:usb/usb.c     ****  	0x01,
 118:usb/usb.c     ****  	0x00,		/* bCountryCode: Hardware target country */
 119:usb/usb.c     ****  	0x01,		/* bNumDescriptors: Number of USB_HID class descriptors to follow */
 120:usb/usb.c     ****  	0x22,		/* bDescriptorType */
 121:usb/usb.c     ****  	0x02,		/* wItemLength: Total length of Report descriptor */ 
 122:usb/usb.c     ****  	0x00,
 123:usb/usb.c     **** /*
 124:usb/usb.c     ****  * Descriptor of endpoint (IN) 
 125:usb/usb.c     ****  */
 126:usb/usb.c     ****  	0x07,		/* bLength: Endpoint Descriptor size */
 127:usb/usb.c     ****  	0x05,		/* bDescriptorType: */
 128:usb/usb.c     ****  	0x81,		/* bEndpointAddress: Endpoint Address (IN) */
 129:usb/usb.c     ****  	0x02,		/* bmAttributes: Bulk */
 130:usb/usb.c     ****  	0x10,		/* wMaxPacketSize: 2 Byte max */
 131:usb/usb.c     ****  	0x00,
 132:usb/usb.c     ****  	0x20,		/* bInterval: Polling Interval (20 ms) */
 133:usb/usb.c     **** /*
 134:usb/usb.c     ****  * Descriptor of endpoint (OUT) 
 135:usb/usb.c     ****  */
 136:usb/usb.c     ****  	0x07,		/* bLength: Endpoint Descriptor size */
 137:usb/usb.c     ****  	0x05,		/* bDescriptorType: */
 138:usb/usb.c     ****  	0x01,		/* bEndpointAddress: Endpoint Address (OUT) */
 139:usb/usb.c     ****  	0x02,		/* bmAttributes: Bulk */
 140:usb/usb.c     ****  	0x10,		/* wMaxPacketSize: 2 Bytes max */
 141:usb/usb.c     ****  	0x00,
 142:usb/usb.c     ****  	0x20,		/* bInterval: Polling Interval (20 ms) */
 143:usb/usb.c     **** };
 144:usb/usb.c     **** uint8_t descStringLangID[] = 
 145:usb/usb.c     **** {
ARM GAS  /tmp/ccfFRkoC.s 			page 4


 146:usb/usb.c     **** 	0x04,
 147:usb/usb.c     **** 	USB_STR_DESC_TYPE,
 148:usb/usb.c     **** 	LOBYTE(USB_LANGID_STRING),
 149:usb/usb.c     **** 	HIBYTE(USB_LANGID_STRING)
 150:usb/usb.c     **** };
 151:usb/usb.c     **** 
 152:usb/usb.c     **** uint8_t descStringProduct[] = 
 153:usb/usb.c     **** {
 154:usb/usb.c     **** 	0x12,
 155:usb/usb.c     **** 	USB_STR_DESC_TYPE,
 156:usb/usb.c     **** 	'S','T','M','3','2',' ','C','u','s','t','o','m',' ','H','I','D'
 157:usb/usb.c     **** };
 158:usb/usb.c     **** 
 159:usb/usb.c     **** uint8_t descStringMFC[] = 
 160:usb/usb.c     **** {
 161:usb/usb.c     **** 	0x0e, 
 162:usb/usb.c     **** 	USB_STR_DESC_TYPE,
 163:usb/usb.c     **** 	'S','T','M','3','2',' ','D','e','v','i','c','e'
 164:usb/usb.c     **** };
 165:usb/usb.c     ****  
 166:usb/usb.c     **** uint8_t descStringSerialNumber[] = 
 167:usb/usb.c     **** {
 168:usb/usb.c     **** 	0x0e,  
 169:usb/usb.c     **** 	USB_STR_DESC_TYPE,
 170:usb/usb.c     **** 	'0','0','0','0','0','0','0','0','0','0','1','A'
 171:usb/usb.c     **** };
 172:usb/usb.c     **** 
 173:usb/usb.c     **** uint8_t descStringConfig[] = 
 174:usb/usb.c     **** {
 175:usb/usb.c     **** 	0x13,  
 176:usb/usb.c     **** 	USB_STR_DESC_TYPE,
 177:usb/usb.c     **** 	'C','u','s','t','o','m',' ','H','I','D',' ','C','o','n','f','i','g'
 178:usb/usb.c     **** };
 179:usb/usb.c     **** 
 180:usb/usb.c     **** uint8_t descStringInterface[] = 
 181:usb/usb.c     **** {
 182:usb/usb.c     **** 	0x16,  
 183:usb/usb.c     **** 	USB_STR_DESC_TYPE,
 184:usb/usb.c     **** 	'C','u','s','t','o','m',' ','H','I','D',' ','I','n','t','e','r','f','a','c','e'
 185:usb/usb.c     **** };
 186:usb/usb.c     **** /* Prototype functoin */
 187:usb/usb.c     **** void USBWriteEP(uint8_t number);
 188:usb/usb.c     **** void USBReadEP(uint8_t *buffer, uint16_t len, uint8_t number);
 189:usb/usb.c     **** void USBRequest(USBSetupPacket *req, uint8_t *pdata);
 190:usb/usb.c     **** void USBReset(void);
 191:usb/usb.c     **** void USBSetup(void);
 192:usb/usb.c     **** void USBCtrHandler(void);
 193:usb/usb.c     **** /* Public */
 194:usb/usb.c     **** void USBConfig(void){
  28              		.loc 1 194 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 195:usb/usb.c     **** 
 196:usb/usb.c     **** 	heap.cntMaxEp0 = 64;
  33              		.loc 1 196 0
ARM GAS  /tmp/ccfFRkoC.s 			page 5


  34 0000 4022     		movs	r2, #64
  35 0002 0D4B     		ldr	r3, .L2
  36 0004 A3F84020 		strh	r2, [r3, #64]	@ movhi
  37              	.LVL0:
  38              	.LBB6:
  39              	.LBB7:
  40              		.file 2 "usb/../cmsis/core_cm3.h"
   1:usb/../cmsis/core_cm3.h **** /**************************************************************************//**
   2:usb/../cmsis/core_cm3.h ****  * @file     core_cm3.h
   3:usb/../cmsis/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:usb/../cmsis/core_cm3.h ****  * @version  V1.30
   5:usb/../cmsis/core_cm3.h ****  * @date     30. October 2009
   6:usb/../cmsis/core_cm3.h ****  *
   7:usb/../cmsis/core_cm3.h ****  * @note
   8:usb/../cmsis/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:usb/../cmsis/core_cm3.h ****  *
  10:usb/../cmsis/core_cm3.h ****  * @par
  11:usb/../cmsis/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:usb/../cmsis/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:usb/../cmsis/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  14:usb/../cmsis/core_cm3.h ****  *
  15:usb/../cmsis/core_cm3.h ****  * @par
  16:usb/../cmsis/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:usb/../cmsis/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:usb/../cmsis/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:usb/../cmsis/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:usb/../cmsis/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:usb/../cmsis/core_cm3.h ****  *
  22:usb/../cmsis/core_cm3.h ****  ******************************************************************************/
  23:usb/../cmsis/core_cm3.h **** 
  24:usb/../cmsis/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:usb/../cmsis/core_cm3.h **** #define __CM3_CORE_H__
  26:usb/../cmsis/core_cm3.h **** 
  27:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:usb/../cmsis/core_cm3.h ****  *
  29:usb/../cmsis/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:usb/../cmsis/core_cm3.h ****  *   - Error 10: \n
  31:usb/../cmsis/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:usb/../cmsis/core_cm3.h ****  *     Error 10: Expecting ';'
  33:usb/../cmsis/core_cm3.h ****  * .
  34:usb/../cmsis/core_cm3.h ****  *   - Error 530: \n
  35:usb/../cmsis/core_cm3.h ****  *     return(__regBasePri); \n
  36:usb/../cmsis/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:usb/../cmsis/core_cm3.h ****  * . 
  38:usb/../cmsis/core_cm3.h ****  *   - Error 550: \n
  39:usb/../cmsis/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:usb/../cmsis/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:usb/../cmsis/core_cm3.h ****  * .
  42:usb/../cmsis/core_cm3.h ****  *   - Error 754: \n
  43:usb/../cmsis/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:usb/../cmsis/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:usb/../cmsis/core_cm3.h ****  * .
  46:usb/../cmsis/core_cm3.h ****  *   - Error 750: \n
  47:usb/../cmsis/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:usb/../cmsis/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:usb/../cmsis/core_cm3.h ****  * .
  50:usb/../cmsis/core_cm3.h ****  *   - Error 528: \n
ARM GAS  /tmp/ccfFRkoC.s 			page 6


  51:usb/../cmsis/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:usb/../cmsis/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:usb/../cmsis/core_cm3.h ****  * .
  54:usb/../cmsis/core_cm3.h ****  *   - Error 751: \n
  55:usb/../cmsis/core_cm3.h ****  *     } InterruptType_Type; \n
  56:usb/../cmsis/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:usb/../cmsis/core_cm3.h ****  * .
  58:usb/../cmsis/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:usb/../cmsis/core_cm3.h ****  *
  60:usb/../cmsis/core_cm3.h ****  */
  61:usb/../cmsis/core_cm3.h **** 
  62:usb/../cmsis/core_cm3.h **** /*lint -save */
  63:usb/../cmsis/core_cm3.h **** /*lint -e10  */
  64:usb/../cmsis/core_cm3.h **** /*lint -e530 */
  65:usb/../cmsis/core_cm3.h **** /*lint -e550 */
  66:usb/../cmsis/core_cm3.h **** /*lint -e754 */
  67:usb/../cmsis/core_cm3.h **** /*lint -e750 */
  68:usb/../cmsis/core_cm3.h **** /*lint -e528 */
  69:usb/../cmsis/core_cm3.h **** /*lint -e751 */
  70:usb/../cmsis/core_cm3.h **** 
  71:usb/../cmsis/core_cm3.h **** 
  72:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:usb/../cmsis/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:usb/../cmsis/core_cm3.h ****     - CMSIS version number
  75:usb/../cmsis/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:usb/../cmsis/core_cm3.h ****     - Cortex-M core peripheral base address
  77:usb/../cmsis/core_cm3.h ****   @{
  78:usb/../cmsis/core_cm3.h ****  */
  79:usb/../cmsis/core_cm3.h **** 
  80:usb/../cmsis/core_cm3.h **** #ifdef __cplusplus
  81:usb/../cmsis/core_cm3.h ****  extern "C" {
  82:usb/../cmsis/core_cm3.h **** #endif 
  83:usb/../cmsis/core_cm3.h **** 
  84:usb/../cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:usb/../cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:usb/../cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:usb/../cmsis/core_cm3.h **** 
  88:usb/../cmsis/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:usb/../cmsis/core_cm3.h **** 
  90:usb/../cmsis/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:usb/../cmsis/core_cm3.h **** 
  92:usb/../cmsis/core_cm3.h **** #if defined (__ICCARM__)
  93:usb/../cmsis/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:usb/../cmsis/core_cm3.h **** #endif
  95:usb/../cmsis/core_cm3.h **** 
  96:usb/../cmsis/core_cm3.h **** 
  97:usb/../cmsis/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:usb/../cmsis/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:usb/../cmsis/core_cm3.h **** #endif
 100:usb/../cmsis/core_cm3.h **** 
 101:usb/../cmsis/core_cm3.h **** 
 102:usb/../cmsis/core_cm3.h **** 
 103:usb/../cmsis/core_cm3.h **** 
 104:usb/../cmsis/core_cm3.h **** /**
 105:usb/../cmsis/core_cm3.h ****  * IO definitions
 106:usb/../cmsis/core_cm3.h ****  *
 107:usb/../cmsis/core_cm3.h ****  * define access restrictions to peripheral registers
ARM GAS  /tmp/ccfFRkoC.s 			page 7


 108:usb/../cmsis/core_cm3.h ****  */
 109:usb/../cmsis/core_cm3.h **** 
 110:usb/../cmsis/core_cm3.h **** #ifdef __cplusplus
 111:usb/../cmsis/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:usb/../cmsis/core_cm3.h **** #else
 113:usb/../cmsis/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:usb/../cmsis/core_cm3.h **** #endif
 115:usb/../cmsis/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:usb/../cmsis/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:usb/../cmsis/core_cm3.h **** 
 118:usb/../cmsis/core_cm3.h **** 
 119:usb/../cmsis/core_cm3.h **** 
 120:usb/../cmsis/core_cm3.h **** /*******************************************************************************
 121:usb/../cmsis/core_cm3.h ****  *                 Register Abstraction
 122:usb/../cmsis/core_cm3.h ****  ******************************************************************************/
 123:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:usb/../cmsis/core_cm3.h ****  @{
 125:usb/../cmsis/core_cm3.h **** */
 126:usb/../cmsis/core_cm3.h **** 
 127:usb/../cmsis/core_cm3.h **** 
 128:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:usb/../cmsis/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:usb/../cmsis/core_cm3.h ****   @{
 131:usb/../cmsis/core_cm3.h ****  */
 132:usb/../cmsis/core_cm3.h **** typedef struct
 133:usb/../cmsis/core_cm3.h **** {
 134:usb/../cmsis/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED0[24];                                   
 136:usb/../cmsis/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:usb/../cmsis/core_cm3.h ****        uint32_t RSERVED1[24];                                    
 138:usb/../cmsis/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED2[24];                                   
 140:usb/../cmsis/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED3[24];                                   
 142:usb/../cmsis/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED4[56];                                   
 144:usb/../cmsis/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED5[644];                                  
 146:usb/../cmsis/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:usb/../cmsis/core_cm3.h **** }  NVIC_Type;                                               
 148:usb/../cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:usb/../cmsis/core_cm3.h **** 
 150:usb/../cmsis/core_cm3.h **** 
 151:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:usb/../cmsis/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:usb/../cmsis/core_cm3.h ****   @{
 154:usb/../cmsis/core_cm3.h ****  */
 155:usb/../cmsis/core_cm3.h **** typedef struct
 156:usb/../cmsis/core_cm3.h **** {
 157:usb/../cmsis/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:usb/../cmsis/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:usb/../cmsis/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:usb/../cmsis/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:usb/../cmsis/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:usb/../cmsis/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:usb/../cmsis/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:usb/../cmsis/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
ARM GAS  /tmp/ccfFRkoC.s 			page 8


 165:usb/../cmsis/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:usb/../cmsis/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:usb/../cmsis/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:usb/../cmsis/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:usb/../cmsis/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:usb/../cmsis/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:usb/../cmsis/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:usb/../cmsis/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:usb/../cmsis/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:usb/../cmsis/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:usb/../cmsis/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:usb/../cmsis/core_cm3.h **** } SCB_Type;                                                
 177:usb/../cmsis/core_cm3.h **** 
 178:usb/../cmsis/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:usb/../cmsis/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:usb/../cmsis/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:usb/../cmsis/core_cm3.h **** 
 182:usb/../cmsis/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:usb/../cmsis/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:usb/../cmsis/core_cm3.h **** 
 185:usb/../cmsis/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:usb/../cmsis/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:usb/../cmsis/core_cm3.h **** 
 188:usb/../cmsis/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:usb/../cmsis/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:usb/../cmsis/core_cm3.h **** 
 191:usb/../cmsis/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:usb/../cmsis/core_cm3.h **** 
 195:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:usb/../cmsis/core_cm3.h **** 
 198:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:usb/../cmsis/core_cm3.h **** 
 201:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:usb/../cmsis/core_cm3.h **** 
 204:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:usb/../cmsis/core_cm3.h **** 
 207:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:usb/../cmsis/core_cm3.h **** 
 210:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:usb/../cmsis/core_cm3.h **** 
 213:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:usb/../cmsis/core_cm3.h **** 
 216:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:usb/../cmsis/core_cm3.h **** 
 219:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:usb/../cmsis/core_cm3.h **** 
ARM GAS  /tmp/ccfFRkoC.s 			page 9


 222:usb/../cmsis/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:usb/../cmsis/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:usb/../cmsis/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:usb/../cmsis/core_cm3.h **** 
 226:usb/../cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:usb/../cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:usb/../cmsis/core_cm3.h **** 
 229:usb/../cmsis/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:usb/../cmsis/core_cm3.h **** 
 233:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:usb/../cmsis/core_cm3.h **** 
 236:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:usb/../cmsis/core_cm3.h **** 
 239:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:usb/../cmsis/core_cm3.h **** 
 242:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:usb/../cmsis/core_cm3.h **** 
 245:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:usb/../cmsis/core_cm3.h **** 
 248:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:usb/../cmsis/core_cm3.h **** 
 251:usb/../cmsis/core_cm3.h **** /* SCB System Control Register Definitions */
 252:usb/../cmsis/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:usb/../cmsis/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:usb/../cmsis/core_cm3.h **** 
 255:usb/../cmsis/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:usb/../cmsis/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:usb/../cmsis/core_cm3.h **** 
 258:usb/../cmsis/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:usb/../cmsis/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:usb/../cmsis/core_cm3.h **** 
 261:usb/../cmsis/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:usb/../cmsis/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:usb/../cmsis/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:usb/../cmsis/core_cm3.h **** 
 265:usb/../cmsis/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:usb/../cmsis/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:usb/../cmsis/core_cm3.h **** 
 268:usb/../cmsis/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:usb/../cmsis/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:usb/../cmsis/core_cm3.h **** 
 271:usb/../cmsis/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:usb/../cmsis/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:usb/../cmsis/core_cm3.h **** 
 274:usb/../cmsis/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:usb/../cmsis/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:usb/../cmsis/core_cm3.h **** 
 277:usb/../cmsis/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:usb/../cmsis/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
ARM GAS  /tmp/ccfFRkoC.s 			page 10


 279:usb/../cmsis/core_cm3.h **** 
 280:usb/../cmsis/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:usb/../cmsis/core_cm3.h **** 
 284:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:usb/../cmsis/core_cm3.h **** 
 287:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:usb/../cmsis/core_cm3.h **** 
 290:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:usb/../cmsis/core_cm3.h **** 
 293:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:usb/../cmsis/core_cm3.h **** 
 296:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:usb/../cmsis/core_cm3.h **** 
 299:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:usb/../cmsis/core_cm3.h **** 
 302:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:usb/../cmsis/core_cm3.h **** 
 305:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:usb/../cmsis/core_cm3.h **** 
 308:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:usb/../cmsis/core_cm3.h **** 
 311:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:usb/../cmsis/core_cm3.h ****                                      
 314:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:usb/../cmsis/core_cm3.h **** 
 317:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:usb/../cmsis/core_cm3.h **** 
 320:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:usb/../cmsis/core_cm3.h **** 
 323:usb/../cmsis/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:usb/../cmsis/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:usb/../cmsis/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:usb/../cmsis/core_cm3.h **** 
 327:usb/../cmsis/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:usb/../cmsis/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:usb/../cmsis/core_cm3.h **** 
 330:usb/../cmsis/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:usb/../cmsis/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:usb/../cmsis/core_cm3.h **** 
 333:usb/../cmsis/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:usb/../cmsis/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:usb/../cmsis/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
ARM GAS  /tmp/ccfFRkoC.s 			page 11


 336:usb/../cmsis/core_cm3.h **** 
 337:usb/../cmsis/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:usb/../cmsis/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:usb/../cmsis/core_cm3.h **** 
 340:usb/../cmsis/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:usb/../cmsis/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:usb/../cmsis/core_cm3.h **** 
 343:usb/../cmsis/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:usb/../cmsis/core_cm3.h **** 
 347:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:usb/../cmsis/core_cm3.h **** 
 350:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:usb/../cmsis/core_cm3.h **** 
 353:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:usb/../cmsis/core_cm3.h **** 
 356:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:usb/../cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:usb/../cmsis/core_cm3.h **** 
 360:usb/../cmsis/core_cm3.h **** 
 361:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:usb/../cmsis/core_cm3.h ****   memory mapped structure for SysTick
 363:usb/../cmsis/core_cm3.h ****   @{
 364:usb/../cmsis/core_cm3.h ****  */
 365:usb/../cmsis/core_cm3.h **** typedef struct
 366:usb/../cmsis/core_cm3.h **** {
 367:usb/../cmsis/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:usb/../cmsis/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:usb/../cmsis/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:usb/../cmsis/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:usb/../cmsis/core_cm3.h **** } SysTick_Type;
 372:usb/../cmsis/core_cm3.h **** 
 373:usb/../cmsis/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:usb/../cmsis/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:usb/../cmsis/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:usb/../cmsis/core_cm3.h **** 
 377:usb/../cmsis/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:usb/../cmsis/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:usb/../cmsis/core_cm3.h **** 
 380:usb/../cmsis/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:usb/../cmsis/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:usb/../cmsis/core_cm3.h **** 
 383:usb/../cmsis/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:usb/../cmsis/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:usb/../cmsis/core_cm3.h **** 
 386:usb/../cmsis/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:usb/../cmsis/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:usb/../cmsis/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:usb/../cmsis/core_cm3.h **** 
 390:usb/../cmsis/core_cm3.h **** /* SysTick Current Register Definitions */
 391:usb/../cmsis/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:usb/../cmsis/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
ARM GAS  /tmp/ccfFRkoC.s 			page 12


 393:usb/../cmsis/core_cm3.h **** 
 394:usb/../cmsis/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:usb/../cmsis/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:usb/../cmsis/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:usb/../cmsis/core_cm3.h **** 
 398:usb/../cmsis/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:usb/../cmsis/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:usb/../cmsis/core_cm3.h **** 
 401:usb/../cmsis/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:usb/../cmsis/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:usb/../cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:usb/../cmsis/core_cm3.h **** 
 405:usb/../cmsis/core_cm3.h **** 
 406:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:usb/../cmsis/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:usb/../cmsis/core_cm3.h ****   @{
 409:usb/../cmsis/core_cm3.h ****  */
 410:usb/../cmsis/core_cm3.h **** typedef struct
 411:usb/../cmsis/core_cm3.h **** {
 412:usb/../cmsis/core_cm3.h ****   __O  union  
 413:usb/../cmsis/core_cm3.h ****   {
 414:usb/../cmsis/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:usb/../cmsis/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:usb/../cmsis/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:usb/../cmsis/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED0[864];                                 
 419:usb/../cmsis/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED1[15];                                  
 421:usb/../cmsis/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED2[15];                                  
 423:usb/../cmsis/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED3[29];                                  
 425:usb/../cmsis/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:usb/../cmsis/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:usb/../cmsis/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED4[43];                                  
 429:usb/../cmsis/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:usb/../cmsis/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED5[6];                                   
 432:usb/../cmsis/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:usb/../cmsis/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:usb/../cmsis/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:usb/../cmsis/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:usb/../cmsis/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:usb/../cmsis/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:usb/../cmsis/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:usb/../cmsis/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:usb/../cmsis/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:usb/../cmsis/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:usb/../cmsis/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:usb/../cmsis/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:usb/../cmsis/core_cm3.h **** } ITM_Type;                                                
 445:usb/../cmsis/core_cm3.h **** 
 446:usb/../cmsis/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:usb/../cmsis/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:usb/../cmsis/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:usb/../cmsis/core_cm3.h **** 
ARM GAS  /tmp/ccfFRkoC.s 			page 13


 450:usb/../cmsis/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:usb/../cmsis/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:usb/../cmsis/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:usb/../cmsis/core_cm3.h **** 
 454:usb/../cmsis/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:usb/../cmsis/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:usb/../cmsis/core_cm3.h **** 
 457:usb/../cmsis/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:usb/../cmsis/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:usb/../cmsis/core_cm3.h **** 
 460:usb/../cmsis/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:usb/../cmsis/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:usb/../cmsis/core_cm3.h **** 
 463:usb/../cmsis/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:usb/../cmsis/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:usb/../cmsis/core_cm3.h **** 
 466:usb/../cmsis/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:usb/../cmsis/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:usb/../cmsis/core_cm3.h **** 
 469:usb/../cmsis/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:usb/../cmsis/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:usb/../cmsis/core_cm3.h **** 
 472:usb/../cmsis/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:usb/../cmsis/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:usb/../cmsis/core_cm3.h **** 
 475:usb/../cmsis/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:usb/../cmsis/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:usb/../cmsis/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:usb/../cmsis/core_cm3.h **** 
 479:usb/../cmsis/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:usb/../cmsis/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:usb/../cmsis/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:usb/../cmsis/core_cm3.h **** 
 483:usb/../cmsis/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:usb/../cmsis/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:usb/../cmsis/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:usb/../cmsis/core_cm3.h **** 
 487:usb/../cmsis/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:usb/../cmsis/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:usb/../cmsis/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:usb/../cmsis/core_cm3.h **** 
 491:usb/../cmsis/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:usb/../cmsis/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:usb/../cmsis/core_cm3.h **** 
 494:usb/../cmsis/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:usb/../cmsis/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:usb/../cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:usb/../cmsis/core_cm3.h **** 
 498:usb/../cmsis/core_cm3.h **** 
 499:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:usb/../cmsis/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:usb/../cmsis/core_cm3.h ****   @{
 502:usb/../cmsis/core_cm3.h ****  */
 503:usb/../cmsis/core_cm3.h **** typedef struct
 504:usb/../cmsis/core_cm3.h **** {
 505:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED0;
 506:usb/../cmsis/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
ARM GAS  /tmp/ccfFRkoC.s 			page 14


 507:usb/../cmsis/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:usb/../cmsis/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:usb/../cmsis/core_cm3.h **** #else
 510:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED1;
 511:usb/../cmsis/core_cm3.h **** #endif
 512:usb/../cmsis/core_cm3.h **** } InterruptType_Type;
 513:usb/../cmsis/core_cm3.h **** 
 514:usb/../cmsis/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:usb/../cmsis/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:usb/../cmsis/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:usb/../cmsis/core_cm3.h **** 
 518:usb/../cmsis/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:usb/../cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:usb/../cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:usb/../cmsis/core_cm3.h **** 
 522:usb/../cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:usb/../cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:usb/../cmsis/core_cm3.h **** 
 525:usb/../cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:usb/../cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:usb/../cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:usb/../cmsis/core_cm3.h **** 
 529:usb/../cmsis/core_cm3.h **** 
 530:usb/../cmsis/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:usb/../cmsis/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:usb/../cmsis/core_cm3.h ****   @{
 534:usb/../cmsis/core_cm3.h ****  */
 535:usb/../cmsis/core_cm3.h **** typedef struct
 536:usb/../cmsis/core_cm3.h **** {
 537:usb/../cmsis/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:usb/../cmsis/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:usb/../cmsis/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:usb/../cmsis/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:usb/../cmsis/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:usb/../cmsis/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:usb/../cmsis/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:usb/../cmsis/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:usb/../cmsis/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:usb/../cmsis/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:usb/../cmsis/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:usb/../cmsis/core_cm3.h **** } MPU_Type;                                                
 549:usb/../cmsis/core_cm3.h **** 
 550:usb/../cmsis/core_cm3.h **** /* MPU Type Register */
 551:usb/../cmsis/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:usb/../cmsis/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:usb/../cmsis/core_cm3.h **** 
 554:usb/../cmsis/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:usb/../cmsis/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:usb/../cmsis/core_cm3.h **** 
 557:usb/../cmsis/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:usb/../cmsis/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:usb/../cmsis/core_cm3.h **** 
 560:usb/../cmsis/core_cm3.h **** /* MPU Control Register */
 561:usb/../cmsis/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:usb/../cmsis/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:usb/../cmsis/core_cm3.h **** 
ARM GAS  /tmp/ccfFRkoC.s 			page 15


 564:usb/../cmsis/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:usb/../cmsis/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:usb/../cmsis/core_cm3.h **** 
 567:usb/../cmsis/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:usb/../cmsis/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:usb/../cmsis/core_cm3.h **** 
 570:usb/../cmsis/core_cm3.h **** /* MPU Region Number Register */
 571:usb/../cmsis/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:usb/../cmsis/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:usb/../cmsis/core_cm3.h **** 
 574:usb/../cmsis/core_cm3.h **** /* MPU Region Base Address Register */
 575:usb/../cmsis/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:usb/../cmsis/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:usb/../cmsis/core_cm3.h **** 
 578:usb/../cmsis/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:usb/../cmsis/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:usb/../cmsis/core_cm3.h **** 
 581:usb/../cmsis/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:usb/../cmsis/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:usb/../cmsis/core_cm3.h **** 
 584:usb/../cmsis/core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:usb/../cmsis/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:usb/../cmsis/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:usb/../cmsis/core_cm3.h **** 
 588:usb/../cmsis/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:usb/../cmsis/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:usb/../cmsis/core_cm3.h **** 
 591:usb/../cmsis/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:usb/../cmsis/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:usb/../cmsis/core_cm3.h **** 
 594:usb/../cmsis/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:usb/../cmsis/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:usb/../cmsis/core_cm3.h **** 
 597:usb/../cmsis/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:usb/../cmsis/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:usb/../cmsis/core_cm3.h **** 
 600:usb/../cmsis/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:usb/../cmsis/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:usb/../cmsis/core_cm3.h **** 
 603:usb/../cmsis/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:usb/../cmsis/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:usb/../cmsis/core_cm3.h **** 
 606:usb/../cmsis/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:usb/../cmsis/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:usb/../cmsis/core_cm3.h **** 
 609:usb/../cmsis/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:usb/../cmsis/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:usb/../cmsis/core_cm3.h **** 
 612:usb/../cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:usb/../cmsis/core_cm3.h **** #endif
 614:usb/../cmsis/core_cm3.h **** 
 615:usb/../cmsis/core_cm3.h **** 
 616:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:usb/../cmsis/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:usb/../cmsis/core_cm3.h ****   @{
 619:usb/../cmsis/core_cm3.h ****  */
 620:usb/../cmsis/core_cm3.h **** typedef struct
ARM GAS  /tmp/ccfFRkoC.s 			page 16


 621:usb/../cmsis/core_cm3.h **** {
 622:usb/../cmsis/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:usb/../cmsis/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:usb/../cmsis/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:usb/../cmsis/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:usb/../cmsis/core_cm3.h **** } CoreDebug_Type;
 627:usb/../cmsis/core_cm3.h **** 
 628:usb/../cmsis/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:usb/../cmsis/core_cm3.h **** 
 632:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:usb/../cmsis/core_cm3.h **** 
 635:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:usb/../cmsis/core_cm3.h **** 
 638:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:usb/../cmsis/core_cm3.h **** 
 641:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:usb/../cmsis/core_cm3.h **** 
 644:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:usb/../cmsis/core_cm3.h **** 
 647:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:usb/../cmsis/core_cm3.h **** 
 650:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:usb/../cmsis/core_cm3.h **** 
 653:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:usb/../cmsis/core_cm3.h **** 
 656:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:usb/../cmsis/core_cm3.h **** 
 659:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:usb/../cmsis/core_cm3.h **** 
 662:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:usb/../cmsis/core_cm3.h **** 
 665:usb/../cmsis/core_cm3.h **** /* Debug Core Register Selector Register */
 666:usb/../cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:usb/../cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:usb/../cmsis/core_cm3.h **** 
 669:usb/../cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:usb/../cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:usb/../cmsis/core_cm3.h **** 
 672:usb/../cmsis/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:usb/../cmsis/core_cm3.h **** 
 676:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
ARM GAS  /tmp/ccfFRkoC.s 			page 17


 678:usb/../cmsis/core_cm3.h **** 
 679:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:usb/../cmsis/core_cm3.h **** 
 682:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:usb/../cmsis/core_cm3.h **** 
 685:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:usb/../cmsis/core_cm3.h **** 
 688:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:usb/../cmsis/core_cm3.h **** 
 691:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:usb/../cmsis/core_cm3.h **** 
 694:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:usb/../cmsis/core_cm3.h **** 
 697:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:usb/../cmsis/core_cm3.h **** 
 700:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:usb/../cmsis/core_cm3.h **** 
 703:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:usb/../cmsis/core_cm3.h **** 
 706:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:usb/../cmsis/core_cm3.h **** 
 709:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:usb/../cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:usb/../cmsis/core_cm3.h **** 
 713:usb/../cmsis/core_cm3.h **** 
 714:usb/../cmsis/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:usb/../cmsis/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:usb/../cmsis/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:usb/../cmsis/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:usb/../cmsis/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:usb/../cmsis/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:usb/../cmsis/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:usb/../cmsis/core_cm3.h **** 
 722:usb/../cmsis/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:usb/../cmsis/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:usb/../cmsis/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:usb/../cmsis/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:usb/../cmsis/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:usb/../cmsis/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:usb/../cmsis/core_cm3.h **** 
 729:usb/../cmsis/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:usb/../cmsis/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:usb/../cmsis/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:usb/../cmsis/core_cm3.h **** #endif
 733:usb/../cmsis/core_cm3.h **** 
 734:usb/../cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
ARM GAS  /tmp/ccfFRkoC.s 			page 18


 735:usb/../cmsis/core_cm3.h **** 
 736:usb/../cmsis/core_cm3.h **** 
 737:usb/../cmsis/core_cm3.h **** /*******************************************************************************
 738:usb/../cmsis/core_cm3.h ****  *                Hardware Abstraction Layer
 739:usb/../cmsis/core_cm3.h ****  ******************************************************************************/
 740:usb/../cmsis/core_cm3.h **** 
 741:usb/../cmsis/core_cm3.h **** #if defined ( __CC_ARM   )
 742:usb/../cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:usb/../cmsis/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:usb/../cmsis/core_cm3.h **** 
 745:usb/../cmsis/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:usb/../cmsis/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:usb/../cmsis/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:usb/../cmsis/core_cm3.h **** 
 749:usb/../cmsis/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:usb/../cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:usb/../cmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:usb/../cmsis/core_cm3.h **** 
 753:usb/../cmsis/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:usb/../cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:usb/../cmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:usb/../cmsis/core_cm3.h **** 
 757:usb/../cmsis/core_cm3.h **** #endif
 758:usb/../cmsis/core_cm3.h **** 
 759:usb/../cmsis/core_cm3.h **** 
 760:usb/../cmsis/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:usb/../cmsis/core_cm3.h **** 
 762:usb/../cmsis/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:usb/../cmsis/core_cm3.h **** /* ARM armcc specific functions */
 764:usb/../cmsis/core_cm3.h **** 
 765:usb/../cmsis/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:usb/../cmsis/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:usb/../cmsis/core_cm3.h **** 
 768:usb/../cmsis/core_cm3.h **** #define __NOP                             __nop
 769:usb/../cmsis/core_cm3.h **** #define __WFI                             __wfi
 770:usb/../cmsis/core_cm3.h **** #define __WFE                             __wfe
 771:usb/../cmsis/core_cm3.h **** #define __SEV                             __sev
 772:usb/../cmsis/core_cm3.h **** #define __ISB()                           __isb(0)
 773:usb/../cmsis/core_cm3.h **** #define __DSB()                           __dsb(0)
 774:usb/../cmsis/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:usb/../cmsis/core_cm3.h **** #define __REV                             __rev
 776:usb/../cmsis/core_cm3.h **** #define __RBIT                            __rbit
 777:usb/../cmsis/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:usb/../cmsis/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:usb/../cmsis/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:usb/../cmsis/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:usb/../cmsis/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:usb/../cmsis/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:usb/../cmsis/core_cm3.h **** 
 784:usb/../cmsis/core_cm3.h **** 
 785:usb/../cmsis/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:usb/../cmsis/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:usb/../cmsis/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:usb/../cmsis/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:usb/../cmsis/core_cm3.h **** 
 790:usb/../cmsis/core_cm3.h **** 
 791:usb/../cmsis/core_cm3.h **** /**
ARM GAS  /tmp/ccfFRkoC.s 			page 19


 792:usb/../cmsis/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:usb/../cmsis/core_cm3.h ****  *
 794:usb/../cmsis/core_cm3.h ****  * @return ProcessStackPointer
 795:usb/../cmsis/core_cm3.h ****  *
 796:usb/../cmsis/core_cm3.h ****  * Return the actual process stack pointer
 797:usb/../cmsis/core_cm3.h ****  */
 798:usb/../cmsis/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:usb/../cmsis/core_cm3.h **** 
 800:usb/../cmsis/core_cm3.h **** /**
 801:usb/../cmsis/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:usb/../cmsis/core_cm3.h ****  *
 803:usb/../cmsis/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:usb/../cmsis/core_cm3.h ****  *
 805:usb/../cmsis/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 806:usb/../cmsis/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:usb/../cmsis/core_cm3.h ****  */
 808:usb/../cmsis/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:usb/../cmsis/core_cm3.h **** 
 810:usb/../cmsis/core_cm3.h **** /**
 811:usb/../cmsis/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:usb/../cmsis/core_cm3.h ****  *
 813:usb/../cmsis/core_cm3.h ****  * @return Main Stack Pointer
 814:usb/../cmsis/core_cm3.h ****  *
 815:usb/../cmsis/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:usb/../cmsis/core_cm3.h ****  * Cortex processor register
 817:usb/../cmsis/core_cm3.h ****  */
 818:usb/../cmsis/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:usb/../cmsis/core_cm3.h **** 
 820:usb/../cmsis/core_cm3.h **** /**
 821:usb/../cmsis/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:usb/../cmsis/core_cm3.h ****  *
 823:usb/../cmsis/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:usb/../cmsis/core_cm3.h ****  *
 825:usb/../cmsis/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 826:usb/../cmsis/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:usb/../cmsis/core_cm3.h ****  */
 828:usb/../cmsis/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:usb/../cmsis/core_cm3.h **** 
 830:usb/../cmsis/core_cm3.h **** /**
 831:usb/../cmsis/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:usb/../cmsis/core_cm3.h ****  *
 833:usb/../cmsis/core_cm3.h ****  * @param   value  value to reverse
 834:usb/../cmsis/core_cm3.h ****  * @return         reversed value
 835:usb/../cmsis/core_cm3.h ****  *
 836:usb/../cmsis/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:usb/../cmsis/core_cm3.h ****  */
 838:usb/../cmsis/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:usb/../cmsis/core_cm3.h **** 
 840:usb/../cmsis/core_cm3.h **** /**
 841:usb/../cmsis/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:usb/../cmsis/core_cm3.h ****  *
 843:usb/../cmsis/core_cm3.h ****  * @param   value  value to reverse
 844:usb/../cmsis/core_cm3.h ****  * @return         reversed value
 845:usb/../cmsis/core_cm3.h ****  *
 846:usb/../cmsis/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:usb/../cmsis/core_cm3.h ****  */
 848:usb/../cmsis/core_cm3.h **** extern int32_t __REVSH(int16_t value);
ARM GAS  /tmp/ccfFRkoC.s 			page 20


 849:usb/../cmsis/core_cm3.h **** 
 850:usb/../cmsis/core_cm3.h **** 
 851:usb/../cmsis/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:usb/../cmsis/core_cm3.h **** 
 853:usb/../cmsis/core_cm3.h **** /**
 854:usb/../cmsis/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:usb/../cmsis/core_cm3.h ****  *
 856:usb/../cmsis/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:usb/../cmsis/core_cm3.h ****  */
 858:usb/../cmsis/core_cm3.h **** extern void __CLREX(void);
 859:usb/../cmsis/core_cm3.h **** 
 860:usb/../cmsis/core_cm3.h **** /**
 861:usb/../cmsis/core_cm3.h ****  * @brief  Return the Base Priority value
 862:usb/../cmsis/core_cm3.h ****  *
 863:usb/../cmsis/core_cm3.h ****  * @return BasePriority
 864:usb/../cmsis/core_cm3.h ****  *
 865:usb/../cmsis/core_cm3.h ****  * Return the content of the base priority register
 866:usb/../cmsis/core_cm3.h ****  */
 867:usb/../cmsis/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:usb/../cmsis/core_cm3.h **** 
 869:usb/../cmsis/core_cm3.h **** /**
 870:usb/../cmsis/core_cm3.h ****  * @brief  Set the Base Priority value
 871:usb/../cmsis/core_cm3.h ****  *
 872:usb/../cmsis/core_cm3.h ****  * @param  basePri  BasePriority
 873:usb/../cmsis/core_cm3.h ****  *
 874:usb/../cmsis/core_cm3.h ****  * Set the base priority register
 875:usb/../cmsis/core_cm3.h ****  */
 876:usb/../cmsis/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:usb/../cmsis/core_cm3.h **** 
 878:usb/../cmsis/core_cm3.h **** /**
 879:usb/../cmsis/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:usb/../cmsis/core_cm3.h ****  *
 881:usb/../cmsis/core_cm3.h ****  * @return PriMask
 882:usb/../cmsis/core_cm3.h ****  *
 883:usb/../cmsis/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:usb/../cmsis/core_cm3.h ****  */
 885:usb/../cmsis/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:usb/../cmsis/core_cm3.h **** 
 887:usb/../cmsis/core_cm3.h **** /**
 888:usb/../cmsis/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:usb/../cmsis/core_cm3.h ****  *
 890:usb/../cmsis/core_cm3.h ****  * @param   priMask  PriMask
 891:usb/../cmsis/core_cm3.h ****  *
 892:usb/../cmsis/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:usb/../cmsis/core_cm3.h ****  */
 894:usb/../cmsis/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:usb/../cmsis/core_cm3.h **** 
 896:usb/../cmsis/core_cm3.h **** /**
 897:usb/../cmsis/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:usb/../cmsis/core_cm3.h ****  *
 899:usb/../cmsis/core_cm3.h ****  * @return FaultMask
 900:usb/../cmsis/core_cm3.h ****  *
 901:usb/../cmsis/core_cm3.h ****  * Return the content of the fault mask register
 902:usb/../cmsis/core_cm3.h ****  */
 903:usb/../cmsis/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:usb/../cmsis/core_cm3.h **** 
 905:usb/../cmsis/core_cm3.h **** /**
ARM GAS  /tmp/ccfFRkoC.s 			page 21


 906:usb/../cmsis/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:usb/../cmsis/core_cm3.h ****  *
 908:usb/../cmsis/core_cm3.h ****  * @param  faultMask faultMask value
 909:usb/../cmsis/core_cm3.h ****  *
 910:usb/../cmsis/core_cm3.h ****  * Set the fault mask register
 911:usb/../cmsis/core_cm3.h ****  */
 912:usb/../cmsis/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:usb/../cmsis/core_cm3.h **** 
 914:usb/../cmsis/core_cm3.h **** /**
 915:usb/../cmsis/core_cm3.h ****  * @brief  Return the Control Register value
 916:usb/../cmsis/core_cm3.h ****  * 
 917:usb/../cmsis/core_cm3.h ****  * @return Control value
 918:usb/../cmsis/core_cm3.h ****  *
 919:usb/../cmsis/core_cm3.h ****  * Return the content of the control register
 920:usb/../cmsis/core_cm3.h ****  */
 921:usb/../cmsis/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:usb/../cmsis/core_cm3.h **** 
 923:usb/../cmsis/core_cm3.h **** /**
 924:usb/../cmsis/core_cm3.h ****  * @brief  Set the Control Register value
 925:usb/../cmsis/core_cm3.h ****  *
 926:usb/../cmsis/core_cm3.h ****  * @param  control  Control value
 927:usb/../cmsis/core_cm3.h ****  *
 928:usb/../cmsis/core_cm3.h ****  * Set the control register
 929:usb/../cmsis/core_cm3.h ****  */
 930:usb/../cmsis/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:usb/../cmsis/core_cm3.h **** 
 932:usb/../cmsis/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:usb/../cmsis/core_cm3.h **** 
 934:usb/../cmsis/core_cm3.h **** /**
 935:usb/../cmsis/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:usb/../cmsis/core_cm3.h ****  *
 937:usb/../cmsis/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:usb/../cmsis/core_cm3.h ****  */
 939:usb/../cmsis/core_cm3.h **** #define __CLREX                           __clrex
 940:usb/../cmsis/core_cm3.h **** 
 941:usb/../cmsis/core_cm3.h **** /**
 942:usb/../cmsis/core_cm3.h ****  * @brief  Return the Base Priority value
 943:usb/../cmsis/core_cm3.h ****  *
 944:usb/../cmsis/core_cm3.h ****  * @return BasePriority
 945:usb/../cmsis/core_cm3.h ****  *
 946:usb/../cmsis/core_cm3.h ****  * Return the content of the base priority register
 947:usb/../cmsis/core_cm3.h ****  */
 948:usb/../cmsis/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:usb/../cmsis/core_cm3.h **** {
 950:usb/../cmsis/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:usb/../cmsis/core_cm3.h ****   return(__regBasePri);
 952:usb/../cmsis/core_cm3.h **** }
 953:usb/../cmsis/core_cm3.h **** 
 954:usb/../cmsis/core_cm3.h **** /**
 955:usb/../cmsis/core_cm3.h ****  * @brief  Set the Base Priority value
 956:usb/../cmsis/core_cm3.h ****  *
 957:usb/../cmsis/core_cm3.h ****  * @param  basePri  BasePriority
 958:usb/../cmsis/core_cm3.h ****  *
 959:usb/../cmsis/core_cm3.h ****  * Set the base priority register
 960:usb/../cmsis/core_cm3.h ****  */
 961:usb/../cmsis/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:usb/../cmsis/core_cm3.h **** {
ARM GAS  /tmp/ccfFRkoC.s 			page 22


 963:usb/../cmsis/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:usb/../cmsis/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:usb/../cmsis/core_cm3.h **** }
 966:usb/../cmsis/core_cm3.h **** 
 967:usb/../cmsis/core_cm3.h **** /**
 968:usb/../cmsis/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:usb/../cmsis/core_cm3.h ****  *
 970:usb/../cmsis/core_cm3.h ****  * @return PriMask
 971:usb/../cmsis/core_cm3.h ****  *
 972:usb/../cmsis/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:usb/../cmsis/core_cm3.h ****  */
 974:usb/../cmsis/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:usb/../cmsis/core_cm3.h **** {
 976:usb/../cmsis/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:usb/../cmsis/core_cm3.h ****   return(__regPriMask);
 978:usb/../cmsis/core_cm3.h **** }
 979:usb/../cmsis/core_cm3.h **** 
 980:usb/../cmsis/core_cm3.h **** /**
 981:usb/../cmsis/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:usb/../cmsis/core_cm3.h ****  *
 983:usb/../cmsis/core_cm3.h ****  * @param  priMask  PriMask
 984:usb/../cmsis/core_cm3.h ****  *
 985:usb/../cmsis/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:usb/../cmsis/core_cm3.h ****  */
 987:usb/../cmsis/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:usb/../cmsis/core_cm3.h **** {
 989:usb/../cmsis/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:usb/../cmsis/core_cm3.h ****   __regPriMask = (priMask);
 991:usb/../cmsis/core_cm3.h **** }
 992:usb/../cmsis/core_cm3.h **** 
 993:usb/../cmsis/core_cm3.h **** /**
 994:usb/../cmsis/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:usb/../cmsis/core_cm3.h ****  *
 996:usb/../cmsis/core_cm3.h ****  * @return FaultMask
 997:usb/../cmsis/core_cm3.h ****  *
 998:usb/../cmsis/core_cm3.h ****  * Return the content of the fault mask register
 999:usb/../cmsis/core_cm3.h ****  */
1000:usb/../cmsis/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:usb/../cmsis/core_cm3.h **** {
1002:usb/../cmsis/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:usb/../cmsis/core_cm3.h ****   return(__regFaultMask);
1004:usb/../cmsis/core_cm3.h **** }
1005:usb/../cmsis/core_cm3.h **** 
1006:usb/../cmsis/core_cm3.h **** /**
1007:usb/../cmsis/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:usb/../cmsis/core_cm3.h ****  *
1009:usb/../cmsis/core_cm3.h ****  * @param  faultMask  faultMask value
1010:usb/../cmsis/core_cm3.h ****  *
1011:usb/../cmsis/core_cm3.h ****  * Set the fault mask register
1012:usb/../cmsis/core_cm3.h ****  */
1013:usb/../cmsis/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:usb/../cmsis/core_cm3.h **** {
1015:usb/../cmsis/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:usb/../cmsis/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:usb/../cmsis/core_cm3.h **** }
1018:usb/../cmsis/core_cm3.h **** 
1019:usb/../cmsis/core_cm3.h **** /**
ARM GAS  /tmp/ccfFRkoC.s 			page 23


1020:usb/../cmsis/core_cm3.h ****  * @brief  Return the Control Register value
1021:usb/../cmsis/core_cm3.h ****  * 
1022:usb/../cmsis/core_cm3.h ****  * @return Control value
1023:usb/../cmsis/core_cm3.h ****  *
1024:usb/../cmsis/core_cm3.h ****  * Return the content of the control register
1025:usb/../cmsis/core_cm3.h ****  */
1026:usb/../cmsis/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:usb/../cmsis/core_cm3.h **** {
1028:usb/../cmsis/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:usb/../cmsis/core_cm3.h ****   return(__regControl);
1030:usb/../cmsis/core_cm3.h **** }
1031:usb/../cmsis/core_cm3.h **** 
1032:usb/../cmsis/core_cm3.h **** /**
1033:usb/../cmsis/core_cm3.h ****  * @brief  Set the Control Register value
1034:usb/../cmsis/core_cm3.h ****  *
1035:usb/../cmsis/core_cm3.h ****  * @param  control  Control value
1036:usb/../cmsis/core_cm3.h ****  *
1037:usb/../cmsis/core_cm3.h ****  * Set the control register
1038:usb/../cmsis/core_cm3.h ****  */
1039:usb/../cmsis/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:usb/../cmsis/core_cm3.h **** {
1041:usb/../cmsis/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:usb/../cmsis/core_cm3.h ****   __regControl = control;
1043:usb/../cmsis/core_cm3.h **** }
1044:usb/../cmsis/core_cm3.h **** 
1045:usb/../cmsis/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
1046:usb/../cmsis/core_cm3.h **** 
1047:usb/../cmsis/core_cm3.h **** 
1048:usb/../cmsis/core_cm3.h **** 
1049:usb/../cmsis/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:usb/../cmsis/core_cm3.h **** /* IAR iccarm specific functions */
1051:usb/../cmsis/core_cm3.h **** 
1052:usb/../cmsis/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:usb/../cmsis/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:usb/../cmsis/core_cm3.h **** 
1055:usb/../cmsis/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:usb/../cmsis/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:usb/../cmsis/core_cm3.h **** 
1058:usb/../cmsis/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:usb/../cmsis/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:usb/../cmsis/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:usb/../cmsis/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:usb/../cmsis/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:usb/../cmsis/core_cm3.h **** 
1064:usb/../cmsis/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:usb/../cmsis/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:usb/../cmsis/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:usb/../cmsis/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:usb/../cmsis/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:usb/../cmsis/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:usb/../cmsis/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:usb/../cmsis/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:usb/../cmsis/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:usb/../cmsis/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:usb/../cmsis/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:usb/../cmsis/core_cm3.h **** 
1076:usb/../cmsis/core_cm3.h **** 
ARM GAS  /tmp/ccfFRkoC.s 			page 24


1077:usb/../cmsis/core_cm3.h **** /**
1078:usb/../cmsis/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:usb/../cmsis/core_cm3.h ****  *
1080:usb/../cmsis/core_cm3.h ****  * @return ProcessStackPointer
1081:usb/../cmsis/core_cm3.h ****  *
1082:usb/../cmsis/core_cm3.h ****  * Return the actual process stack pointer
1083:usb/../cmsis/core_cm3.h ****  */
1084:usb/../cmsis/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:usb/../cmsis/core_cm3.h **** 
1086:usb/../cmsis/core_cm3.h **** /**
1087:usb/../cmsis/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:usb/../cmsis/core_cm3.h ****  *
1089:usb/../cmsis/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:usb/../cmsis/core_cm3.h ****  *
1091:usb/../cmsis/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1092:usb/../cmsis/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:usb/../cmsis/core_cm3.h ****  */
1094:usb/../cmsis/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:usb/../cmsis/core_cm3.h **** 
1096:usb/../cmsis/core_cm3.h **** /**
1097:usb/../cmsis/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:usb/../cmsis/core_cm3.h ****  *
1099:usb/../cmsis/core_cm3.h ****  * @return Main Stack Pointer
1100:usb/../cmsis/core_cm3.h ****  *
1101:usb/../cmsis/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:usb/../cmsis/core_cm3.h ****  * Cortex processor register
1103:usb/../cmsis/core_cm3.h ****  */
1104:usb/../cmsis/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:usb/../cmsis/core_cm3.h **** 
1106:usb/../cmsis/core_cm3.h **** /**
1107:usb/../cmsis/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:usb/../cmsis/core_cm3.h ****  *
1109:usb/../cmsis/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:usb/../cmsis/core_cm3.h ****  *
1111:usb/../cmsis/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1112:usb/../cmsis/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:usb/../cmsis/core_cm3.h ****  */
1114:usb/../cmsis/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:usb/../cmsis/core_cm3.h **** 
1116:usb/../cmsis/core_cm3.h **** /**
1117:usb/../cmsis/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:usb/../cmsis/core_cm3.h ****  *
1119:usb/../cmsis/core_cm3.h ****  * @param  value  value to reverse
1120:usb/../cmsis/core_cm3.h ****  * @return        reversed value
1121:usb/../cmsis/core_cm3.h ****  *
1122:usb/../cmsis/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:usb/../cmsis/core_cm3.h ****  */
1124:usb/../cmsis/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:usb/../cmsis/core_cm3.h **** 
1126:usb/../cmsis/core_cm3.h **** /**
1127:usb/../cmsis/core_cm3.h ****  * @brief  Reverse bit order of value
1128:usb/../cmsis/core_cm3.h ****  *
1129:usb/../cmsis/core_cm3.h ****  * @param  value  value to reverse
1130:usb/../cmsis/core_cm3.h ****  * @return        reversed value
1131:usb/../cmsis/core_cm3.h ****  *
1132:usb/../cmsis/core_cm3.h ****  * Reverse bit order of value
1133:usb/../cmsis/core_cm3.h ****  */
ARM GAS  /tmp/ccfFRkoC.s 			page 25


1134:usb/../cmsis/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:usb/../cmsis/core_cm3.h **** 
1136:usb/../cmsis/core_cm3.h **** /**
1137:usb/../cmsis/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:usb/../cmsis/core_cm3.h ****  *
1139:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1140:usb/../cmsis/core_cm3.h ****  * @return        value of (*address)
1141:usb/../cmsis/core_cm3.h ****  *
1142:usb/../cmsis/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:usb/../cmsis/core_cm3.h ****  */
1144:usb/../cmsis/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:usb/../cmsis/core_cm3.h **** 
1146:usb/../cmsis/core_cm3.h **** /**
1147:usb/../cmsis/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:usb/../cmsis/core_cm3.h ****  *
1149:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1150:usb/../cmsis/core_cm3.h ****  * @return        value of (*address)
1151:usb/../cmsis/core_cm3.h ****  *
1152:usb/../cmsis/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:usb/../cmsis/core_cm3.h ****  */
1154:usb/../cmsis/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:usb/../cmsis/core_cm3.h **** 
1156:usb/../cmsis/core_cm3.h **** /**
1157:usb/../cmsis/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:usb/../cmsis/core_cm3.h ****  *
1159:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1160:usb/../cmsis/core_cm3.h ****  * @return        value of (*address)
1161:usb/../cmsis/core_cm3.h ****  *
1162:usb/../cmsis/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:usb/../cmsis/core_cm3.h ****  */
1164:usb/../cmsis/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:usb/../cmsis/core_cm3.h **** 
1166:usb/../cmsis/core_cm3.h **** /**
1167:usb/../cmsis/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:usb/../cmsis/core_cm3.h ****  *
1169:usb/../cmsis/core_cm3.h ****  * @param  value  value to store
1170:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1171:usb/../cmsis/core_cm3.h ****  * @return        successful / failed
1172:usb/../cmsis/core_cm3.h ****  *
1173:usb/../cmsis/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:usb/../cmsis/core_cm3.h ****  */
1175:usb/../cmsis/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:usb/../cmsis/core_cm3.h **** 
1177:usb/../cmsis/core_cm3.h **** /**
1178:usb/../cmsis/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:usb/../cmsis/core_cm3.h ****  *
1180:usb/../cmsis/core_cm3.h ****  * @param  value  value to store
1181:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1182:usb/../cmsis/core_cm3.h ****  * @return        successful / failed
1183:usb/../cmsis/core_cm3.h ****  *
1184:usb/../cmsis/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:usb/../cmsis/core_cm3.h ****  */
1186:usb/../cmsis/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:usb/../cmsis/core_cm3.h **** 
1188:usb/../cmsis/core_cm3.h **** /**
1189:usb/../cmsis/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:usb/../cmsis/core_cm3.h ****  *
ARM GAS  /tmp/ccfFRkoC.s 			page 26


1191:usb/../cmsis/core_cm3.h ****  * @param  value  value to store
1192:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1193:usb/../cmsis/core_cm3.h ****  * @return        successful / failed
1194:usb/../cmsis/core_cm3.h ****  *
1195:usb/../cmsis/core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:usb/../cmsis/core_cm3.h ****  */
1197:usb/../cmsis/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:usb/../cmsis/core_cm3.h **** 
1199:usb/../cmsis/core_cm3.h **** 
1200:usb/../cmsis/core_cm3.h **** 
1201:usb/../cmsis/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:usb/../cmsis/core_cm3.h **** /* GNU gcc specific functions */
1203:usb/../cmsis/core_cm3.h **** 
1204:usb/../cmsis/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:usb/../cmsis/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:usb/../cmsis/core_cm3.h **** 
1207:usb/../cmsis/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:usb/../cmsis/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:usb/../cmsis/core_cm3.h **** 
1210:usb/../cmsis/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:usb/../cmsis/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
1212:usb/../cmsis/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
1213:usb/../cmsis/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
1214:usb/../cmsis/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
1215:usb/../cmsis/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
1216:usb/../cmsis/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
1217:usb/../cmsis/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
1218:usb/../cmsis/core_cm3.h **** 
1219:usb/../cmsis/core_cm3.h **** 
1220:usb/../cmsis/core_cm3.h **** /**
1221:usb/../cmsis/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1222:usb/../cmsis/core_cm3.h ****  *
1223:usb/../cmsis/core_cm3.h ****  * @return ProcessStackPointer
1224:usb/../cmsis/core_cm3.h ****  *
1225:usb/../cmsis/core_cm3.h ****  * Return the actual process stack pointer
1226:usb/../cmsis/core_cm3.h ****  */
1227:usb/../cmsis/core_cm3.h **** extern uint32_t __get_PSP(void);
1228:usb/../cmsis/core_cm3.h **** 
1229:usb/../cmsis/core_cm3.h **** /**
1230:usb/../cmsis/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1231:usb/../cmsis/core_cm3.h ****  *
1232:usb/../cmsis/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1233:usb/../cmsis/core_cm3.h ****  *
1234:usb/../cmsis/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1235:usb/../cmsis/core_cm3.h ****  * (process stack pointer) Cortex processor register
1236:usb/../cmsis/core_cm3.h ****  */
1237:usb/../cmsis/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1238:usb/../cmsis/core_cm3.h **** 
1239:usb/../cmsis/core_cm3.h **** /**
1240:usb/../cmsis/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1241:usb/../cmsis/core_cm3.h ****  *
1242:usb/../cmsis/core_cm3.h ****  * @return Main Stack Pointer
1243:usb/../cmsis/core_cm3.h ****  *
1244:usb/../cmsis/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1245:usb/../cmsis/core_cm3.h ****  * Cortex processor register
1246:usb/../cmsis/core_cm3.h ****  */
1247:usb/../cmsis/core_cm3.h **** extern uint32_t __get_MSP(void);
ARM GAS  /tmp/ccfFRkoC.s 			page 27


1248:usb/../cmsis/core_cm3.h **** 
1249:usb/../cmsis/core_cm3.h **** /**
1250:usb/../cmsis/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1251:usb/../cmsis/core_cm3.h ****  *
1252:usb/../cmsis/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1253:usb/../cmsis/core_cm3.h ****  *
1254:usb/../cmsis/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1255:usb/../cmsis/core_cm3.h ****  * (main stack pointer) Cortex processor register
1256:usb/../cmsis/core_cm3.h ****  */
1257:usb/../cmsis/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1258:usb/../cmsis/core_cm3.h **** 
1259:usb/../cmsis/core_cm3.h **** /**
1260:usb/../cmsis/core_cm3.h ****  * @brief  Return the Base Priority value
1261:usb/../cmsis/core_cm3.h ****  *
1262:usb/../cmsis/core_cm3.h ****  * @return BasePriority
1263:usb/../cmsis/core_cm3.h ****  *
1264:usb/../cmsis/core_cm3.h ****  * Return the content of the base priority register
1265:usb/../cmsis/core_cm3.h ****  */
1266:usb/../cmsis/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
1267:usb/../cmsis/core_cm3.h **** 
1268:usb/../cmsis/core_cm3.h **** /**
1269:usb/../cmsis/core_cm3.h ****  * @brief  Set the Base Priority value
1270:usb/../cmsis/core_cm3.h ****  *
1271:usb/../cmsis/core_cm3.h ****  * @param  basePri  BasePriority
1272:usb/../cmsis/core_cm3.h ****  *
1273:usb/../cmsis/core_cm3.h ****  * Set the base priority register
1274:usb/../cmsis/core_cm3.h ****  */
1275:usb/../cmsis/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
1276:usb/../cmsis/core_cm3.h **** 
1277:usb/../cmsis/core_cm3.h **** /**
1278:usb/../cmsis/core_cm3.h ****  * @brief  Return the Priority Mask value
1279:usb/../cmsis/core_cm3.h ****  *
1280:usb/../cmsis/core_cm3.h ****  * @return PriMask
1281:usb/../cmsis/core_cm3.h ****  *
1282:usb/../cmsis/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
1283:usb/../cmsis/core_cm3.h ****  */
1284:usb/../cmsis/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
1285:usb/../cmsis/core_cm3.h **** 
1286:usb/../cmsis/core_cm3.h **** /**
1287:usb/../cmsis/core_cm3.h ****  * @brief  Set the Priority Mask value
1288:usb/../cmsis/core_cm3.h ****  *
1289:usb/../cmsis/core_cm3.h ****  * @param  priMask  PriMask
1290:usb/../cmsis/core_cm3.h ****  *
1291:usb/../cmsis/core_cm3.h ****  * Set the priority mask bit in the priority mask register
1292:usb/../cmsis/core_cm3.h ****  */
1293:usb/../cmsis/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
1294:usb/../cmsis/core_cm3.h **** 
1295:usb/../cmsis/core_cm3.h **** /**
1296:usb/../cmsis/core_cm3.h ****  * @brief  Return the Fault Mask value
1297:usb/../cmsis/core_cm3.h ****  *
1298:usb/../cmsis/core_cm3.h ****  * @return FaultMask
1299:usb/../cmsis/core_cm3.h ****  *
1300:usb/../cmsis/core_cm3.h ****  * Return the content of the fault mask register
1301:usb/../cmsis/core_cm3.h ****  */
1302:usb/../cmsis/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
1303:usb/../cmsis/core_cm3.h **** 
1304:usb/../cmsis/core_cm3.h **** /**
ARM GAS  /tmp/ccfFRkoC.s 			page 28


1305:usb/../cmsis/core_cm3.h ****  * @brief  Set the Fault Mask value
1306:usb/../cmsis/core_cm3.h ****  *
1307:usb/../cmsis/core_cm3.h ****  * @param  faultMask  faultMask value
1308:usb/../cmsis/core_cm3.h ****  *
1309:usb/../cmsis/core_cm3.h ****  * Set the fault mask register
1310:usb/../cmsis/core_cm3.h ****  */
1311:usb/../cmsis/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
1312:usb/../cmsis/core_cm3.h **** 
1313:usb/../cmsis/core_cm3.h **** /**
1314:usb/../cmsis/core_cm3.h ****  * @brief  Return the Control Register value
1315:usb/../cmsis/core_cm3.h **** * 
1316:usb/../cmsis/core_cm3.h **** *  @return Control value
1317:usb/../cmsis/core_cm3.h ****  *
1318:usb/../cmsis/core_cm3.h ****  * Return the content of the control register
1319:usb/../cmsis/core_cm3.h ****  */
1320:usb/../cmsis/core_cm3.h **** extern uint32_t __get_CONTROL(void);
1321:usb/../cmsis/core_cm3.h **** 
1322:usb/../cmsis/core_cm3.h **** /**
1323:usb/../cmsis/core_cm3.h ****  * @brief  Set the Control Register value
1324:usb/../cmsis/core_cm3.h ****  *
1325:usb/../cmsis/core_cm3.h ****  * @param  control  Control value
1326:usb/../cmsis/core_cm3.h ****  *
1327:usb/../cmsis/core_cm3.h ****  * Set the control register
1328:usb/../cmsis/core_cm3.h ****  */
1329:usb/../cmsis/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
1330:usb/../cmsis/core_cm3.h **** 
1331:usb/../cmsis/core_cm3.h **** /**
1332:usb/../cmsis/core_cm3.h ****  * @brief  Reverse byte order in integer value
1333:usb/../cmsis/core_cm3.h ****  *
1334:usb/../cmsis/core_cm3.h ****  * @param  value  value to reverse
1335:usb/../cmsis/core_cm3.h ****  * @return        reversed value
1336:usb/../cmsis/core_cm3.h ****  *
1337:usb/../cmsis/core_cm3.h ****  * Reverse byte order in integer value
1338:usb/../cmsis/core_cm3.h ****  */
1339:usb/../cmsis/core_cm3.h **** extern uint32_t __REV(uint32_t value);
1340:usb/../cmsis/core_cm3.h **** 
1341:usb/../cmsis/core_cm3.h **** /**
1342:usb/../cmsis/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1343:usb/../cmsis/core_cm3.h ****  *
1344:usb/../cmsis/core_cm3.h ****  * @param  value  value to reverse
1345:usb/../cmsis/core_cm3.h ****  * @return        reversed value
1346:usb/../cmsis/core_cm3.h ****  *
1347:usb/../cmsis/core_cm3.h ****  * Reverse byte order in unsigned short value
1348:usb/../cmsis/core_cm3.h ****  */
1349:usb/../cmsis/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1350:usb/../cmsis/core_cm3.h **** 
1351:usb/../cmsis/core_cm3.h **** /**
1352:usb/../cmsis/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
1353:usb/../cmsis/core_cm3.h ****  *
1354:usb/../cmsis/core_cm3.h ****  * @param  value  value to reverse
1355:usb/../cmsis/core_cm3.h ****  * @return        reversed value
1356:usb/../cmsis/core_cm3.h ****  *
1357:usb/../cmsis/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
1358:usb/../cmsis/core_cm3.h ****  */
1359:usb/../cmsis/core_cm3.h **** extern int32_t __REVSH(int16_t value);
1360:usb/../cmsis/core_cm3.h **** 
1361:usb/../cmsis/core_cm3.h **** /**
ARM GAS  /tmp/ccfFRkoC.s 			page 29


1362:usb/../cmsis/core_cm3.h ****  * @brief  Reverse bit order of value
1363:usb/../cmsis/core_cm3.h ****  *
1364:usb/../cmsis/core_cm3.h ****  * @param  value  value to reverse
1365:usb/../cmsis/core_cm3.h ****  * @return        reversed value
1366:usb/../cmsis/core_cm3.h ****  *
1367:usb/../cmsis/core_cm3.h ****  * Reverse bit order of value
1368:usb/../cmsis/core_cm3.h ****  */
1369:usb/../cmsis/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1370:usb/../cmsis/core_cm3.h **** 
1371:usb/../cmsis/core_cm3.h **** /**
1372:usb/../cmsis/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1373:usb/../cmsis/core_cm3.h ****  *
1374:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1375:usb/../cmsis/core_cm3.h ****  * @return        value of (*address)
1376:usb/../cmsis/core_cm3.h ****  *
1377:usb/../cmsis/core_cm3.h ****  * Exclusive LDR command for 8 bit value
1378:usb/../cmsis/core_cm3.h ****  */
1379:usb/../cmsis/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1380:usb/../cmsis/core_cm3.h **** 
1381:usb/../cmsis/core_cm3.h **** /**
1382:usb/../cmsis/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1383:usb/../cmsis/core_cm3.h ****  *
1384:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1385:usb/../cmsis/core_cm3.h ****  * @return        value of (*address)
1386:usb/../cmsis/core_cm3.h ****  *
1387:usb/../cmsis/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1388:usb/../cmsis/core_cm3.h ****  */
1389:usb/../cmsis/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1390:usb/../cmsis/core_cm3.h **** 
1391:usb/../cmsis/core_cm3.h **** /**
1392:usb/../cmsis/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1393:usb/../cmsis/core_cm3.h ****  *
1394:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1395:usb/../cmsis/core_cm3.h ****  * @return        value of (*address)
1396:usb/../cmsis/core_cm3.h ****  *
1397:usb/../cmsis/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1398:usb/../cmsis/core_cm3.h ****  */
1399:usb/../cmsis/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1400:usb/../cmsis/core_cm3.h **** 
1401:usb/../cmsis/core_cm3.h **** /**
1402:usb/../cmsis/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1403:usb/../cmsis/core_cm3.h ****  *
1404:usb/../cmsis/core_cm3.h ****  * @param  value  value to store
1405:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1406:usb/../cmsis/core_cm3.h ****  * @return        successful / failed
1407:usb/../cmsis/core_cm3.h ****  *
1408:usb/../cmsis/core_cm3.h ****  * Exclusive STR command for 8 bit values
1409:usb/../cmsis/core_cm3.h ****  */
1410:usb/../cmsis/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1411:usb/../cmsis/core_cm3.h **** 
1412:usb/../cmsis/core_cm3.h **** /**
1413:usb/../cmsis/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1414:usb/../cmsis/core_cm3.h ****  *
1415:usb/../cmsis/core_cm3.h ****  * @param  value  value to store
1416:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1417:usb/../cmsis/core_cm3.h ****  * @return        successful / failed
1418:usb/../cmsis/core_cm3.h ****  *
ARM GAS  /tmp/ccfFRkoC.s 			page 30


1419:usb/../cmsis/core_cm3.h ****  * Exclusive STR command for 16 bit values
1420:usb/../cmsis/core_cm3.h ****  */
1421:usb/../cmsis/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1422:usb/../cmsis/core_cm3.h **** 
1423:usb/../cmsis/core_cm3.h **** /**
1424:usb/../cmsis/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1425:usb/../cmsis/core_cm3.h ****  *
1426:usb/../cmsis/core_cm3.h ****  * @param  value  value to store
1427:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1428:usb/../cmsis/core_cm3.h ****  * @return        successful / failed
1429:usb/../cmsis/core_cm3.h ****  *
1430:usb/../cmsis/core_cm3.h ****  * Exclusive STR command for 32 bit values
1431:usb/../cmsis/core_cm3.h ****  */
1432:usb/../cmsis/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1433:usb/../cmsis/core_cm3.h **** 
1434:usb/../cmsis/core_cm3.h **** 
1435:usb/../cmsis/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1436:usb/../cmsis/core_cm3.h **** /* TASKING carm specific functions */
1437:usb/../cmsis/core_cm3.h **** 
1438:usb/../cmsis/core_cm3.h **** /*
1439:usb/../cmsis/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1440:usb/../cmsis/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1441:usb/../cmsis/core_cm3.h ****  * Including the CMSIS ones.
1442:usb/../cmsis/core_cm3.h ****  */
1443:usb/../cmsis/core_cm3.h **** 
1444:usb/../cmsis/core_cm3.h **** #endif
1445:usb/../cmsis/core_cm3.h **** 
1446:usb/../cmsis/core_cm3.h **** 
1447:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
1448:usb/../cmsis/core_cm3.h ****   Core  Function Interface containing:
1449:usb/../cmsis/core_cm3.h ****   - Core NVIC Functions
1450:usb/../cmsis/core_cm3.h ****   - Core SysTick Functions
1451:usb/../cmsis/core_cm3.h ****   - Core Reset Functions
1452:usb/../cmsis/core_cm3.h **** */
1453:usb/../cmsis/core_cm3.h **** /*@{*/
1454:usb/../cmsis/core_cm3.h **** 
1455:usb/../cmsis/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1456:usb/../cmsis/core_cm3.h **** 
1457:usb/../cmsis/core_cm3.h **** /**
1458:usb/../cmsis/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1459:usb/../cmsis/core_cm3.h ****  *
1460:usb/../cmsis/core_cm3.h ****  * @param  PriorityGroup is priority grouping field
1461:usb/../cmsis/core_cm3.h ****  *
1462:usb/../cmsis/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1463:usb/../cmsis/core_cm3.h ****  * The parameter priority_grouping is assigned to the field 
1464:usb/../cmsis/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1465:usb/../cmsis/core_cm3.h ****  * In case of a conflict between priority grouping and available
1466:usb/../cmsis/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1467:usb/../cmsis/core_cm3.h ****  */
1468:usb/../cmsis/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1469:usb/../cmsis/core_cm3.h **** {
1470:usb/../cmsis/core_cm3.h ****   uint32_t reg_value;
1471:usb/../cmsis/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1472:usb/../cmsis/core_cm3.h ****   
1473:usb/../cmsis/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1474:usb/../cmsis/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1475:usb/../cmsis/core_cm3.h ****   reg_value  =  (reg_value                       |
ARM GAS  /tmp/ccfFRkoC.s 			page 31


1476:usb/../cmsis/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) | 
1477:usb/../cmsis/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1478:usb/../cmsis/core_cm3.h ****   SCB->AIRCR =  reg_value;
1479:usb/../cmsis/core_cm3.h **** }
1480:usb/../cmsis/core_cm3.h **** 
1481:usb/../cmsis/core_cm3.h **** /**
1482:usb/../cmsis/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1483:usb/../cmsis/core_cm3.h ****  *
1484:usb/../cmsis/core_cm3.h ****  * @return priority grouping field 
1485:usb/../cmsis/core_cm3.h ****  *
1486:usb/../cmsis/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1487:usb/../cmsis/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1488:usb/../cmsis/core_cm3.h ****  */
1489:usb/../cmsis/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1490:usb/../cmsis/core_cm3.h **** {
1491:usb/../cmsis/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1492:usb/../cmsis/core_cm3.h **** }
1493:usb/../cmsis/core_cm3.h **** 
1494:usb/../cmsis/core_cm3.h **** /**
1495:usb/../cmsis/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1496:usb/../cmsis/core_cm3.h ****  *
1497:usb/../cmsis/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to enable
1498:usb/../cmsis/core_cm3.h ****  *
1499:usb/../cmsis/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1500:usb/../cmsis/core_cm3.h ****  * The interrupt number cannot be a negative value.
1501:usb/../cmsis/core_cm3.h ****  */
1502:usb/../cmsis/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1503:usb/../cmsis/core_cm3.h **** {
1504:usb/../cmsis/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
1505:usb/../cmsis/core_cm3.h **** }
1506:usb/../cmsis/core_cm3.h **** 
1507:usb/../cmsis/core_cm3.h **** /**
1508:usb/../cmsis/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1509:usb/../cmsis/core_cm3.h ****  * 
1510:usb/../cmsis/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to disable
1511:usb/../cmsis/core_cm3.h ****  * 
1512:usb/../cmsis/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1513:usb/../cmsis/core_cm3.h ****  * The interrupt number cannot be a negative value.
1514:usb/../cmsis/core_cm3.h ****  */
1515:usb/../cmsis/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1516:usb/../cmsis/core_cm3.h **** {
1517:usb/../cmsis/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  41              		.loc 2 1517 0
  42 0008 0C49     		ldr	r1, .L2+4
  43 000a 4FF48010 		mov	r0, #1048576
  44 000e C1F88000 		str	r0, [r1, #128]
  45              	.LVL1:
  46              	.LBE7:
  47              	.LBE6:
 197:usb/usb.c     **** 	
 198:usb/usb.c     **** 	NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 199:usb/usb.c     ****     RCC->APB1ENR |= RCC_APB1ENR_USBEN;
  48              		.loc 1 199 0
  49 0012 0B4A     		ldr	r2, .L2+8
  50 0014 D369     		ldr	r3, [r2, #28]
  51 0016 43F40003 		orr	r3, r3, #8388608
  52 001a D361     		str	r3, [r2, #28]
ARM GAS  /tmp/ccfFRkoC.s 			page 32


 200:usb/usb.c     **** 
 201:usb/usb.c     ****     USB->CNTR   = USB_CNTR_FRES; /* Force USB Reset */
  53              		.loc 1 201 0
  54 001c 094B     		ldr	r3, .L2+12
  55 001e 1B68     		ldr	r3, [r3]
  56 0020 0122     		movs	r2, #1
  57 0022 1A64     		str	r2, [r3, #64]
 202:usb/usb.c     ****     USB->BTABLE = 0;
  58              		.loc 1 202 0
  59 0024 0022     		movs	r2, #0
  60 0026 1A65     		str	r2, [r3, #80]
 203:usb/usb.c     ****     USB->DADDR  = 0;
  61              		.loc 1 203 0
  62 0028 DA64     		str	r2, [r3, #76]
 204:usb/usb.c     ****     USB->ISTR   = 0;
  63              		.loc 1 204 0
  64 002a 5A64     		str	r2, [r3, #68]
 205:usb/usb.c     ****     USB->CNTR   = USB_CNTR_RESETM; 
  65              		.loc 1 205 0
  66 002c 4FF48062 		mov	r2, #1024
  67 0030 1A64     		str	r2, [r3, #64]
  68              	.LVL2:
  69              	.LBB8:
  70              	.LBB9:
1504:usb/../cmsis/core_cm3.h **** }
  71              		.loc 2 1504 0
  72 0032 0860     		str	r0, [r1]
  73              	.LVL3:
  74 0034 7047     		bx	lr
  75              	.L3:
  76 0036 00BF     		.align	2
  77              	.L2:
  78 0038 00000000 		.word	heap
  79 003c 00E100E0 		.word	-536813312
  80 0040 00100240 		.word	1073876992
  81 0044 00000000 		.word	.LANCHOR0
  82              	.LBE9:
  83              	.LBE8:
  84              		.cfi_endproc
  85              	.LFE29:
  87              		.section	.text.USBWriteEP,"ax",%progbits
  88              		.align	2
  89              		.global	USBWriteEP
  90              		.thumb
  91              		.thumb_func
  93              	USBWriteEP:
  94              	.LFB30:
 206:usb/usb.c     ****     NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 207:usb/usb.c     **** }
 208:usb/usb.c     **** 
 209:usb/usb.c     **** /* Private */
 210:usb/usb.c     **** void USBWriteEP(uint8_t number){
  95              		.loc 1 210 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		@ link register save eliminated.
ARM GAS  /tmp/ccfFRkoC.s 			page 33


 100              	.LVL4:
 101 0000 30B4     		push	{r4, r5}
 102              	.LCFI0:
 103              		.cfi_def_cfa_offset 8
 104              		.cfi_offset 4, -8
 105              		.cfi_offset 5, -4
 211:usb/usb.c     **** 	uint16_t len = heap.cntTx >= heap.cntMaxEp0 ? heap.cntMaxEp0 : heap.cntTx;
 106              		.loc 1 211 0
 107 0002 164B     		ldr	r3, .L8
 108 0004 B3F84050 		ldrh	r5, [r3, #64]
 109 0008 9A88     		ldrh	r2, [r3, #4]
 110 000a 9542     		cmp	r5, r2
 111 000c 28BF     		it	cs
 112 000e 1546     		movcs	r5, r2
 113              	.LVL5:
 212:usb/usb.c     **** 	uint16_t nBytes = (len + 1) >> 1;
 114              		.loc 1 212 0
 115 0010 691C     		adds	r1, r5, #1
 116 0012 C1F34F01 		ubfx	r1, r1, #1, #16
 117              	.LVL6:
 213:usb/usb.c     ****     uint32_t *addrTx = (uint32_t *)((uint16_t)EPBuffTable[number]->ADDR_TX * 2 + USB_PMA_ADDR);
 118              		.loc 1 213 0
 119 0016 124A     		ldr	r2, .L8+4
 120 0018 52F82020 		ldr	r2, [r2, r0, lsl #2]
 121 001c 1268     		ldr	r2, [r2]
 122 001e 92B2     		uxth	r2, r2
 123 0020 02F10052 		add	r2, r2, #536870912
 124 0024 02F54052 		add	r2, r2, #12288
 125 0028 5200     		lsls	r2, r2, #1
 126              	.LVL7:
 214:usb/usb.c     ****     uint16_t *temp = (uint16_t *)heap.buffTx;
 127              		.loc 1 214 0
 128 002a 1C68     		ldr	r4, [r3]
 129              	.LVL8:
 215:usb/usb.c     ****     while(nBytes--)
 130              		.loc 1 215 0
 131 002c 04E0     		b	.L5
 132              	.LVL9:
 133              	.L6:
 216:usb/usb.c     ****         *addrTx++ = *temp++;
 134              		.loc 1 216 0
 135 002e 2188     		ldrh	r1, [r4]
 136 0030 1160     		str	r1, [r2]
 215:usb/usb.c     ****     while(nBytes--)
 137              		.loc 1 215 0
 138 0032 1946     		mov	r1, r3
 139              		.loc 1 216 0
 140 0034 0234     		adds	r4, r4, #2
 141              	.LVL10:
 142 0036 0432     		adds	r2, r2, #4
 143              	.LVL11:
 144              	.L5:
 215:usb/usb.c     ****     while(nBytes--)
 145              		.loc 1 215 0
 146 0038 4B1E     		subs	r3, r1, #1
 147 003a 9BB2     		uxth	r3, r3
 148              	.LVL12:
ARM GAS  /tmp/ccfFRkoC.s 			page 34


 149 003c 0029     		cmp	r1, #0
 150 003e F6D1     		bne	.L6
 217:usb/usb.c     ****     EPBuffTable[number]->COUNT_TX = len;
 151              		.loc 1 217 0
 152 0040 074B     		ldr	r3, .L8+4
 153              	.LVL13:
 154 0042 53F82030 		ldr	r3, [r3, r0, lsl #2]
 155 0046 5D60     		str	r5, [r3, #4]
 218:usb/usb.c     ****     heap.cntTx -= len;
 156              		.loc 1 218 0
 157 0048 044B     		ldr	r3, .L8
 158 004a 9A88     		ldrh	r2, [r3, #4]
 159              	.LVL14:
 160 004c 521B     		subs	r2, r2, r5
 161 004e 9A80     		strh	r2, [r3, #4]	@ movhi
 219:usb/usb.c     ****     heap.buffTx += len;
 162              		.loc 1 219 0
 163 0050 1A68     		ldr	r2, [r3]
 164 0052 1544     		add	r5, r5, r2
 165              	.LVL15:
 166 0054 1D60     		str	r5, [r3]
 220:usb/usb.c     **** }
 167              		.loc 1 220 0
 168 0056 30BC     		pop	{r4, r5}
 169              	.LCFI1:
 170              		.cfi_restore 5
 171              		.cfi_restore 4
 172              		.cfi_def_cfa_offset 0
 173              	.LVL16:
 174 0058 7047     		bx	lr
 175              	.L9:
 176 005a 00BF     		.align	2
 177              	.L8:
 178 005c 00000000 		.word	heap
 179 0060 00000000 		.word	.LANCHOR1
 180              		.cfi_endproc
 181              	.LFE30:
 183              		.section	.text.USBReadEP,"ax",%progbits
 184              		.align	2
 185              		.global	USBReadEP
 186              		.thumb
 187              		.thumb_func
 189              	USBReadEP:
 190              	.LFB31:
 221:usb/usb.c     **** void USBReadEP(uint8_t *buffer, uint16_t len, uint8_t number){
 191              		.loc 1 221 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 196              	.LVL17:
 222:usb/usb.c     ****     uint16_t nBytes = (len + 1) >> 1;
 197              		.loc 1 222 0
 198 0000 0131     		adds	r1, r1, #1
 199              	.LVL18:
 200 0002 C1F34F01 		ubfx	r1, r1, #1, #16
 201              	.LVL19:
ARM GAS  /tmp/ccfFRkoC.s 			page 35


 223:usb/usb.c     ****     uint32_t *addrRx = (uint32_t *)((uint16_t)EPBuffTable[number]->ADDR_RX * 2 + USB_PMA_ADDR);
 202              		.loc 1 223 0
 203 0006 0A4B     		ldr	r3, .L13
 204 0008 53F82230 		ldr	r3, [r3, r2, lsl #2]
 205 000c 9A68     		ldr	r2, [r3, #8]
 206              	.LVL20:
 207 000e 92B2     		uxth	r2, r2
 208 0010 02F10052 		add	r2, r2, #536870912
 209 0014 02F54052 		add	r2, r2, #12288
 210 0018 5200     		lsls	r2, r2, #1
 211              	.LVL21:
 224:usb/usb.c     ****     uint16_t *temp = (uint16_t *)buffer;
 225:usb/usb.c     ****     while(nBytes--)
 212              		.loc 1 225 0
 213 001a 04E0     		b	.L11
 214              	.LVL22:
 215              	.L12:
 226:usb/usb.c     ****         *temp++ = *addrRx++;
 216              		.loc 1 226 0
 217 001c 1168     		ldr	r1, [r2]
 218 001e 0180     		strh	r1, [r0]	@ movhi
 225:usb/usb.c     ****         *temp++ = *addrRx++;
 219              		.loc 1 225 0
 220 0020 1946     		mov	r1, r3
 221              		.loc 1 226 0
 222 0022 0230     		adds	r0, r0, #2
 223              	.LVL23:
 224 0024 0432     		adds	r2, r2, #4
 225              	.LVL24:
 226              	.L11:
 225:usb/usb.c     ****         *temp++ = *addrRx++;
 227              		.loc 1 225 0
 228 0026 4B1E     		subs	r3, r1, #1
 229 0028 9BB2     		uxth	r3, r3
 230              	.LVL25:
 231 002a 0029     		cmp	r1, #0
 232 002c F6D1     		bne	.L12
 227:usb/usb.c     **** }
 233              		.loc 1 227 0
 234 002e 7047     		bx	lr
 235              	.L14:
 236              		.align	2
 237              	.L13:
 238 0030 00000000 		.word	.LANCHOR1
 239              		.cfi_endproc
 240              	.LFE31:
 242              		.section	.text.USBStatusTx,"ax",%progbits
 243              		.align	2
 244              		.global	USBStatusTx
 245              		.thumb
 246              		.thumb_func
 248              	USBStatusTx:
 249              	.LFB32:
 228:usb/usb.c     **** void USBStatusTx(uint8_t numEp, uint16_t status)
 229:usb/usb.c     **** {
 250              		.loc 1 229 0
 251              		.cfi_startproc
ARM GAS  /tmp/ccfFRkoC.s 			page 36


 252              		@ args = 0, pretend = 0, frame = 0
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254              		@ link register save eliminated.
 255              	.LVL26:
 230:usb/usb.c     ****     register uint16_t val = USB->EPR[numEp];
 256              		.loc 1 230 0
 257 0000 084B     		ldr	r3, .L16
 258 0002 1A68     		ldr	r2, [r3]
 259 0004 52F82030 		ldr	r3, [r2, r0, lsl #2]
 260              	.LVL27:
 231:usb/usb.c     ****     USB->EPR[numEp] = (val ^ (status & USB_EP_STAT_TX)) & (USB_EP_MASK | USB_EP_STAT_TX);
 261              		.loc 1 231 0
 262 0008 01F03001 		and	r1, r1, #48
 263              	.LVL28:
 264 000c 9BB2     		uxth	r3, r3
 265 000e 5940     		eors	r1, r1, r3
 266 0010 21F4E041 		bic	r1, r1, #28672
 267 0014 21F04001 		bic	r1, r1, #64
 268 0018 0904     		lsls	r1, r1, #16
 269 001a 090C     		lsrs	r1, r1, #16
 270 001c 42F82010 		str	r1, [r2, r0, lsl #2]
 271 0020 7047     		bx	lr
 272              	.L17:
 273 0022 00BF     		.align	2
 274              	.L16:
 275 0024 00000000 		.word	.LANCHOR0
 276              		.cfi_endproc
 277              	.LFE32:
 279              		.section	.text.USBStatusRx,"ax",%progbits
 280              		.align	2
 281              		.global	USBStatusRx
 282              		.thumb
 283              		.thumb_func
 285              	USBStatusRx:
 286              	.LFB33:
 232:usb/usb.c     **** }
 233:usb/usb.c     **** 
 234:usb/usb.c     **** void USBStatusRx(uint8_t numEp, uint16_t status)
 235:usb/usb.c     **** {
 287              		.loc 1 235 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              		@ link register save eliminated.
 292              	.LVL29:
 236:usb/usb.c     ****     register uint16_t val = USB->EPR[numEp];
 293              		.loc 1 236 0
 294 0000 084B     		ldr	r3, .L19
 295 0002 1A68     		ldr	r2, [r3]
 296 0004 52F82030 		ldr	r3, [r2, r0, lsl #2]
 297              	.LVL30:
 237:usb/usb.c     ****     USB->EPR[numEp] = (val ^ (status & USB_EP_STAT_RX)) & (USB_EP_MASK | USB_EP_STAT_RX);
 298              		.loc 1 237 0
 299 0008 01F44051 		and	r1, r1, #12288
 300              	.LVL31:
 301 000c 9BB2     		uxth	r3, r3
 302 000e 5940     		eors	r1, r1, r3
ARM GAS  /tmp/ccfFRkoC.s 			page 37


 303 0010 21F48041 		bic	r1, r1, #16384
 304 0014 21F07001 		bic	r1, r1, #112
 305 0018 0904     		lsls	r1, r1, #16
 306 001a 090C     		lsrs	r1, r1, #16
 307 001c 42F82010 		str	r1, [r2, r0, lsl #2]
 308 0020 7047     		bx	lr
 309              	.L20:
 310 0022 00BF     		.align	2
 311              	.L19:
 312 0024 00000000 		.word	.LANCHOR0
 313              		.cfi_endproc
 314              	.LFE33:
 316              		.section	.text.USBSendData,"ax",%progbits
 317              		.align	2
 318              		.global	USBSendData
 319              		.thumb
 320              		.thumb_func
 322              	USBSendData:
 323              	.LFB34:
 238:usb/usb.c     **** }
 239:usb/usb.c     **** void USBSendData(uint8_t *buffer, uint8_t len, uint8_t number){
 324              		.loc 1 239 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328              	.LVL32:
 329 0000 10B5     		push	{r4, lr}
 330              	.LCFI2:
 331              		.cfi_def_cfa_offset 8
 332              		.cfi_offset 4, -8
 333              		.cfi_offset 14, -4
 334 0002 1446     		mov	r4, r2
 240:usb/usb.c     **** 	heap.buffTx = buffer;
 335              		.loc 1 240 0
 336 0004 0C4B     		ldr	r3, .L26
 337 0006 1860     		str	r0, [r3]
 241:usb/usb.c     **** 	heap.cntTx = len;
 338              		.loc 1 241 0
 339 0008 9980     		strh	r1, [r3, #4]	@ movhi
 242:usb/usb.c     **** 
 243:usb/usb.c     **** 	if(len > 0){
 340              		.loc 1 243 0
 341 000a 19B1     		cbz	r1, .L22
 244:usb/usb.c     ****         USBWriteEP(number);
 342              		.loc 1 244 0
 343 000c 1046     		mov	r0, r2
 344              	.LVL33:
 345 000e FFF7FEFF 		bl	USBWriteEP
 346              	.LVL34:
 347 0012 04E0     		b	.L23
 348              	.LVL35:
 349              	.L22:
 245:usb/usb.c     ****     }else{
 246:usb/usb.c     ****         EPBuffTable[number]->COUNT_TX = 0;
 350              		.loc 1 246 0
 351 0014 094B     		ldr	r3, .L26+4
 352 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
ARM GAS  /tmp/ccfFRkoC.s 			page 38


 353 001a 0022     		movs	r2, #0
 354              	.LVL36:
 355 001c 5A60     		str	r2, [r3, #4]
 356              	.LVL37:
 357              	.L23:
 247:usb/usb.c     ****     }
 248:usb/usb.c     **** 	USBStatusTx(number, USB_EP_TX_VALID);
 358              		.loc 1 248 0
 359 001e 3021     		movs	r1, #48
 360 0020 2046     		mov	r0, r4
 361 0022 FFF7FEFF 		bl	USBStatusTx
 362              	.LVL38:
 363              	.L24:
 249:usb/usb.c     **** 	while(!(USB->EPR[number] & USB_EP_CTR_TX)){}
 364              		.loc 1 249 0 discriminator 1
 365 0026 064B     		ldr	r3, .L26+8
 366 0028 1B68     		ldr	r3, [r3]
 367 002a 53F82430 		ldr	r3, [r3, r4, lsl #2]
 368 002e 13F0800F 		tst	r3, #128
 369 0032 F8D0     		beq	.L24
 250:usb/usb.c     **** }
 370              		.loc 1 250 0
 371 0034 10BD     		pop	{r4, pc}
 372              	.L27:
 373 0036 00BF     		.align	2
 374              	.L26:
 375 0038 00000000 		.word	heap
 376 003c 00000000 		.word	.LANCHOR1
 377 0040 00000000 		.word	.LANCHOR0
 378              		.cfi_endproc
 379              	.LFE34:
 381              		.section	.text.USBRequest,"ax",%progbits
 382              		.align	2
 383              		.global	USBRequest
 384              		.thumb
 385              		.thumb_func
 387              	USBRequest:
 388              	.LFB35:
 251:usb/usb.c     **** void USBRequest(USBSetupPacket *req, uint8_t *pdata){
 389              		.loc 1 251 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 0
 392              		@ frame_needed = 0, uses_anonymous_args = 0
 393              		@ link register save eliminated.
 394              	.LVL39:
 252:usb/usb.c     ****     req->bmRequestType     = *pdata;
 395              		.loc 1 252 0
 396 0000 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 397 0002 0370     		strb	r3, [r0]
 253:usb/usb.c     ****     req->bRequest          = *(pdata + 1);
 398              		.loc 1 253 0
 399 0004 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 400 0006 4370     		strb	r3, [r0, #1]
 254:usb/usb.c     ****     req->wValue.low        = *(pdata + 2);
 401              		.loc 1 254 0
 402 0008 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
 403 000a C370     		strb	r3, [r0, #3]
ARM GAS  /tmp/ccfFRkoC.s 			page 39


 255:usb/usb.c     ****     req->wValue.high       = *(pdata + 3);
 404              		.loc 1 255 0
 405 000c CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 406 000e 8370     		strb	r3, [r0, #2]
 256:usb/usb.c     ****     req->wIndex.low        = *(pdata + 4);
 407              		.loc 1 256 0
 408 0010 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 409 0012 4371     		strb	r3, [r0, #5]
 257:usb/usb.c     ****     req->wIndex.high       = *(pdata + 5);
 410              		.loc 1 257 0
 411 0014 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 412 0016 0371     		strb	r3, [r0, #4]
 258:usb/usb.c     ****     req->wLength.low       = *(pdata + 6);
 413              		.loc 1 258 0
 414 0018 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 415 001a C371     		strb	r3, [r0, #7]
 259:usb/usb.c     ****     req->wLength.high      = *(pdata + 7);
 416              		.loc 1 259 0
 417 001c CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 418 001e 8371     		strb	r3, [r0, #6]
 419 0020 7047     		bx	lr
 420              		.cfi_endproc
 421              	.LFE35:
 423 0022 00BF     		.section	.text.USBReset,"ax",%progbits
 424              		.align	2
 425              		.global	USBReset
 426              		.thumb
 427              		.thumb_func
 429              	USBReset:
 430              	.LFB36:
 260:usb/usb.c     **** }
 261:usb/usb.c     **** void USBReset(void){
 431              		.loc 1 261 0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 0
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435              		@ link register save eliminated.
 262:usb/usb.c     **** 
 263:usb/usb.c     **** 	EPBuffTable[USB_EP0]->ADDR_TX = 0x80;
 436              		.loc 1 263 0
 437 0000 0C4B     		ldr	r3, .L30
 438 0002 1968     		ldr	r1, [r3]
 439 0004 8022     		movs	r2, #128
 440 0006 0A60     		str	r2, [r1]
 264:usb/usb.c     **** 	EPBuffTable[USB_EP0]->ADDR_RX = 0x100;
 441              		.loc 1 264 0
 442 0008 1B68     		ldr	r3, [r3]
 443 000a 4FF48071 		mov	r1, #256
 444 000e 9960     		str	r1, [r3, #8]
 265:usb/usb.c     **** 	EPBuffTable[USB_EP0]->COUNT_RX = 0xbc00;
 445              		.loc 1 265 0
 446 0010 4FF43C41 		mov	r1, #48128
 447 0014 D960     		str	r1, [r3, #12]
 266:usb/usb.c     **** 
 267:usb/usb.c     **** 	USB->EPR[USB_EP0] = USB_EP_CONTROL | USB_EP_RX_VALID;
 448              		.loc 1 267 0
 449 0016 084B     		ldr	r3, .L30+4
ARM GAS  /tmp/ccfFRkoC.s 			page 40


 450 0018 1968     		ldr	r1, [r3]
 451 001a 4FF44850 		mov	r0, #12800
 452 001e 0860     		str	r0, [r1]
 268:usb/usb.c     **** 
 269:usb/usb.c     **** 	USB->CNTR   = USB_CNTR_CTRM | USB_CNTR_RESETM | USB_CNTR_SUSPM;
 453              		.loc 1 269 0
 454 0020 1B68     		ldr	r3, [r3]
 455 0022 4FF40C41 		mov	r1, #35840
 456 0026 1964     		str	r1, [r3, #64]
 270:usb/usb.c     ****     USB->ISTR   = 0x00;
 457              		.loc 1 270 0
 458 0028 0021     		movs	r1, #0
 459 002a 5964     		str	r1, [r3, #68]
 271:usb/usb.c     ****     USB->BTABLE = 0x00;
 460              		.loc 1 271 0
 461 002c 1965     		str	r1, [r3, #80]
 272:usb/usb.c     ****     USB->DADDR  = USB_DADDR_EF;
 462              		.loc 1 272 0
 463 002e DA64     		str	r2, [r3, #76]
 464 0030 7047     		bx	lr
 465              	.L31:
 466 0032 00BF     		.align	2
 467              	.L30:
 468 0034 00000000 		.word	.LANCHOR1
 469 0038 00000000 		.word	.LANCHOR0
 470              		.cfi_endproc
 471              	.LFE36:
 473              		.section	.text.USBGetDescriptor,"ax",%progbits
 474              		.align	2
 475              		.global	USBGetDescriptor
 476              		.thumb
 477              		.thumb_func
 479              	USBGetDescriptor:
 480              	.LFB37:
 273:usb/usb.c     **** }
 274:usb/usb.c     **** void USBGetDescriptor(void){
 481              		.loc 1 274 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 0
 484              		@ frame_needed = 0, uses_anonymous_args = 0
 485 0000 08B5     		push	{r3, lr}
 486              	.LCFI3:
 487              		.cfi_def_cfa_offset 8
 488              		.cfi_offset 3, -8
 489              		.cfi_offset 14, -4
 275:usb/usb.c     **** 	switch(SetupPacket.wValue.high){
 490              		.loc 1 275 0
 491 0002 254B     		ldr	r3, .L47
 492 0004 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 493 0006 013B     		subs	r3, r3, #1
 494 0008 052B     		cmp	r3, #5
 495 000a 43D8     		bhi	.L32
 496 000c DFE803F0 		tbb	[pc, r3]
 497              	.L35:
 498 0010 03       		.byte	(.L34-.L35)/2
 499 0011 0F       		.byte	(.L36-.L35)/2
 500 0012 16       		.byte	(.L37-.L35)/2
ARM GAS  /tmp/ccfFRkoC.s 			page 41


 501 0013 42       		.byte	(.L32-.L35)/2
 502 0014 42       		.byte	(.L32-.L35)/2
 503 0015 09       		.byte	(.L38-.L35)/2
 504              		.p2align 1
 505              	.L34:
 276:usb/usb.c     **** 		case USB_DEVICE_DESC_TYPE:
 277:usb/usb.c     **** 			USBSendData(descDevice, sizeof(descDevice), 0);
 506              		.loc 1 277 0
 507 0016 0022     		movs	r2, #0
 508 0018 1221     		movs	r1, #18
 509 001a 2048     		ldr	r0, .L47+4
 510 001c FFF7FEFF 		bl	USBSendData
 511              	.LVL40:
 278:usb/usb.c     **** 			break;
 512              		.loc 1 278 0
 513 0020 08BD     		pop	{r3, pc}
 514              	.L38:
 279:usb/usb.c     **** 		case USB_DEVICE_QR_DESC_TYPE:
 280:usb/usb.c     **** 			USBSendData(descDeviceQualifier, sizeof(descDeviceQualifier), 0);
 515              		.loc 1 280 0
 516 0022 0022     		movs	r2, #0
 517 0024 0A21     		movs	r1, #10
 518 0026 1E48     		ldr	r0, .L47+8
 519 0028 FFF7FEFF 		bl	USBSendData
 520              	.LVL41:
 281:usb/usb.c     **** 			break;
 521              		.loc 1 281 0
 522 002c 08BD     		pop	{r3, pc}
 523              	.L36:
 282:usb/usb.c     **** 		case USB_CFG_DESC_TYPE:
 283:usb/usb.c     **** 			USBSendData(descConfiguration, SetupPacket.wLength.low, 0);
 524              		.loc 1 283 0
 525 002e 0022     		movs	r2, #0
 526 0030 194B     		ldr	r3, .L47
 527 0032 D979     		ldrb	r1, [r3, #7]	@ zero_extendqisi2
 528 0034 1B48     		ldr	r0, .L47+12
 529 0036 FFF7FEFF 		bl	USBSendData
 530              	.LVL42:
 284:usb/usb.c     **** 			break;
 531              		.loc 1 284 0
 532 003a 08BD     		pop	{r3, pc}
 533              	.L37:
 285:usb/usb.c     **** 		case USB_STR_DESC_TYPE:
 286:usb/usb.c     **** 			switch(SetupPacket.wValue.low){
 534              		.loc 1 286 0
 535 003c 164B     		ldr	r3, .L47
 536 003e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 537 0040 052B     		cmp	r3, #5
 538 0042 27D8     		bhi	.L32
 539 0044 DFE803F0 		tbb	[pc, r3]
 540              	.L40:
 541 0048 03       		.byte	(.L39-.L40)/2
 542 0049 09       		.byte	(.L41-.L40)/2
 543 004a 0F       		.byte	(.L42-.L40)/2
 544 004b 15       		.byte	(.L43-.L40)/2
 545 004c 1B       		.byte	(.L44-.L40)/2
 546 004d 21       		.byte	(.L45-.L40)/2
ARM GAS  /tmp/ccfFRkoC.s 			page 42


 547              		.p2align 1
 548              	.L39:
 287:usb/usb.c     **** 				case USB_IDX_LANGID_STR:
 288:usb/usb.c     **** 					USBSendData(descStringLangID, sizeof(descStringLangID), 0);
 549              		.loc 1 288 0
 550 004e 0022     		movs	r2, #0
 551 0050 0421     		movs	r1, #4
 552 0052 1548     		ldr	r0, .L47+16
 553 0054 FFF7FEFF 		bl	USBSendData
 554              	.LVL43:
 289:usb/usb.c     **** 					break;
 555              		.loc 1 289 0
 556 0058 08BD     		pop	{r3, pc}
 557              	.L41:
 290:usb/usb.c     **** 				case USB_IDX_MFC_STR:
 291:usb/usb.c     **** 					USBSendData(descStringMFC, sizeof(descStringMFC), 0);
 558              		.loc 1 291 0
 559 005a 0022     		movs	r2, #0
 560 005c 0E21     		movs	r1, #14
 561 005e 1348     		ldr	r0, .L47+20
 562 0060 FFF7FEFF 		bl	USBSendData
 563              	.LVL44:
 292:usb/usb.c     **** 					break;
 564              		.loc 1 292 0
 565 0064 08BD     		pop	{r3, pc}
 566              	.L42:
 293:usb/usb.c     **** 				case USB_IDX_PRODUCT_STR:
 294:usb/usb.c     **** 					USBSendData(descStringProduct, sizeof(descStringProduct), 0);
 567              		.loc 1 294 0
 568 0066 0022     		movs	r2, #0
 569 0068 1221     		movs	r1, #18
 570 006a 1148     		ldr	r0, .L47+24
 571 006c FFF7FEFF 		bl	USBSendData
 572              	.LVL45:
 295:usb/usb.c     **** 					break;
 573              		.loc 1 295 0
 574 0070 08BD     		pop	{r3, pc}
 575              	.L43:
 296:usb/usb.c     **** 				case USB_IDX_SERIAL_STR:
 297:usb/usb.c     **** 					USBSendData(descStringSerialNumber, sizeof(descStringSerialNumber), 0);
 576              		.loc 1 297 0
 577 0072 0022     		movs	r2, #0
 578 0074 0E21     		movs	r1, #14
 579 0076 0F48     		ldr	r0, .L47+28
 580 0078 FFF7FEFF 		bl	USBSendData
 581              	.LVL46:
 298:usb/usb.c     **** 					break;
 582              		.loc 1 298 0
 583 007c 08BD     		pop	{r3, pc}
 584              	.L44:
 299:usb/usb.c     **** 				case USB_IDX_CONFIG_STR:
 300:usb/usb.c     **** 					USBSendData(descStringConfig, sizeof(descStringConfig), 0);
 585              		.loc 1 300 0
 586 007e 0022     		movs	r2, #0
 587 0080 1321     		movs	r1, #19
 588 0082 0D48     		ldr	r0, .L47+32
 589 0084 FFF7FEFF 		bl	USBSendData
ARM GAS  /tmp/ccfFRkoC.s 			page 43


 590              	.LVL47:
 301:usb/usb.c     **** 					break;
 591              		.loc 1 301 0
 592 0088 08BD     		pop	{r3, pc}
 593              	.L45:
 302:usb/usb.c     **** 				case USB_IDX_INTERFACE_STR:
 303:usb/usb.c     **** 					USBSendData(descStringInterface, sizeof(descStringInterface), 0);
 594              		.loc 1 303 0
 595 008a 0022     		movs	r2, #0
 596 008c 1621     		movs	r1, #22
 597 008e 0B48     		ldr	r0, .L47+36
 598 0090 FFF7FEFF 		bl	USBSendData
 599              	.LVL48:
 600              	.L32:
 601 0094 08BD     		pop	{r3, pc}
 602              	.L48:
 603 0096 00BF     		.align	2
 604              	.L47:
 605 0098 00000000 		.word	SetupPacket
 606 009c 00000000 		.word	.LANCHOR2
 607 00a0 00000000 		.word	.LANCHOR3
 608 00a4 00000000 		.word	.LANCHOR4
 609 00a8 00000000 		.word	.LANCHOR5
 610 00ac 00000000 		.word	.LANCHOR6
 611 00b0 00000000 		.word	.LANCHOR7
 612 00b4 00000000 		.word	.LANCHOR8
 613 00b8 00000000 		.word	.LANCHOR9
 614 00bc 00000000 		.word	.LANCHOR10
 615              		.cfi_endproc
 616              	.LFE37:
 618              		.section	.text.USBSetup,"ax",%progbits
 619              		.align	2
 620              		.global	USBSetup
 621              		.thumb
 622              		.thumb_func
 624              	USBSetup:
 625              	.LFB38:
 304:usb/usb.c     **** 					break;
 305:usb/usb.c     **** 			}
 306:usb/usb.c     **** 			break;
 307:usb/usb.c     **** 	}
 308:usb/usb.c     **** }
 309:usb/usb.c     **** void USBSetup(void){
 626              		.loc 1 309 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 0
 629              		@ frame_needed = 0, uses_anonymous_args = 0
 630 0000 08B5     		push	{r3, lr}
 631              	.LCFI4:
 632              		.cfi_def_cfa_offset 8
 633              		.cfi_offset 3, -8
 634              		.cfi_offset 14, -4
 310:usb/usb.c     **** 	debug1++;
 635              		.loc 1 310 0
 636 0002 1B4A     		ldr	r2, .L57
 637 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 638 0006 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccfFRkoC.s 			page 44


 639 0008 1370     		strb	r3, [r2]
 311:usb/usb.c     **** 	switch(SetupPacket.bmRequestType){
 640              		.loc 1 311 0
 641 000a 1A4B     		ldr	r3, .L57+4
 642 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 643 000e 13B1     		cbz	r3, .L51
 644 0010 802B     		cmp	r3, #128
 645 0012 18D0     		beq	.L52
 646 0014 1DE0     		b	.L50
 647              	.L51:
 312:usb/usb.c     **** 		case 0x00:
 313:usb/usb.c     **** 			switch(SetupPacket.bRequest){
 648              		.loc 1 313 0
 649 0016 174B     		ldr	r3, .L57+4
 650 0018 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 651 001a 052B     		cmp	r3, #5
 652 001c 02D0     		beq	.L53
 653 001e 092B     		cmp	r3, #9
 654 0020 0BD0     		beq	.L54
 655 0022 16E0     		b	.L50
 656              	.L53:
 314:usb/usb.c     **** 				case USB_REQUEST_SET_ADDRESS:
 315:usb/usb.c     **** 					heap.devAddress = SetupPacket.wValue.low;
 657              		.loc 1 315 0
 658 0024 134B     		ldr	r3, .L57+4
 659 0026 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 660 0028 134B     		ldr	r3, .L57+8
 661 002a 83F84220 		strb	r2, [r3, #66]
 316:usb/usb.c     **** 					USBSendData(0, 0, 0);
 662              		.loc 1 316 0
 663 002e 0022     		movs	r2, #0
 664 0030 1146     		mov	r1, r2
 665 0032 1046     		mov	r0, r2
 666 0034 FFF7FEFF 		bl	USBSendData
 667              	.LVL49:
 317:usb/usb.c     **** 					break;
 668              		.loc 1 317 0
 669 0038 0BE0     		b	.L50
 670              	.L54:
 318:usb/usb.c     **** 				case USB_REQUEST_SET_CONFIGURATION:
 319:usb/usb.c     **** 					USBSendData(0, 0, 0);
 671              		.loc 1 319 0
 672 003a 0022     		movs	r2, #0
 673 003c 1146     		mov	r1, r2
 674 003e 1046     		mov	r0, r2
 675 0040 FFF7FEFF 		bl	USBSendData
 676              	.LVL50:
 320:usb/usb.c     **** 					break;
 677              		.loc 1 320 0
 678 0044 05E0     		b	.L50
 679              	.L52:
 321:usb/usb.c     **** 			}
 322:usb/usb.c     **** 			break;
 323:usb/usb.c     **** 		case 0x21:
 324:usb/usb.c     **** 	
 325:usb/usb.c     **** 			break;
 326:usb/usb.c     **** 		case 0x80:
ARM GAS  /tmp/ccfFRkoC.s 			page 45


 327:usb/usb.c     **** 			if(SetupPacket.bRequest == USB_REQUEST_GET_DESCRIPTOR){
 680              		.loc 1 327 0
 681 0046 0B4B     		ldr	r3, .L57+4
 682 0048 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 683 004a 062B     		cmp	r3, #6
 684 004c 01D1     		bne	.L50
 328:usb/usb.c     **** 				USBGetDescriptor();
 685              		.loc 1 328 0
 686 004e FFF7FEFF 		bl	USBGetDescriptor
 687              	.LVL51:
 688              	.L50:
 329:usb/usb.c     **** 			}
 330:usb/usb.c     **** 			break;
 331:usb/usb.c     **** 		case 0x81:
 332:usb/usb.c     **** 
 333:usb/usb.c     **** 			break;
 334:usb/usb.c     **** 	}
 335:usb/usb.c     **** 	if(heap.devAddress){
 689              		.loc 1 335 0
 690 0052 094B     		ldr	r3, .L57+8
 691 0054 93F84230 		ldrb	r3, [r3, #66]	@ zero_extendqisi2
 692 0058 43B1     		cbz	r3, .L49
 336:usb/usb.c     **** 		// GPIOC->BSRR = GPIO_BSRR_BS13;
 337:usb/usb.c     **** 		USB->DADDR = USB_DADDR_EF | heap.devAddress;
 693              		.loc 1 337 0
 694 005a 084A     		ldr	r2, .L57+12
 695 005c 1268     		ldr	r2, [r2]
 696 005e 43F08003 		orr	r3, r3, #128
 697 0062 D364     		str	r3, [r2, #76]
 338:usb/usb.c     **** 		heap.devAddress = 0;
 698              		.loc 1 338 0
 699 0064 0022     		movs	r2, #0
 700 0066 044B     		ldr	r3, .L57+8
 701 0068 83F84220 		strb	r2, [r3, #66]
 702              	.L49:
 703 006c 08BD     		pop	{r3, pc}
 704              	.L58:
 705 006e 00BF     		.align	2
 706              	.L57:
 707 0070 00000000 		.word	.LANCHOR11
 708 0074 00000000 		.word	SetupPacket
 709 0078 00000000 		.word	heap
 710 007c 00000000 		.word	.LANCHOR0
 711              		.cfi_endproc
 712              	.LFE38:
 714              		.section	.text.USBCtrHandler,"ax",%progbits
 715              		.align	2
 716              		.global	USBCtrHandler
 717              		.thumb
 718              		.thumb_func
 720              	USBCtrHandler:
 721              	.LFB39:
 339:usb/usb.c     **** 	}
 340:usb/usb.c     **** }
 341:usb/usb.c     **** 
 342:usb/usb.c     **** 
 343:usb/usb.c     **** void USBCtrHandler(void){
ARM GAS  /tmp/ccfFRkoC.s 			page 46


 722              		.loc 1 343 0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 0
 725              		@ frame_needed = 0, uses_anonymous_args = 0
 344:usb/usb.c     **** 	uint8_t numEp = USB->ISTR & USB_ISTR_EP_ID;
 726              		.loc 1 344 0
 727 0000 1F4B     		ldr	r3, .L66
 728 0002 1B68     		ldr	r3, [r3]
 729 0004 5A6C     		ldr	r2, [r3, #68]
 730              	.LVL52:
 345:usb/usb.c     **** 	if(numEp == USB_EP0){ 
 731              		.loc 1 345 0
 732 0006 12F00F02 		ands	r2, r2, #15
 733              	.LVL53:
 734 000a 38D1     		bne	.L65
 343:usb/usb.c     **** 	uint8_t numEp = USB->ISTR & USB_ISTR_EP_ID;
 735              		.loc 1 343 0
 736 000c 10B5     		push	{r4, lr}
 737              	.LCFI5:
 738              		.cfi_def_cfa_offset 8
 739              		.cfi_offset 4, -8
 740              		.cfi_offset 14, -4
 346:usb/usb.c     **** 		if(USB->EPR[0] & USB_EP_CTR_RX){ 
 741              		.loc 1 346 0
 742 000e 1B68     		ldr	r3, [r3]
 743 0010 13F4004F 		tst	r3, #32768
 744 0014 1DD0     		beq	.L61
 347:usb/usb.c     **** 			USBReadEP((uint8_t *)heap.buffSetup, 8, numEp);
 745              		.loc 1 347 0
 746 0016 1B4C     		ldr	r4, .L66+4
 747 0018 0821     		movs	r1, #8
 748 001a 2046     		mov	r0, r4
 749 001c FFF7FEFF 		bl	USBReadEP
 750              	.LVL54:
 348:usb/usb.c     **** 			USBRequest(&SetupPacket, (uint8_t *)heap.buffSetup);
 751              		.loc 1 348 0
 752 0020 2146     		mov	r1, r4
 753 0022 1948     		ldr	r0, .L66+8
 754 0024 FFF7FEFF 		bl	USBRequest
 755              	.LVL55:
 349:usb/usb.c     **** 			if(USB->EPR[0] & USB_EP_SETUP){
 756              		.loc 1 349 0
 757 0028 154B     		ldr	r3, .L66
 758 002a 1B68     		ldr	r3, [r3]
 759 002c 1B68     		ldr	r3, [r3]
 760 002e 13F4006F 		tst	r3, #2048
 761 0032 01D0     		beq	.L62
 350:usb/usb.c     **** 				USBSetup();
 762              		.loc 1 350 0
 763 0034 FFF7FEFF 		bl	USBSetup
 764              	.LVL56:
 765              	.L62:
 351:usb/usb.c     **** 			}
 352:usb/usb.c     **** 			USB->EPR[0] = USB_EP_CONTROL | USB_EP_STAT_RX_0;
 766              		.loc 1 352 0
 767 0038 114B     		ldr	r3, .L66
 768 003a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccfFRkoC.s 			page 47


 769 003c 4FF49052 		mov	r2, #4608
 770 0040 1A60     		str	r2, [r3]
 353:usb/usb.c     **** 			// EP_CONTROL_RX_STATUS(0, USB_EP_RX_VALID);
 354:usb/usb.c     **** 			if(heap.cntTx){
 771              		.loc 1 354 0
 772 0042 124B     		ldr	r3, .L66+12
 773 0044 9988     		ldrh	r1, [r3, #4]
 774 0046 21B1     		cbz	r1, .L61
 355:usb/usb.c     **** 				USBSendData(heap.buffTx, heap.cntTx, 0);
 775              		.loc 1 355 0
 776 0048 0022     		movs	r2, #0
 777 004a C9B2     		uxtb	r1, r1
 778 004c 1868     		ldr	r0, [r3]
 779 004e FFF7FEFF 		bl	USBSendData
 780              	.LVL57:
 781              	.L61:
 356:usb/usb.c     **** 			}
 357:usb/usb.c     **** 		}
 358:usb/usb.c     **** 		if(USB->EPR[0] & USB_EP_CTR_TX){
 782              		.loc 1 358 0
 783 0052 0B4B     		ldr	r3, .L66
 784 0054 1B68     		ldr	r3, [r3]
 785 0056 1A68     		ldr	r2, [r3]
 786 0058 12F0800F 		tst	r2, #128
 787 005c 0ED0     		beq	.L59
 359:usb/usb.c     **** 			
 360:usb/usb.c     **** 			if(heap.devAddress){
 788              		.loc 1 360 0
 789 005e 0B4A     		ldr	r2, .L66+12
 790 0060 92F84220 		ldrb	r2, [r2, #66]	@ zero_extendqisi2
 791 0064 32B1     		cbz	r2, .L63
 361:usb/usb.c     **** 				USB->DADDR = USB_DADDR_EF | heap.devAddress;
 792              		.loc 1 361 0
 793 0066 42F08002 		orr	r2, r2, #128
 794 006a DA64     		str	r2, [r3, #76]
 362:usb/usb.c     **** 				heap.devAddress = 0;
 795              		.loc 1 362 0
 796 006c 0022     		movs	r2, #0
 797 006e 074B     		ldr	r3, .L66+12
 798 0070 83F84220 		strb	r2, [r3, #66]
 799              	.L63:
 363:usb/usb.c     **** 			}
 364:usb/usb.c     **** 			if(heap.cntTx){
 365:usb/usb.c     **** 				// USBSendData()
 366:usb/usb.c     **** 			}
 367:usb/usb.c     **** 			USBStatusTx(0, USB_EP_TX_VALID);
 800              		.loc 1 367 0
 801 0074 3021     		movs	r1, #48
 802 0076 0020     		movs	r0, #0
 803 0078 FFF7FEFF 		bl	USBStatusTx
 804              	.LVL58:
 805              	.L59:
 806 007c 10BD     		pop	{r4, pc}
 807              	.L65:
 808              	.LCFI6:
 809              		.cfi_def_cfa_offset 0
 810              		.cfi_restore 4
ARM GAS  /tmp/ccfFRkoC.s 			page 48


 811              		.cfi_restore 14
 812 007e 7047     		bx	lr
 813              	.L67:
 814              		.align	2
 815              	.L66:
 816 0080 00000000 		.word	.LANCHOR0
 817 0084 10000000 		.word	heap+16
 818 0088 00000000 		.word	SetupPacket
 819 008c 00000000 		.word	heap
 820              		.cfi_endproc
 821              	.LFE39:
 823              		.section	.text.USB_LP_CAN1_RX0_IRQHandler,"ax",%progbits
 824              		.align	2
 825              		.global	USB_LP_CAN1_RX0_IRQHandler
 826              		.thumb
 827              		.thumb_func
 829              	USB_LP_CAN1_RX0_IRQHandler:
 830              	.LFB40:
 368:usb/usb.c     **** 		}
 369:usb/usb.c     **** 	}
 370:usb/usb.c     **** }
 371:usb/usb.c     **** /* Interrupt */
 372:usb/usb.c     **** 
 373:usb/usb.c     **** void USB_LP_CAN1_RX0_IRQHandler()
 374:usb/usb.c     **** {
 831              		.loc 1 374 0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 0
 834              		@ frame_needed = 0, uses_anonymous_args = 0
 835 0000 08B5     		push	{r3, lr}
 836              	.LCFI7:
 837              		.cfi_def_cfa_offset 8
 838              		.cfi_offset 3, -8
 839              		.cfi_offset 14, -4
 375:usb/usb.c     ****     if (USB->ISTR & USB_ISTR_RESET) { /* Reset */
 840              		.loc 1 375 0
 841 0002 2E4B     		ldr	r3, .L79
 842 0004 1B68     		ldr	r3, [r3]
 843 0006 5A6C     		ldr	r2, [r3, #68]
 844 0008 12F4806F 		tst	r2, #1024
 845 000c 06D0     		beq	.L69
 376:usb/usb.c     ****         USB->ISTR &= ~USB_ISTR_RESET;
 846              		.loc 1 376 0
 847 000e 5A6C     		ldr	r2, [r3, #68]
 848 0010 22F48062 		bic	r2, r2, #1024
 849 0014 5A64     		str	r2, [r3, #68]
 377:usb/usb.c     ****         USBReset();
 850              		.loc 1 377 0
 851 0016 FFF7FEFF 		bl	USBReset
 852              	.LVL59:
 378:usb/usb.c     ****         return;
 853              		.loc 1 378 0
 854 001a 08BD     		pop	{r3, pc}
 855              	.L69:
 379:usb/usb.c     ****     }
 380:usb/usb.c     ****     if (USB->ISTR & USB_ISTR_CTR) { /* CTR */
 856              		.loc 1 380 0
ARM GAS  /tmp/ccfFRkoC.s 			page 49


 857 001c 5A6C     		ldr	r2, [r3, #68]
 858 001e 12F4004F 		tst	r2, #32768
 859 0022 08D0     		beq	.L71
 381:usb/usb.c     ****         USBCtrHandler();
 860              		.loc 1 381 0
 861 0024 FFF7FEFF 		bl	USBCtrHandler
 862              	.LVL60:
 382:usb/usb.c     ****         USB->ISTR &= ~USB_ISTR_CTR;
 863              		.loc 1 382 0
 864 0028 244B     		ldr	r3, .L79
 865 002a 1A68     		ldr	r2, [r3]
 866 002c 536C     		ldr	r3, [r2, #68]
 867 002e 23F40043 		bic	r3, r3, #32768
 868 0032 5364     		str	r3, [r2, #68]
 383:usb/usb.c     ****         return;
 869              		.loc 1 383 0
 870 0034 08BD     		pop	{r3, pc}
 871              	.L71:
 384:usb/usb.c     ****     }
 385:usb/usb.c     ****     if (USB->ISTR & USB_ISTR_PMAOVR) {
 872              		.loc 1 385 0
 873 0036 5A6C     		ldr	r2, [r3, #68]
 874 0038 12F4804F 		tst	r2, #16384
 875 003c 04D0     		beq	.L72
 386:usb/usb.c     ****         USB->ISTR &= ~USB_ISTR_PMAOVR;
 876              		.loc 1 386 0
 877 003e 5A6C     		ldr	r2, [r3, #68]
 878 0040 22F48042 		bic	r2, r2, #16384
 879 0044 5A64     		str	r2, [r3, #68]
 387:usb/usb.c     ****         // Handle PMAOVR status
 388:usb/usb.c     ****         return;
 880              		.loc 1 388 0
 881 0046 08BD     		pop	{r3, pc}
 882              	.L72:
 389:usb/usb.c     ****     }
 390:usb/usb.c     ****     if (USB->ISTR & USB_ISTR_SUSP) {
 883              		.loc 1 390 0
 884 0048 5A6C     		ldr	r2, [r3, #68]
 885 004a 12F4006F 		tst	r2, #2048
 886 004e 0ED0     		beq	.L73
 391:usb/usb.c     ****         USB->ISTR &= ~USB_ISTR_SUSP;
 887              		.loc 1 391 0
 888 0050 5A6C     		ldr	r2, [r3, #68]
 889 0052 22F40062 		bic	r2, r2, #2048
 890 0056 5A64     		str	r2, [r3, #68]
 392:usb/usb.c     ****         if (USB->DADDR & 0x7f) {
 891              		.loc 1 392 0
 892 0058 DA6C     		ldr	r2, [r3, #76]
 893 005a 12F07F0F 		tst	r2, #127
 894 005e 2CD0     		beq	.L68
 393:usb/usb.c     ****             USB->DADDR = 0;
 895              		.loc 1 393 0
 896 0060 0022     		movs	r2, #0
 897 0062 DA64     		str	r2, [r3, #76]
 394:usb/usb.c     ****             USB->CNTR &= ~USB_CNTR_SUSPM;
 898              		.loc 1 394 0
 899 0064 1A6C     		ldr	r2, [r3, #64]
ARM GAS  /tmp/ccfFRkoC.s 			page 50


 900 0066 22F40062 		bic	r2, r2, #2048
 901 006a 1A64     		str	r2, [r3, #64]
 902 006c 08BD     		pop	{r3, pc}
 903              	.L73:
 395:usb/usb.c     ****         }
 396:usb/usb.c     ****         return;
 397:usb/usb.c     ****     }
 398:usb/usb.c     ****     if (USB->ISTR & USB_ISTR_ERR) {
 904              		.loc 1 398 0
 905 006e 5A6C     		ldr	r2, [r3, #68]
 906 0070 12F4005F 		tst	r2, #8192
 907 0074 04D0     		beq	.L74
 399:usb/usb.c     ****         USB->ISTR &= ~USB_ISTR_ERR;
 908              		.loc 1 399 0
 909 0076 5A6C     		ldr	r2, [r3, #68]
 910 0078 22F40052 		bic	r2, r2, #8192
 911 007c 5A64     		str	r2, [r3, #68]
 400:usb/usb.c     ****         // Handle Error
 401:usb/usb.c     ****         return;
 912              		.loc 1 401 0
 913 007e 08BD     		pop	{r3, pc}
 914              	.L74:
 402:usb/usb.c     ****     }
 403:usb/usb.c     ****     if (USB->ISTR & USB_ISTR_WKUP) {
 915              		.loc 1 403 0
 916 0080 5A6C     		ldr	r2, [r3, #68]
 917 0082 12F4805F 		tst	r2, #4096
 918 0086 04D0     		beq	.L75
 404:usb/usb.c     ****         USB->ISTR &= ~USB_ISTR_WKUP;
 919              		.loc 1 404 0
 920 0088 5A6C     		ldr	r2, [r3, #68]
 921 008a 22F48052 		bic	r2, r2, #4096
 922 008e 5A64     		str	r2, [r3, #68]
 405:usb/usb.c     ****         // Handle Wakeup
 406:usb/usb.c     ****         return;
 923              		.loc 1 406 0
 924 0090 08BD     		pop	{r3, pc}
 925              	.L75:
 407:usb/usb.c     ****     }
 408:usb/usb.c     ****     if (USB->ISTR & USB_ISTR_SOF) {
 926              		.loc 1 408 0
 927 0092 5A6C     		ldr	r2, [r3, #68]
 928 0094 12F4007F 		tst	r2, #512
 929 0098 04D0     		beq	.L76
 409:usb/usb.c     ****         USB->ISTR &= ~USB_ISTR_SOF;
 930              		.loc 1 409 0
 931 009a 5A6C     		ldr	r2, [r3, #68]
 932 009c 22F40072 		bic	r2, r2, #512
 933 00a0 5A64     		str	r2, [r3, #68]
 410:usb/usb.c     ****         // Handle SOF
 411:usb/usb.c     ****         return;
 934              		.loc 1 411 0
 935 00a2 08BD     		pop	{r3, pc}
 936              	.L76:
 412:usb/usb.c     ****     }
 413:usb/usb.c     ****     if (USB->ISTR & USB_ISTR_ESOF) {
 937              		.loc 1 413 0
ARM GAS  /tmp/ccfFRkoC.s 			page 51


 938 00a4 5A6C     		ldr	r2, [r3, #68]
 939 00a6 12F4807F 		tst	r2, #256
 940 00aa 04D0     		beq	.L77
 414:usb/usb.c     ****         USB->ISTR &= ~USB_ISTR_ESOF;
 941              		.loc 1 414 0
 942 00ac 5A6C     		ldr	r2, [r3, #68]
 943 00ae 22F48072 		bic	r2, r2, #256
 944 00b2 5A64     		str	r2, [r3, #68]
 415:usb/usb.c     ****         // Handle ESOF
 416:usb/usb.c     ****         return;
 945              		.loc 1 416 0
 946 00b4 08BD     		pop	{r3, pc}
 947              	.L77:
 417:usb/usb.c     ****     }
 418:usb/usb.c     ****     USB->ISTR = 0;
 948              		.loc 1 418 0
 949 00b6 0022     		movs	r2, #0
 950 00b8 5A64     		str	r2, [r3, #68]
 951              	.L68:
 952 00ba 08BD     		pop	{r3, pc}
 953              	.L80:
 954              		.align	2
 955              	.L79:
 956 00bc 00000000 		.word	.LANCHOR0
 957              		.cfi_endproc
 958              	.LFE40:
 960              		.global	descStringInterface
 961              		.global	descStringConfig
 962              		.global	descStringSerialNumber
 963              		.global	descStringMFC
 964              		.global	descStringProduct
 965              		.global	descStringLangID
 966              		.global	descConfiguration
 967              		.global	descDeviceQualifier
 968              		.global	descDevice
 969              		.global	debug1
 970              		.comm	SetupPacket,8,4
 971              		.comm	heap,68,4
 972              		.global	EPBuffTable
 973              		.global	USB
 974              		.section	.data.descStringConfig,"aw",%progbits
 975              		.align	2
 976              		.set	.LANCHOR9,. + 0
 979              	descStringConfig:
 980 0000 13       		.byte	19
 981 0001 03       		.byte	3
 982 0002 43       		.byte	67
 983 0003 75       		.byte	117
 984 0004 73       		.byte	115
 985 0005 74       		.byte	116
 986 0006 6F       		.byte	111
 987 0007 6D       		.byte	109
 988 0008 20       		.byte	32
 989 0009 48       		.byte	72
 990 000a 49       		.byte	73
 991 000b 44       		.byte	68
 992 000c 20       		.byte	32
ARM GAS  /tmp/ccfFRkoC.s 			page 52


 993 000d 43       		.byte	67
 994 000e 6F       		.byte	111
 995 000f 6E       		.byte	110
 996 0010 66       		.byte	102
 997 0011 69       		.byte	105
 998 0012 67       		.byte	103
 999              		.section	.data.descStringLangID,"aw",%progbits
 1000              		.align	2
 1001              		.set	.LANCHOR5,. + 0
 1004              	descStringLangID:
 1005 0000 04       		.byte	4
 1006 0001 03       		.byte	3
 1007 0002 09       		.byte	9
 1008 0003 04       		.byte	4
 1009              		.section	.data.descStringMFC,"aw",%progbits
 1010              		.align	2
 1011              		.set	.LANCHOR6,. + 0
 1014              	descStringMFC:
 1015 0000 0E       		.byte	14
 1016 0001 03       		.byte	3
 1017 0002 53       		.byte	83
 1018 0003 54       		.byte	84
 1019 0004 4D       		.byte	77
 1020 0005 33       		.byte	51
 1021 0006 32       		.byte	50
 1022 0007 20       		.byte	32
 1023 0008 44       		.byte	68
 1024 0009 65       		.byte	101
 1025 000a 76       		.byte	118
 1026 000b 69       		.byte	105
 1027 000c 63       		.byte	99
 1028 000d 65       		.byte	101
 1029              		.section	.data.USB,"aw",%progbits
 1030              		.align	2
 1031              		.set	.LANCHOR0,. + 0
 1034              	USB:
 1035 0000 005C0040 		.word	1073765376
 1036              		.section	.data.descConfiguration,"aw",%progbits
 1037              		.align	2
 1038              		.set	.LANCHOR4,. + 0
 1041              	descConfiguration:
 1042 0000 09       		.byte	9
 1043 0001 02       		.byte	2
 1044 0002 29       		.byte	41
 1045 0003 00       		.byte	0
 1046 0004 01       		.byte	1
 1047 0005 01       		.byte	1
 1048 0006 00       		.byte	0
 1049 0007 C0       		.byte	-64
 1050 0008 32       		.byte	50
 1051 0009 09       		.byte	9
 1052 000a 04       		.byte	4
 1053 000b 00       		.byte	0
 1054 000c 00       		.byte	0
 1055 000d 02       		.byte	2
 1056 000e 03       		.byte	3
 1057 000f 00       		.byte	0
ARM GAS  /tmp/ccfFRkoC.s 			page 53


 1058 0010 00       		.byte	0
 1059 0011 05       		.byte	5
 1060 0012 09       		.byte	9
 1061 0013 21       		.byte	33
 1062 0014 01       		.byte	1
 1063 0015 01       		.byte	1
 1064 0016 00       		.byte	0
 1065 0017 01       		.byte	1
 1066 0018 22       		.byte	34
 1067 0019 02       		.byte	2
 1068 001a 00       		.byte	0
 1069 001b 07       		.byte	7
 1070 001c 05       		.byte	5
 1071 001d 81       		.byte	-127
 1072 001e 02       		.byte	2
 1073 001f 10       		.byte	16
 1074 0020 00       		.byte	0
 1075 0021 20       		.byte	32
 1076 0022 07       		.byte	7
 1077 0023 05       		.byte	5
 1078 0024 01       		.byte	1
 1079 0025 02       		.byte	2
 1080 0026 10       		.byte	16
 1081 0027 00       		.byte	0
 1082 0028 20       		.byte	32
 1083              		.section	.data.EPBuffTable,"aw",%progbits
 1084              		.align	2
 1085              		.set	.LANCHOR1,. + 0
 1088              	EPBuffTable:
 1089 0000 00600040 		.word	1073766400
 1090 0004 00610040 		.word	1073766656
 1091 0008 00620040 		.word	1073766912
 1092              		.section	.bss.debug1,"aw",%nobits
 1093              		.set	.LANCHOR11,. + 0
 1096              	debug1:
 1097 0000 00       		.space	1
 1098              		.section	.data.descStringProduct,"aw",%progbits
 1099              		.align	2
 1100              		.set	.LANCHOR7,. + 0
 1103              	descStringProduct:
 1104 0000 12       		.byte	18
 1105 0001 03       		.byte	3
 1106 0002 53       		.byte	83
 1107 0003 54       		.byte	84
 1108 0004 4D       		.byte	77
 1109 0005 33       		.byte	51
 1110 0006 32       		.byte	50
 1111 0007 20       		.byte	32
 1112 0008 43       		.byte	67
 1113 0009 75       		.byte	117
 1114 000a 73       		.byte	115
 1115 000b 74       		.byte	116
 1116 000c 6F       		.byte	111
 1117 000d 6D       		.byte	109
 1118 000e 20       		.byte	32
 1119 000f 48       		.byte	72
 1120 0010 49       		.byte	73
ARM GAS  /tmp/ccfFRkoC.s 			page 54


 1121 0011 44       		.byte	68
 1122              		.section	.data.descStringInterface,"aw",%progbits
 1123              		.align	2
 1124              		.set	.LANCHOR10,. + 0
 1127              	descStringInterface:
 1128 0000 16       		.byte	22
 1129 0001 03       		.byte	3
 1130 0002 43       		.byte	67
 1131 0003 75       		.byte	117
 1132 0004 73       		.byte	115
 1133 0005 74       		.byte	116
 1134 0006 6F       		.byte	111
 1135 0007 6D       		.byte	109
 1136 0008 20       		.byte	32
 1137 0009 48       		.byte	72
 1138 000a 49       		.byte	73
 1139 000b 44       		.byte	68
 1140 000c 20       		.byte	32
 1141 000d 49       		.byte	73
 1142 000e 6E       		.byte	110
 1143 000f 74       		.byte	116
 1144 0010 65       		.byte	101
 1145 0011 72       		.byte	114
 1146 0012 66       		.byte	102
 1147 0013 61       		.byte	97
 1148 0014 63       		.byte	99
 1149 0015 65       		.byte	101
 1150              		.section	.data.descStringSerialNumber,"aw",%progbits
 1151              		.align	2
 1152              		.set	.LANCHOR8,. + 0
 1155              	descStringSerialNumber:
 1156 0000 0E       		.byte	14
 1157 0001 03       		.byte	3
 1158 0002 30       		.byte	48
 1159 0003 30       		.byte	48
 1160 0004 30       		.byte	48
 1161 0005 30       		.byte	48
 1162 0006 30       		.byte	48
 1163 0007 30       		.byte	48
 1164 0008 30       		.byte	48
 1165 0009 30       		.byte	48
 1166 000a 30       		.byte	48
 1167 000b 30       		.byte	48
 1168 000c 31       		.byte	49
 1169 000d 41       		.byte	65
 1170              		.section	.data.descDeviceQualifier,"aw",%progbits
 1171              		.align	2
 1172              		.set	.LANCHOR3,. + 0
 1175              	descDeviceQualifier:
 1176 0000 0A       		.byte	10
 1177 0001 06       		.byte	6
 1178 0002 00       		.byte	0
 1179 0003 02       		.byte	2
 1180 0004 00       		.byte	0
 1181 0005 00       		.byte	0
 1182 0006 00       		.byte	0
 1183 0007 40       		.byte	64
ARM GAS  /tmp/ccfFRkoC.s 			page 55


 1184 0008 01       		.byte	1
 1185 0009 00       		.byte	0
 1186              		.section	.data.descDevice,"aw",%progbits
 1187              		.align	2
 1188              		.set	.LANCHOR2,. + 0
 1191              	descDevice:
 1192 0000 12       		.byte	18
 1193 0001 01       		.byte	1
 1194 0002 00       		.byte	0
 1195 0003 02       		.byte	2
 1196 0004 00       		.byte	0
 1197 0005 00       		.byte	0
 1198 0006 00       		.byte	0
 1199 0007 40       		.byte	64
 1200 0008 83       		.byte	-125
 1201 0009 04       		.byte	4
 1202 000a 50       		.byte	80
 1203 000b 57       		.byte	87
 1204 000c 00       		.byte	0
 1205 000d 02       		.byte	2
 1206 000e 01       		.byte	1
 1207 000f 02       		.byte	2
 1208 0010 03       		.byte	3
 1209 0011 01       		.byte	1
 1210              		.text
 1211              	.Letext0:
 1212              		.file 3 "usb/../cmsis/stm32f10x.h"
 1213              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 1214              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 1215              		.file 6 "usb/usb.h"
ARM GAS  /tmp/ccfFRkoC.s 			page 56


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb.c
     /tmp/ccfFRkoC.s:20     .text.USBConfig:0000000000000000 $t
     /tmp/ccfFRkoC.s:25     .text.USBConfig:0000000000000000 USBConfig
     /tmp/ccfFRkoC.s:78     .text.USBConfig:0000000000000038 $d
                            *COM*:0000000000000044 heap
     /tmp/ccfFRkoC.s:88     .text.USBWriteEP:0000000000000000 $t
     /tmp/ccfFRkoC.s:93     .text.USBWriteEP:0000000000000000 USBWriteEP
     /tmp/ccfFRkoC.s:178    .text.USBWriteEP:000000000000005c $d
     /tmp/ccfFRkoC.s:184    .text.USBReadEP:0000000000000000 $t
     /tmp/ccfFRkoC.s:189    .text.USBReadEP:0000000000000000 USBReadEP
     /tmp/ccfFRkoC.s:238    .text.USBReadEP:0000000000000030 $d
     /tmp/ccfFRkoC.s:243    .text.USBStatusTx:0000000000000000 $t
     /tmp/ccfFRkoC.s:248    .text.USBStatusTx:0000000000000000 USBStatusTx
     /tmp/ccfFRkoC.s:275    .text.USBStatusTx:0000000000000024 $d
     /tmp/ccfFRkoC.s:280    .text.USBStatusRx:0000000000000000 $t
     /tmp/ccfFRkoC.s:285    .text.USBStatusRx:0000000000000000 USBStatusRx
     /tmp/ccfFRkoC.s:312    .text.USBStatusRx:0000000000000024 $d
     /tmp/ccfFRkoC.s:317    .text.USBSendData:0000000000000000 $t
     /tmp/ccfFRkoC.s:322    .text.USBSendData:0000000000000000 USBSendData
     /tmp/ccfFRkoC.s:375    .text.USBSendData:0000000000000038 $d
     /tmp/ccfFRkoC.s:382    .text.USBRequest:0000000000000000 $t
     /tmp/ccfFRkoC.s:387    .text.USBRequest:0000000000000000 USBRequest
     /tmp/ccfFRkoC.s:424    .text.USBReset:0000000000000000 $t
     /tmp/ccfFRkoC.s:429    .text.USBReset:0000000000000000 USBReset
     /tmp/ccfFRkoC.s:468    .text.USBReset:0000000000000034 $d
     /tmp/ccfFRkoC.s:474    .text.USBGetDescriptor:0000000000000000 $t
     /tmp/ccfFRkoC.s:479    .text.USBGetDescriptor:0000000000000000 USBGetDescriptor
     /tmp/ccfFRkoC.s:498    .text.USBGetDescriptor:0000000000000010 $d
     /tmp/ccfFRkoC.s:504    .text.USBGetDescriptor:0000000000000016 $t
     /tmp/ccfFRkoC.s:541    .text.USBGetDescriptor:0000000000000048 $d
     /tmp/ccfFRkoC.s:547    .text.USBGetDescriptor:000000000000004e $t
     /tmp/ccfFRkoC.s:605    .text.USBGetDescriptor:0000000000000098 $d
                            *COM*:0000000000000008 SetupPacket
     /tmp/ccfFRkoC.s:619    .text.USBSetup:0000000000000000 $t
     /tmp/ccfFRkoC.s:624    .text.USBSetup:0000000000000000 USBSetup
     /tmp/ccfFRkoC.s:707    .text.USBSetup:0000000000000070 $d
     /tmp/ccfFRkoC.s:715    .text.USBCtrHandler:0000000000000000 $t
     /tmp/ccfFRkoC.s:720    .text.USBCtrHandler:0000000000000000 USBCtrHandler
     /tmp/ccfFRkoC.s:816    .text.USBCtrHandler:0000000000000080 $d
     /tmp/ccfFRkoC.s:824    .text.USB_LP_CAN1_RX0_IRQHandler:0000000000000000 $t
     /tmp/ccfFRkoC.s:829    .text.USB_LP_CAN1_RX0_IRQHandler:0000000000000000 USB_LP_CAN1_RX0_IRQHandler
     /tmp/ccfFRkoC.s:956    .text.USB_LP_CAN1_RX0_IRQHandler:00000000000000bc $d
     /tmp/ccfFRkoC.s:1127   .data.descStringInterface:0000000000000000 descStringInterface
     /tmp/ccfFRkoC.s:979    .data.descStringConfig:0000000000000000 descStringConfig
     /tmp/ccfFRkoC.s:1155   .data.descStringSerialNumber:0000000000000000 descStringSerialNumber
     /tmp/ccfFRkoC.s:1014   .data.descStringMFC:0000000000000000 descStringMFC
     /tmp/ccfFRkoC.s:1103   .data.descStringProduct:0000000000000000 descStringProduct
     /tmp/ccfFRkoC.s:1004   .data.descStringLangID:0000000000000000 descStringLangID
     /tmp/ccfFRkoC.s:1041   .data.descConfiguration:0000000000000000 descConfiguration
     /tmp/ccfFRkoC.s:1175   .data.descDeviceQualifier:0000000000000000 descDeviceQualifier
     /tmp/ccfFRkoC.s:1191   .data.descDevice:0000000000000000 descDevice
     /tmp/ccfFRkoC.s:1096   .bss.debug1:0000000000000000 debug1
     /tmp/ccfFRkoC.s:1088   .data.EPBuffTable:0000000000000000 EPBuffTable
     /tmp/ccfFRkoC.s:1034   .data.USB:0000000000000000 USB
     /tmp/ccfFRkoC.s:975    .data.descStringConfig:0000000000000000 $d
     /tmp/ccfFRkoC.s:1000   .data.descStringLangID:0000000000000000 $d
ARM GAS  /tmp/ccfFRkoC.s 			page 57


     /tmp/ccfFRkoC.s:1010   .data.descStringMFC:0000000000000000 $d
     /tmp/ccfFRkoC.s:1030   .data.USB:0000000000000000 $d
     /tmp/ccfFRkoC.s:1037   .data.descConfiguration:0000000000000000 $d
     /tmp/ccfFRkoC.s:1084   .data.EPBuffTable:0000000000000000 $d
     /tmp/ccfFRkoC.s:1097   .bss.debug1:0000000000000000 $d
     /tmp/ccfFRkoC.s:1099   .data.descStringProduct:0000000000000000 $d
     /tmp/ccfFRkoC.s:1123   .data.descStringInterface:0000000000000000 $d
     /tmp/ccfFRkoC.s:1151   .data.descStringSerialNumber:0000000000000000 $d
     /tmp/ccfFRkoC.s:1171   .data.descDeviceQualifier:0000000000000000 $d
     /tmp/ccfFRkoC.s:1187   .data.descDevice:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
