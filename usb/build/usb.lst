ARM GAS  /tmp/ccNLaRzu.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"usb.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.USBConfig,"ax",%progbits
  20              		.align	2
  21              		.global	USBConfig
  22              		.thumb
  23              		.thumb_func
  25              	USBConfig:
  26              	.LFB29:
  27              		.file 1 "usb/usb.c"
   1:usb/usb.c     **** #include "usb.h"
   2:usb/usb.c     **** 
   3:usb/usb.c     **** /* Variables */
   4:usb/usb.c     **** 
   5:usb/usb.c     **** volatile USB_TypeDef       *USB = (USB_TypeDef *)USB_BASE; 
   6:usb/usb.c     **** volatile USBEpBuf_TypeDef *EPBuffTable[3] = {
   7:usb/usb.c     **** 	(USBEpBuf_TypeDef *)USB_PMA_ADDR,
   8:usb/usb.c     **** 	(USBEpBuf_TypeDef *)USB_PMA_ADDR + 0x10,
   9:usb/usb.c     **** 	(USBEpBuf_TypeDef *)USB_PMA_ADDR + 0x20
  10:usb/usb.c     **** };
  11:usb/usb.c     **** 
  12:usb/usb.c     **** USBHeap heap;
  13:usb/usb.c     **** USBSetupPacket SetupPacket; 
  14:usb/usb.c     **** 
  15:usb/usb.c     **** uint8_t exitFun = 0;
  16:usb/usb.c     **** uint16_t test = 0;
  17:usb/usb.c     **** 
  18:usb/usb.c     **** #define USBEpClearCtrRx(reg, epNum)   (USB->EPR[epNum] = USB->EPR[epNum] & 0x7FFF & USB_EP_MASK)
  19:usb/usb.c     **** #define USBEpClearCtrTx(reg, epNum)   (USB->EPR[epNum] = USB->EPR[epNum] & 0xFF7F & USB_EP_MASK)
  20:usb/usb.c     **** 
  21:usb/usb.c     **** uint8_t descDevice[] = 
  22:usb/usb.c     **** {   
  23:usb/usb.c     ****     0x12,				/* bLength */
  24:usb/usb.c     ****     0x01,				/* bDescriptorType */
  25:usb/usb.c     ****     0x00,				/* bcdUSB */  
  26:usb/usb.c     ****     0x02,
  27:usb/usb.c     ****     0x00,				/* bDeviceClass */
  28:usb/usb.c     ****     0x00,				/* bDeviceSubClass */
  29:usb/usb.c     ****     0x00,				/* bDeviceProtocol */
  30:usb/usb.c     ****     0x40,				/* bMaxPacketSize */
  31:usb/usb.c     ****     LOBYTE(USB_VID),	/* idVendor */ 
ARM GAS  /tmp/ccNLaRzu.s 			page 2


  32:usb/usb.c     ****     HIBYTE(USB_VID),	/* idVendor */
  33:usb/usb.c     ****     LOBYTE(USB_PID),	/* idProduct */  
  34:usb/usb.c     ****     HIBYTE(USB_PID),	/* idProduct */
  35:usb/usb.c     ****     0x00,				/* bcdDevice rel. 2.00 */
  36:usb/usb.c     ****     0x02,
  37:usb/usb.c     ****     0x01,				/* Index of manufacturer  string */
  38:usb/usb.c     ****     0x02,				/* Index of product string */
  39:usb/usb.c     ****     0x03,				/* Index of serial number string */
  40:usb/usb.c     ****     0x01 				/* bNumConfigurations */
  41:usb/usb.c     **** };
  42:usb/usb.c     **** /************** Descriptor of device qualifier ****************/
  43:usb/usb.c     **** uint8_t descDeviceQualifier[] = 
  44:usb/usb.c     **** {  
  45:usb/usb.c     ****     0x0a,	/* bLength */
  46:usb/usb.c     ****     0x06,	/* bDescriptorType */
  47:usb/usb.c     ****     0x00,	/* bcdUSB */  
  48:usb/usb.c     ****     0x02,
  49:usb/usb.c     ****     0x00,	/* bDeviceClass */
  50:usb/usb.c     ****     0x00,	/* bDeviceSubClass */
  51:usb/usb.c     ****     0x00,	/* bDeviceProtocol */
  52:usb/usb.c     ****     0x40,	/* bMaxPacketSize */
  53:usb/usb.c     ****     0x01,	/* bNumConfigurations */
  54:usb/usb.c     ****     0x00 	/* bReserve */ 
  55:usb/usb.c     **** };
  56:usb/usb.c     **** /*
  57:usb/usb.c     ****  * Descriptor of configuration 
  58:usb/usb.c     ****  */ 
  59:usb/usb.c     **** uint8_t descConfiguration[] =
  60:usb/usb.c     **** {
  61:usb/usb.c     ****  	0x09,		/* bLength: Configuration Descriptor size */
  62:usb/usb.c     ****  	0x02,		/* bDescriptorType: Configuration */
  63:usb/usb.c     ****  	0x29,		/* wTotalLength: Bytes returned */
  64:usb/usb.c     ****  	0x00,
  65:usb/usb.c     ****  	0x01,		/* bNumInterfaces: 1 interface */
  66:usb/usb.c     ****  	0x01,		/* bConfigurationValue: Configuration value */
  67:usb/usb.c     ****  	0x00,		/* iConfiguration: Index of string descriptor describing the configuration */
  68:usb/usb.c     ****  	0xC0,		/* bmAttributes: bus powered */
  69:usb/usb.c     ****  	0x32,		/* MaxPower 100 mA: this current is used for detecting Vbus */
  70:usb/usb.c     **** /*
  71:usb/usb.c     ****  * Descriptor of interface 
  72:usb/usb.c     ****  */
  73:usb/usb.c     ****  	0x09,		/* bLength: Interface Descriptor size */
  74:usb/usb.c     ****  	0x04,		/* bDescriptorType: Interface descriptor type */
  75:usb/usb.c     ****  	0x00,		/* bInterfaceNumber: Number of Interface */
  76:usb/usb.c     ****  	0x00,		/* bAlternateSetting: Alternate setting */
  77:usb/usb.c     ****  	0x02,		/* bNumEndpoints */
  78:usb/usb.c     ****  	0x03,		/* bInterfaceClass: USB_HID */
  79:usb/usb.c     ****  	0x00,		/* bInterfaceSubClass : 1=BOOT, 0=no boot */
  80:usb/usb.c     ****  	0x00,		/* nInterfaceProtocol : 0=none, 1=keyboard, 2=mouse */
  81:usb/usb.c     ****  	0x05,		/* iInterface: Index of string descriptor */
  82:usb/usb.c     **** /*
  83:usb/usb.c     ****  * Descriptor of USB_HID 
  84:usb/usb.c     ****  */
  85:usb/usb.c     ****  	0x09,		/* bLength: USB_HID Descriptor size */
  86:usb/usb.c     ****  	0x21,		/* bDescriptorType: USB_HID */ 
  87:usb/usb.c     ****  	0x11,		/* bUSB_HIDUSTOM_HID: USB_HID Class Spec release number */
  88:usb/usb.c     ****  	0x01,
ARM GAS  /tmp/ccNLaRzu.s 			page 3


  89:usb/usb.c     ****  	0x00,		/* bCountryCode: Hardware target country */
  90:usb/usb.c     ****  	0x01,		/* bNumDescriptors: Number of USB_HID class descriptors to follow */
  91:usb/usb.c     ****  	0x22,		/* bDescriptorType */
  92:usb/usb.c     ****  	0x24,		/* wItemLength: Total length of Report descriptor */ 
  93:usb/usb.c     ****  	0x00,
  94:usb/usb.c     **** /*
  95:usb/usb.c     ****  * Descriptor of endpoint (IN) 
  96:usb/usb.c     ****  */
  97:usb/usb.c     ****  	0x07,		/* bLength: Endpoint Descriptor size */
  98:usb/usb.c     ****  	0x05,		/* bDescriptorType: */
  99:usb/usb.c     ****  	0x81,		/* bEndpointAddress: Endpoint Address (IN) */
 100:usb/usb.c     ****  	0x03,		/* bmAttributes: Bulk */
 101:usb/usb.c     ****  	0x20,		/* wMaxPacketSize: 2 Byte max */
 102:usb/usb.c     ****  	0x00,
 103:usb/usb.c     ****  	0x32,		/* bInterval: Polling Interval (20 ms) */
 104:usb/usb.c     **** /*
 105:usb/usb.c     ****  * Descriptor of endpoint (OUT) 
 106:usb/usb.c     ****  */
 107:usb/usb.c     ****  	0x07,		/* bLength: Endpoint Descriptor size */
 108:usb/usb.c     ****  	0x05,		/* bDescriptorType: */
 109:usb/usb.c     ****  	0x02,		/* bEndpointAddress: Endpoint Address (OUT) */
 110:usb/usb.c     ****  	0x03,		/* bmAttributes: Bulk */
 111:usb/usb.c     ****  	0x20,		/* wMaxPacketSize: 2 Bytes max */
 112:usb/usb.c     ****  	0x00,
 113:usb/usb.c     ****  	0x32		/* bInterval: Polling Interval (20 ms) */
 114:usb/usb.c     **** };
 115:usb/usb.c     **** uint8_t descStringLangID[] = 
 116:usb/usb.c     **** {
 117:usb/usb.c     **** 	0x04,
 118:usb/usb.c     **** 	0x03,
 119:usb/usb.c     **** 	0x09,
 120:usb/usb.c     **** 	0x04
 121:usb/usb.c     **** };
 122:usb/usb.c     **** 
 123:usb/usb.c     **** uint8_t descStringProduct[] = 
 124:usb/usb.c     **** {
 125:usb/usb.c     **** 	0x0e, 
 126:usb/usb.c     **** 	0x03,
 127:usb/usb.c     **** 	'D',0x00,
 128:usb/usb.c     **** 	'i',0x00,
 129:usb/usb.c     **** 	'g',0x00,
 130:usb/usb.c     **** 	'D',0x00,
 131:usb/usb.c     **** 	'e',0x00,
 132:usb/usb.c     **** 	'v',0x00
 133:usb/usb.c     **** };
 134:usb/usb.c     **** 
 135:usb/usb.c     **** uint8_t descStringMFC[] = 
 136:usb/usb.c     **** {
 137:usb/usb.c     **** 	0x0e, 
 138:usb/usb.c     **** 	0x03,
 139:usb/usb.c     **** 	'D',0x00,
 140:usb/usb.c     **** 	'i',0x00,
 141:usb/usb.c     **** 	'g',0x00,
 142:usb/usb.c     **** 	'D',0x00,
 143:usb/usb.c     **** 	'e',0x00,
 144:usb/usb.c     **** 	'v',0x00
 145:usb/usb.c     **** };
ARM GAS  /tmp/ccNLaRzu.s 			page 4


 146:usb/usb.c     ****  
 147:usb/usb.c     **** uint8_t descStringSerialNumber[] = 
 148:usb/usb.c     **** {
 149:usb/usb.c     **** 	0x1a,  
 150:usb/usb.c     **** 	0x03,
 151:usb/usb.c     **** 	'0',0x00,
 152:usb/usb.c     **** 	'0',0x00,
 153:usb/usb.c     **** 	'0',0x00,
 154:usb/usb.c     **** 	'0',0x00,
 155:usb/usb.c     **** 	'0',0x00,
 156:usb/usb.c     **** 	'0',0x00,
 157:usb/usb.c     **** 	'0',0x00,
 158:usb/usb.c     **** 	'0',0x00,
 159:usb/usb.c     **** 	'0',0x00,
 160:usb/usb.c     **** 	'0',0x00,
 161:usb/usb.c     **** 	'1',0x00,
 162:usb/usb.c     **** 	'A',0x00
 163:usb/usb.c     **** };
 164:usb/usb.c     **** 
 165:usb/usb.c     **** uint8_t descStringConfig[] = 
 166:usb/usb.c     **** {
 167:usb/usb.c     **** 	0x24,  
 168:usb/usb.c     **** 	0x03,
 169:usb/usb.c     **** 	'C',0x00,
 170:usb/usb.c     **** 	'u',0x00,
 171:usb/usb.c     **** 	's',0x00,
 172:usb/usb.c     **** 	't',0x00,
 173:usb/usb.c     **** 	'o',0x00,
 174:usb/usb.c     **** 	'm',0x00,
 175:usb/usb.c     **** 	' ',0x00,
 176:usb/usb.c     **** 	'H',0x00,
 177:usb/usb.c     **** 	'I',0x00,
 178:usb/usb.c     **** 	'D',0x00,
 179:usb/usb.c     **** 	' ',0x00,
 180:usb/usb.c     **** 	'C',0x00,
 181:usb/usb.c     **** 	'o',0x00,
 182:usb/usb.c     **** 	'n',0x00,
 183:usb/usb.c     **** 	'f',0x00,
 184:usb/usb.c     **** 	'i',0x00,
 185:usb/usb.c     **** 	'g',0x00
 186:usb/usb.c     **** };
 187:usb/usb.c     **** 
 188:usb/usb.c     **** uint8_t descStringInterface[] = 
 189:usb/usb.c     **** {
 190:usb/usb.c     **** 	0x2a,  
 191:usb/usb.c     **** 	0x03,
 192:usb/usb.c     **** 	'C',0x00,
 193:usb/usb.c     **** 	'u',0x00,
 194:usb/usb.c     **** 	's',0x00,
 195:usb/usb.c     **** 	't',0x00,
 196:usb/usb.c     **** 	'o',0x00,
 197:usb/usb.c     **** 	'm',0x00,
 198:usb/usb.c     **** 	' ',0x00,
 199:usb/usb.c     **** 	'H',0x00,
 200:usb/usb.c     **** 	'I',0x00,
 201:usb/usb.c     **** 	'D',0x00,
 202:usb/usb.c     **** 	' ',0x00,
ARM GAS  /tmp/ccNLaRzu.s 			page 5


 203:usb/usb.c     **** 	'I',0x00,
 204:usb/usb.c     **** 	'n',0x00,
 205:usb/usb.c     **** 	't',0x00,
 206:usb/usb.c     **** 	'e',0x00,
 207:usb/usb.c     **** 	'r',0x00,
 208:usb/usb.c     **** 	'f',0x00,
 209:usb/usb.c     **** 	'a',0x00,
 210:usb/usb.c     **** 	'c',0x00,
 211:usb/usb.c     **** 	'e',0x00
 212:usb/usb.c     **** };
 213:usb/usb.c     **** uint8_t descHIDReport[] = 
 214:usb/usb.c     **** { 
 215:usb/usb.c     ****     0x06, 0x00, 0xff,	/* USAGE_PAGE (Generic Desktop) */
 216:usb/usb.c     ****     0x09, 0x01,			/* USAGE (Vendor Usage 1) */
 217:usb/usb.c     ****     0xa1, 0x01,			/* COLLECTION (Application) */
 218:usb/usb.c     ****     0x85, 0x01,			/*   REPORT_ID (1) */
 219:usb/usb.c     ****     0x09, 0x01,			/*   USAGE (Vendor Usage 1) */
 220:usb/usb.c     ****     0x15, 0x00,			/*   LOGICAL_MINIMUM (0) */
 221:usb/usb.c     ****     0x25, 0x7f,			/*   LOGICAL_MAXIMUM (255) */
 222:usb/usb.c     ****     0x75, 0x08,			/*   REPORT_SIZE (256) */
 223:usb/usb.c     ****     0x95, 0x04,			/*   REPORT_COUNT (1) */
 224:usb/usb.c     ****     0x91, 0x92,			/*   OUTPUT (Data,Var,Abs,NLin,Vol) */
 225:usb/usb.c     ****     0x85, 0x02,			/*   REPORT_ID (2) */
 226:usb/usb.c     ****     0x09, 0x01,			/*   USAGE (Vendor Usage 1) */
 227:usb/usb.c     ****     0x15, 0x00,			/*   LOGICAL_MINIMUM (0) */
 228:usb/usb.c     ****     0x25, 0x7f,			/*   LOGICAL_MAXIMUM (127) */
 229:usb/usb.c     ****     0x75, 0x08,			/*   REPORT_SIZE (8) */
 230:usb/usb.c     ****     0x95, 0x04,			/*   REPORT_COUNT (4) */
 231:usb/usb.c     ****     0x81, 0x92,			/*   INPUT (Data,Var,Abs,NLin,Vol) */
 232:usb/usb.c     ****     0xc0				/* END COLLECTION */
 233:usb/usb.c     **** };
 234:usb/usb.c     **** 
 235:usb/usb.c     **** /* Prototype functoin */
 236:usb/usb.c     **** void USBWriteEP(uint8_t number);
 237:usb/usb.c     **** void USBReadEP(uint8_t *buffer, 
 238:usb/usb.c     **** 			   uint16_t len, 
 239:usb/usb.c     **** 			   uint8_t number);
 240:usb/usb.c     **** void USBRequest(USBSetupPacket *req, 
 241:usb/usb.c     **** 				uint8_t *pdata);
 242:usb/usb.c     **** void USBReset(void);
 243:usb/usb.c     **** void USBSetup(void);
 244:usb/usb.c     **** void USBCtrHandler(void);
 245:usb/usb.c     **** /* Public */
 246:usb/usb.c     **** void USBConfig(void){
  28              		.loc 1 246 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 247:usb/usb.c     **** 
 248:usb/usb.c     **** 	heap.cntMaxEp0 = 64;
  33              		.loc 1 248 0
  34 0000 4022     		movs	r2, #64
  35 0002 0D4B     		ldr	r3, .L2
  36 0004 A3F83C21 		strh	r2, [r3, #316]	@ movhi
  37              	.LVL0:
  38              	.LBB6:
ARM GAS  /tmp/ccNLaRzu.s 			page 6


  39              	.LBB7:
  40              		.file 2 "usb/../cmsis/core_cm3.h"
   1:usb/../cmsis/core_cm3.h **** /**************************************************************************//**
   2:usb/../cmsis/core_cm3.h ****  * @file     core_cm3.h
   3:usb/../cmsis/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:usb/../cmsis/core_cm3.h ****  * @version  V1.30
   5:usb/../cmsis/core_cm3.h ****  * @date     30. October 2009
   6:usb/../cmsis/core_cm3.h ****  *
   7:usb/../cmsis/core_cm3.h ****  * @note
   8:usb/../cmsis/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:usb/../cmsis/core_cm3.h ****  *
  10:usb/../cmsis/core_cm3.h ****  * @par
  11:usb/../cmsis/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:usb/../cmsis/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:usb/../cmsis/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  14:usb/../cmsis/core_cm3.h ****  *
  15:usb/../cmsis/core_cm3.h ****  * @par
  16:usb/../cmsis/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:usb/../cmsis/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:usb/../cmsis/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:usb/../cmsis/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:usb/../cmsis/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:usb/../cmsis/core_cm3.h ****  *
  22:usb/../cmsis/core_cm3.h ****  ******************************************************************************/
  23:usb/../cmsis/core_cm3.h **** 
  24:usb/../cmsis/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:usb/../cmsis/core_cm3.h **** #define __CM3_CORE_H__
  26:usb/../cmsis/core_cm3.h **** 
  27:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:usb/../cmsis/core_cm3.h ****  *
  29:usb/../cmsis/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:usb/../cmsis/core_cm3.h ****  *   - Error 10: \n
  31:usb/../cmsis/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:usb/../cmsis/core_cm3.h ****  *     Error 10: Expecting ';'
  33:usb/../cmsis/core_cm3.h ****  * .
  34:usb/../cmsis/core_cm3.h ****  *   - Error 530: \n
  35:usb/../cmsis/core_cm3.h ****  *     return(__regBasePri); \n
  36:usb/../cmsis/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:usb/../cmsis/core_cm3.h ****  * . 
  38:usb/../cmsis/core_cm3.h ****  *   - Error 550: \n
  39:usb/../cmsis/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:usb/../cmsis/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:usb/../cmsis/core_cm3.h ****  * .
  42:usb/../cmsis/core_cm3.h ****  *   - Error 754: \n
  43:usb/../cmsis/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:usb/../cmsis/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:usb/../cmsis/core_cm3.h ****  * .
  46:usb/../cmsis/core_cm3.h ****  *   - Error 750: \n
  47:usb/../cmsis/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:usb/../cmsis/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:usb/../cmsis/core_cm3.h ****  * .
  50:usb/../cmsis/core_cm3.h ****  *   - Error 528: \n
  51:usb/../cmsis/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:usb/../cmsis/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:usb/../cmsis/core_cm3.h ****  * .
  54:usb/../cmsis/core_cm3.h ****  *   - Error 751: \n
  55:usb/../cmsis/core_cm3.h ****  *     } InterruptType_Type; \n
ARM GAS  /tmp/ccNLaRzu.s 			page 7


  56:usb/../cmsis/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:usb/../cmsis/core_cm3.h ****  * .
  58:usb/../cmsis/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:usb/../cmsis/core_cm3.h ****  *
  60:usb/../cmsis/core_cm3.h ****  */
  61:usb/../cmsis/core_cm3.h **** 
  62:usb/../cmsis/core_cm3.h **** /*lint -save */
  63:usb/../cmsis/core_cm3.h **** /*lint -e10  */
  64:usb/../cmsis/core_cm3.h **** /*lint -e530 */
  65:usb/../cmsis/core_cm3.h **** /*lint -e550 */
  66:usb/../cmsis/core_cm3.h **** /*lint -e754 */
  67:usb/../cmsis/core_cm3.h **** /*lint -e750 */
  68:usb/../cmsis/core_cm3.h **** /*lint -e528 */
  69:usb/../cmsis/core_cm3.h **** /*lint -e751 */
  70:usb/../cmsis/core_cm3.h **** 
  71:usb/../cmsis/core_cm3.h **** 
  72:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:usb/../cmsis/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:usb/../cmsis/core_cm3.h ****     - CMSIS version number
  75:usb/../cmsis/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:usb/../cmsis/core_cm3.h ****     - Cortex-M core peripheral base address
  77:usb/../cmsis/core_cm3.h ****   @{
  78:usb/../cmsis/core_cm3.h ****  */
  79:usb/../cmsis/core_cm3.h **** 
  80:usb/../cmsis/core_cm3.h **** #ifdef __cplusplus
  81:usb/../cmsis/core_cm3.h ****  extern "C" {
  82:usb/../cmsis/core_cm3.h **** #endif 
  83:usb/../cmsis/core_cm3.h **** 
  84:usb/../cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:usb/../cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:usb/../cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:usb/../cmsis/core_cm3.h **** 
  88:usb/../cmsis/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:usb/../cmsis/core_cm3.h **** 
  90:usb/../cmsis/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:usb/../cmsis/core_cm3.h **** 
  92:usb/../cmsis/core_cm3.h **** #if defined (__ICCARM__)
  93:usb/../cmsis/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:usb/../cmsis/core_cm3.h **** #endif
  95:usb/../cmsis/core_cm3.h **** 
  96:usb/../cmsis/core_cm3.h **** 
  97:usb/../cmsis/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:usb/../cmsis/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:usb/../cmsis/core_cm3.h **** #endif
 100:usb/../cmsis/core_cm3.h **** 
 101:usb/../cmsis/core_cm3.h **** 
 102:usb/../cmsis/core_cm3.h **** 
 103:usb/../cmsis/core_cm3.h **** 
 104:usb/../cmsis/core_cm3.h **** /**
 105:usb/../cmsis/core_cm3.h ****  * IO definitions
 106:usb/../cmsis/core_cm3.h ****  *
 107:usb/../cmsis/core_cm3.h ****  * define access restrictions to peripheral registers
 108:usb/../cmsis/core_cm3.h ****  */
 109:usb/../cmsis/core_cm3.h **** 
 110:usb/../cmsis/core_cm3.h **** #ifdef __cplusplus
 111:usb/../cmsis/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:usb/../cmsis/core_cm3.h **** #else
ARM GAS  /tmp/ccNLaRzu.s 			page 8


 113:usb/../cmsis/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:usb/../cmsis/core_cm3.h **** #endif
 115:usb/../cmsis/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:usb/../cmsis/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:usb/../cmsis/core_cm3.h **** 
 118:usb/../cmsis/core_cm3.h **** 
 119:usb/../cmsis/core_cm3.h **** 
 120:usb/../cmsis/core_cm3.h **** /*******************************************************************************
 121:usb/../cmsis/core_cm3.h ****  *                 Register Abstraction
 122:usb/../cmsis/core_cm3.h ****  ******************************************************************************/
 123:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:usb/../cmsis/core_cm3.h ****  @{
 125:usb/../cmsis/core_cm3.h **** */
 126:usb/../cmsis/core_cm3.h **** 
 127:usb/../cmsis/core_cm3.h **** 
 128:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:usb/../cmsis/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:usb/../cmsis/core_cm3.h ****   @{
 131:usb/../cmsis/core_cm3.h ****  */
 132:usb/../cmsis/core_cm3.h **** typedef struct
 133:usb/../cmsis/core_cm3.h **** {
 134:usb/../cmsis/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED0[24];                                   
 136:usb/../cmsis/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:usb/../cmsis/core_cm3.h ****        uint32_t RSERVED1[24];                                    
 138:usb/../cmsis/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED2[24];                                   
 140:usb/../cmsis/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED3[24];                                   
 142:usb/../cmsis/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED4[56];                                   
 144:usb/../cmsis/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED5[644];                                  
 146:usb/../cmsis/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:usb/../cmsis/core_cm3.h **** }  NVIC_Type;                                               
 148:usb/../cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:usb/../cmsis/core_cm3.h **** 
 150:usb/../cmsis/core_cm3.h **** 
 151:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:usb/../cmsis/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:usb/../cmsis/core_cm3.h ****   @{
 154:usb/../cmsis/core_cm3.h ****  */
 155:usb/../cmsis/core_cm3.h **** typedef struct
 156:usb/../cmsis/core_cm3.h **** {
 157:usb/../cmsis/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:usb/../cmsis/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:usb/../cmsis/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:usb/../cmsis/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:usb/../cmsis/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:usb/../cmsis/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:usb/../cmsis/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:usb/../cmsis/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:usb/../cmsis/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:usb/../cmsis/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:usb/../cmsis/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:usb/../cmsis/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:usb/../cmsis/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
ARM GAS  /tmp/ccNLaRzu.s 			page 9


 170:usb/../cmsis/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:usb/../cmsis/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:usb/../cmsis/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:usb/../cmsis/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:usb/../cmsis/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:usb/../cmsis/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:usb/../cmsis/core_cm3.h **** } SCB_Type;                                                
 177:usb/../cmsis/core_cm3.h **** 
 178:usb/../cmsis/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:usb/../cmsis/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:usb/../cmsis/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:usb/../cmsis/core_cm3.h **** 
 182:usb/../cmsis/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:usb/../cmsis/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:usb/../cmsis/core_cm3.h **** 
 185:usb/../cmsis/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:usb/../cmsis/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:usb/../cmsis/core_cm3.h **** 
 188:usb/../cmsis/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:usb/../cmsis/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:usb/../cmsis/core_cm3.h **** 
 191:usb/../cmsis/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:usb/../cmsis/core_cm3.h **** 
 195:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:usb/../cmsis/core_cm3.h **** 
 198:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:usb/../cmsis/core_cm3.h **** 
 201:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:usb/../cmsis/core_cm3.h **** 
 204:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:usb/../cmsis/core_cm3.h **** 
 207:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:usb/../cmsis/core_cm3.h **** 
 210:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:usb/../cmsis/core_cm3.h **** 
 213:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:usb/../cmsis/core_cm3.h **** 
 216:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:usb/../cmsis/core_cm3.h **** 
 219:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:usb/../cmsis/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:usb/../cmsis/core_cm3.h **** 
 222:usb/../cmsis/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:usb/../cmsis/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:usb/../cmsis/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:usb/../cmsis/core_cm3.h **** 
 226:usb/../cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
ARM GAS  /tmp/ccNLaRzu.s 			page 10


 227:usb/../cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:usb/../cmsis/core_cm3.h **** 
 229:usb/../cmsis/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:usb/../cmsis/core_cm3.h **** 
 233:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:usb/../cmsis/core_cm3.h **** 
 236:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:usb/../cmsis/core_cm3.h **** 
 239:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:usb/../cmsis/core_cm3.h **** 
 242:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:usb/../cmsis/core_cm3.h **** 
 245:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:usb/../cmsis/core_cm3.h **** 
 248:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:usb/../cmsis/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:usb/../cmsis/core_cm3.h **** 
 251:usb/../cmsis/core_cm3.h **** /* SCB System Control Register Definitions */
 252:usb/../cmsis/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:usb/../cmsis/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:usb/../cmsis/core_cm3.h **** 
 255:usb/../cmsis/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:usb/../cmsis/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:usb/../cmsis/core_cm3.h **** 
 258:usb/../cmsis/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:usb/../cmsis/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:usb/../cmsis/core_cm3.h **** 
 261:usb/../cmsis/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:usb/../cmsis/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:usb/../cmsis/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:usb/../cmsis/core_cm3.h **** 
 265:usb/../cmsis/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:usb/../cmsis/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:usb/../cmsis/core_cm3.h **** 
 268:usb/../cmsis/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:usb/../cmsis/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:usb/../cmsis/core_cm3.h **** 
 271:usb/../cmsis/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:usb/../cmsis/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:usb/../cmsis/core_cm3.h **** 
 274:usb/../cmsis/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:usb/../cmsis/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:usb/../cmsis/core_cm3.h **** 
 277:usb/../cmsis/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:usb/../cmsis/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:usb/../cmsis/core_cm3.h **** 
 280:usb/../cmsis/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:usb/../cmsis/core_cm3.h **** 
ARM GAS  /tmp/ccNLaRzu.s 			page 11


 284:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:usb/../cmsis/core_cm3.h **** 
 287:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:usb/../cmsis/core_cm3.h **** 
 290:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:usb/../cmsis/core_cm3.h **** 
 293:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:usb/../cmsis/core_cm3.h **** 
 296:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:usb/../cmsis/core_cm3.h **** 
 299:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:usb/../cmsis/core_cm3.h **** 
 302:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:usb/../cmsis/core_cm3.h **** 
 305:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:usb/../cmsis/core_cm3.h **** 
 308:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:usb/../cmsis/core_cm3.h **** 
 311:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:usb/../cmsis/core_cm3.h ****                                      
 314:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:usb/../cmsis/core_cm3.h **** 
 317:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:usb/../cmsis/core_cm3.h **** 
 320:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:usb/../cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:usb/../cmsis/core_cm3.h **** 
 323:usb/../cmsis/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:usb/../cmsis/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:usb/../cmsis/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:usb/../cmsis/core_cm3.h **** 
 327:usb/../cmsis/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:usb/../cmsis/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:usb/../cmsis/core_cm3.h **** 
 330:usb/../cmsis/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:usb/../cmsis/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:usb/../cmsis/core_cm3.h **** 
 333:usb/../cmsis/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:usb/../cmsis/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:usb/../cmsis/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:usb/../cmsis/core_cm3.h **** 
 337:usb/../cmsis/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:usb/../cmsis/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:usb/../cmsis/core_cm3.h **** 
 340:usb/../cmsis/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
ARM GAS  /tmp/ccNLaRzu.s 			page 12


 341:usb/../cmsis/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:usb/../cmsis/core_cm3.h **** 
 343:usb/../cmsis/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:usb/../cmsis/core_cm3.h **** 
 347:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:usb/../cmsis/core_cm3.h **** 
 350:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:usb/../cmsis/core_cm3.h **** 
 353:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:usb/../cmsis/core_cm3.h **** 
 356:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:usb/../cmsis/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:usb/../cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:usb/../cmsis/core_cm3.h **** 
 360:usb/../cmsis/core_cm3.h **** 
 361:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:usb/../cmsis/core_cm3.h ****   memory mapped structure for SysTick
 363:usb/../cmsis/core_cm3.h ****   @{
 364:usb/../cmsis/core_cm3.h ****  */
 365:usb/../cmsis/core_cm3.h **** typedef struct
 366:usb/../cmsis/core_cm3.h **** {
 367:usb/../cmsis/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:usb/../cmsis/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:usb/../cmsis/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:usb/../cmsis/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:usb/../cmsis/core_cm3.h **** } SysTick_Type;
 372:usb/../cmsis/core_cm3.h **** 
 373:usb/../cmsis/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:usb/../cmsis/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:usb/../cmsis/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:usb/../cmsis/core_cm3.h **** 
 377:usb/../cmsis/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:usb/../cmsis/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:usb/../cmsis/core_cm3.h **** 
 380:usb/../cmsis/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:usb/../cmsis/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:usb/../cmsis/core_cm3.h **** 
 383:usb/../cmsis/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:usb/../cmsis/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:usb/../cmsis/core_cm3.h **** 
 386:usb/../cmsis/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:usb/../cmsis/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:usb/../cmsis/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:usb/../cmsis/core_cm3.h **** 
 390:usb/../cmsis/core_cm3.h **** /* SysTick Current Register Definitions */
 391:usb/../cmsis/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:usb/../cmsis/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:usb/../cmsis/core_cm3.h **** 
 394:usb/../cmsis/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:usb/../cmsis/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:usb/../cmsis/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:usb/../cmsis/core_cm3.h **** 
ARM GAS  /tmp/ccNLaRzu.s 			page 13


 398:usb/../cmsis/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:usb/../cmsis/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:usb/../cmsis/core_cm3.h **** 
 401:usb/../cmsis/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:usb/../cmsis/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:usb/../cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:usb/../cmsis/core_cm3.h **** 
 405:usb/../cmsis/core_cm3.h **** 
 406:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:usb/../cmsis/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:usb/../cmsis/core_cm3.h ****   @{
 409:usb/../cmsis/core_cm3.h ****  */
 410:usb/../cmsis/core_cm3.h **** typedef struct
 411:usb/../cmsis/core_cm3.h **** {
 412:usb/../cmsis/core_cm3.h ****   __O  union  
 413:usb/../cmsis/core_cm3.h ****   {
 414:usb/../cmsis/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:usb/../cmsis/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:usb/../cmsis/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:usb/../cmsis/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED0[864];                                 
 419:usb/../cmsis/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED1[15];                                  
 421:usb/../cmsis/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED2[15];                                  
 423:usb/../cmsis/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED3[29];                                  
 425:usb/../cmsis/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:usb/../cmsis/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:usb/../cmsis/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED4[43];                                  
 429:usb/../cmsis/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:usb/../cmsis/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED5[6];                                   
 432:usb/../cmsis/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:usb/../cmsis/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:usb/../cmsis/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:usb/../cmsis/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:usb/../cmsis/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:usb/../cmsis/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:usb/../cmsis/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:usb/../cmsis/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:usb/../cmsis/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:usb/../cmsis/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:usb/../cmsis/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:usb/../cmsis/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:usb/../cmsis/core_cm3.h **** } ITM_Type;                                                
 445:usb/../cmsis/core_cm3.h **** 
 446:usb/../cmsis/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:usb/../cmsis/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:usb/../cmsis/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:usb/../cmsis/core_cm3.h **** 
 450:usb/../cmsis/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:usb/../cmsis/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:usb/../cmsis/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:usb/../cmsis/core_cm3.h **** 
 454:usb/../cmsis/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
ARM GAS  /tmp/ccNLaRzu.s 			page 14


 455:usb/../cmsis/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:usb/../cmsis/core_cm3.h **** 
 457:usb/../cmsis/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:usb/../cmsis/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:usb/../cmsis/core_cm3.h **** 
 460:usb/../cmsis/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:usb/../cmsis/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:usb/../cmsis/core_cm3.h **** 
 463:usb/../cmsis/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:usb/../cmsis/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:usb/../cmsis/core_cm3.h **** 
 466:usb/../cmsis/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:usb/../cmsis/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:usb/../cmsis/core_cm3.h **** 
 469:usb/../cmsis/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:usb/../cmsis/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:usb/../cmsis/core_cm3.h **** 
 472:usb/../cmsis/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:usb/../cmsis/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:usb/../cmsis/core_cm3.h **** 
 475:usb/../cmsis/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:usb/../cmsis/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:usb/../cmsis/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:usb/../cmsis/core_cm3.h **** 
 479:usb/../cmsis/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:usb/../cmsis/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:usb/../cmsis/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:usb/../cmsis/core_cm3.h **** 
 483:usb/../cmsis/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:usb/../cmsis/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:usb/../cmsis/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:usb/../cmsis/core_cm3.h **** 
 487:usb/../cmsis/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:usb/../cmsis/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:usb/../cmsis/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:usb/../cmsis/core_cm3.h **** 
 491:usb/../cmsis/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:usb/../cmsis/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:usb/../cmsis/core_cm3.h **** 
 494:usb/../cmsis/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:usb/../cmsis/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:usb/../cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:usb/../cmsis/core_cm3.h **** 
 498:usb/../cmsis/core_cm3.h **** 
 499:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:usb/../cmsis/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:usb/../cmsis/core_cm3.h ****   @{
 502:usb/../cmsis/core_cm3.h ****  */
 503:usb/../cmsis/core_cm3.h **** typedef struct
 504:usb/../cmsis/core_cm3.h **** {
 505:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED0;
 506:usb/../cmsis/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:usb/../cmsis/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:usb/../cmsis/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:usb/../cmsis/core_cm3.h **** #else
 510:usb/../cmsis/core_cm3.h ****        uint32_t RESERVED1;
 511:usb/../cmsis/core_cm3.h **** #endif
ARM GAS  /tmp/ccNLaRzu.s 			page 15


 512:usb/../cmsis/core_cm3.h **** } InterruptType_Type;
 513:usb/../cmsis/core_cm3.h **** 
 514:usb/../cmsis/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:usb/../cmsis/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:usb/../cmsis/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:usb/../cmsis/core_cm3.h **** 
 518:usb/../cmsis/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:usb/../cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:usb/../cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:usb/../cmsis/core_cm3.h **** 
 522:usb/../cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:usb/../cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:usb/../cmsis/core_cm3.h **** 
 525:usb/../cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:usb/../cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:usb/../cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:usb/../cmsis/core_cm3.h **** 
 529:usb/../cmsis/core_cm3.h **** 
 530:usb/../cmsis/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:usb/../cmsis/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:usb/../cmsis/core_cm3.h ****   @{
 534:usb/../cmsis/core_cm3.h ****  */
 535:usb/../cmsis/core_cm3.h **** typedef struct
 536:usb/../cmsis/core_cm3.h **** {
 537:usb/../cmsis/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:usb/../cmsis/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:usb/../cmsis/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:usb/../cmsis/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:usb/../cmsis/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:usb/../cmsis/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:usb/../cmsis/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:usb/../cmsis/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:usb/../cmsis/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:usb/../cmsis/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:usb/../cmsis/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:usb/../cmsis/core_cm3.h **** } MPU_Type;                                                
 549:usb/../cmsis/core_cm3.h **** 
 550:usb/../cmsis/core_cm3.h **** /* MPU Type Register */
 551:usb/../cmsis/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:usb/../cmsis/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:usb/../cmsis/core_cm3.h **** 
 554:usb/../cmsis/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:usb/../cmsis/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:usb/../cmsis/core_cm3.h **** 
 557:usb/../cmsis/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:usb/../cmsis/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:usb/../cmsis/core_cm3.h **** 
 560:usb/../cmsis/core_cm3.h **** /* MPU Control Register */
 561:usb/../cmsis/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:usb/../cmsis/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:usb/../cmsis/core_cm3.h **** 
 564:usb/../cmsis/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:usb/../cmsis/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:usb/../cmsis/core_cm3.h **** 
 567:usb/../cmsis/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:usb/../cmsis/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
ARM GAS  /tmp/ccNLaRzu.s 			page 16


 569:usb/../cmsis/core_cm3.h **** 
 570:usb/../cmsis/core_cm3.h **** /* MPU Region Number Register */
 571:usb/../cmsis/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:usb/../cmsis/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:usb/../cmsis/core_cm3.h **** 
 574:usb/../cmsis/core_cm3.h **** /* MPU Region Base Address Register */
 575:usb/../cmsis/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:usb/../cmsis/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:usb/../cmsis/core_cm3.h **** 
 578:usb/../cmsis/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:usb/../cmsis/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:usb/../cmsis/core_cm3.h **** 
 581:usb/../cmsis/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:usb/../cmsis/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:usb/../cmsis/core_cm3.h **** 
 584:usb/../cmsis/core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:usb/../cmsis/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:usb/../cmsis/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:usb/../cmsis/core_cm3.h **** 
 588:usb/../cmsis/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:usb/../cmsis/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:usb/../cmsis/core_cm3.h **** 
 591:usb/../cmsis/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:usb/../cmsis/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:usb/../cmsis/core_cm3.h **** 
 594:usb/../cmsis/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:usb/../cmsis/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:usb/../cmsis/core_cm3.h **** 
 597:usb/../cmsis/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:usb/../cmsis/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:usb/../cmsis/core_cm3.h **** 
 600:usb/../cmsis/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:usb/../cmsis/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:usb/../cmsis/core_cm3.h **** 
 603:usb/../cmsis/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:usb/../cmsis/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:usb/../cmsis/core_cm3.h **** 
 606:usb/../cmsis/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:usb/../cmsis/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:usb/../cmsis/core_cm3.h **** 
 609:usb/../cmsis/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:usb/../cmsis/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:usb/../cmsis/core_cm3.h **** 
 612:usb/../cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:usb/../cmsis/core_cm3.h **** #endif
 614:usb/../cmsis/core_cm3.h **** 
 615:usb/../cmsis/core_cm3.h **** 
 616:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:usb/../cmsis/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:usb/../cmsis/core_cm3.h ****   @{
 619:usb/../cmsis/core_cm3.h ****  */
 620:usb/../cmsis/core_cm3.h **** typedef struct
 621:usb/../cmsis/core_cm3.h **** {
 622:usb/../cmsis/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:usb/../cmsis/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:usb/../cmsis/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:usb/../cmsis/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
ARM GAS  /tmp/ccNLaRzu.s 			page 17


 626:usb/../cmsis/core_cm3.h **** } CoreDebug_Type;
 627:usb/../cmsis/core_cm3.h **** 
 628:usb/../cmsis/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:usb/../cmsis/core_cm3.h **** 
 632:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:usb/../cmsis/core_cm3.h **** 
 635:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:usb/../cmsis/core_cm3.h **** 
 638:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:usb/../cmsis/core_cm3.h **** 
 641:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:usb/../cmsis/core_cm3.h **** 
 644:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:usb/../cmsis/core_cm3.h **** 
 647:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:usb/../cmsis/core_cm3.h **** 
 650:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:usb/../cmsis/core_cm3.h **** 
 653:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:usb/../cmsis/core_cm3.h **** 
 656:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:usb/../cmsis/core_cm3.h **** 
 659:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:usb/../cmsis/core_cm3.h **** 
 662:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:usb/../cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:usb/../cmsis/core_cm3.h **** 
 665:usb/../cmsis/core_cm3.h **** /* Debug Core Register Selector Register */
 666:usb/../cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:usb/../cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:usb/../cmsis/core_cm3.h **** 
 669:usb/../cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:usb/../cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:usb/../cmsis/core_cm3.h **** 
 672:usb/../cmsis/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:usb/../cmsis/core_cm3.h **** 
 676:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:usb/../cmsis/core_cm3.h **** 
 679:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:usb/../cmsis/core_cm3.h **** 
 682:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
ARM GAS  /tmp/ccNLaRzu.s 			page 18


 683:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:usb/../cmsis/core_cm3.h **** 
 685:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:usb/../cmsis/core_cm3.h **** 
 688:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:usb/../cmsis/core_cm3.h **** 
 691:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:usb/../cmsis/core_cm3.h **** 
 694:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:usb/../cmsis/core_cm3.h **** 
 697:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:usb/../cmsis/core_cm3.h **** 
 700:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:usb/../cmsis/core_cm3.h **** 
 703:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:usb/../cmsis/core_cm3.h **** 
 706:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:usb/../cmsis/core_cm3.h **** 
 709:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:usb/../cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:usb/../cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:usb/../cmsis/core_cm3.h **** 
 713:usb/../cmsis/core_cm3.h **** 
 714:usb/../cmsis/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:usb/../cmsis/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:usb/../cmsis/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:usb/../cmsis/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:usb/../cmsis/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:usb/../cmsis/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:usb/../cmsis/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:usb/../cmsis/core_cm3.h **** 
 722:usb/../cmsis/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:usb/../cmsis/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:usb/../cmsis/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:usb/../cmsis/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:usb/../cmsis/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:usb/../cmsis/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:usb/../cmsis/core_cm3.h **** 
 729:usb/../cmsis/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:usb/../cmsis/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:usb/../cmsis/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:usb/../cmsis/core_cm3.h **** #endif
 733:usb/../cmsis/core_cm3.h **** 
 734:usb/../cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:usb/../cmsis/core_cm3.h **** 
 736:usb/../cmsis/core_cm3.h **** 
 737:usb/../cmsis/core_cm3.h **** /*******************************************************************************
 738:usb/../cmsis/core_cm3.h ****  *                Hardware Abstraction Layer
 739:usb/../cmsis/core_cm3.h ****  ******************************************************************************/
ARM GAS  /tmp/ccNLaRzu.s 			page 19


 740:usb/../cmsis/core_cm3.h **** 
 741:usb/../cmsis/core_cm3.h **** #if defined ( __CC_ARM   )
 742:usb/../cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:usb/../cmsis/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:usb/../cmsis/core_cm3.h **** 
 745:usb/../cmsis/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:usb/../cmsis/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:usb/../cmsis/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:usb/../cmsis/core_cm3.h **** 
 749:usb/../cmsis/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:usb/../cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:usb/../cmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:usb/../cmsis/core_cm3.h **** 
 753:usb/../cmsis/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:usb/../cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:usb/../cmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:usb/../cmsis/core_cm3.h **** 
 757:usb/../cmsis/core_cm3.h **** #endif
 758:usb/../cmsis/core_cm3.h **** 
 759:usb/../cmsis/core_cm3.h **** 
 760:usb/../cmsis/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:usb/../cmsis/core_cm3.h **** 
 762:usb/../cmsis/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:usb/../cmsis/core_cm3.h **** /* ARM armcc specific functions */
 764:usb/../cmsis/core_cm3.h **** 
 765:usb/../cmsis/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:usb/../cmsis/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:usb/../cmsis/core_cm3.h **** 
 768:usb/../cmsis/core_cm3.h **** #define __NOP                             __nop
 769:usb/../cmsis/core_cm3.h **** #define __WFI                             __wfi
 770:usb/../cmsis/core_cm3.h **** #define __WFE                             __wfe
 771:usb/../cmsis/core_cm3.h **** #define __SEV                             __sev
 772:usb/../cmsis/core_cm3.h **** #define __ISB()                           __isb(0)
 773:usb/../cmsis/core_cm3.h **** #define __DSB()                           __dsb(0)
 774:usb/../cmsis/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:usb/../cmsis/core_cm3.h **** #define __REV                             __rev
 776:usb/../cmsis/core_cm3.h **** #define __RBIT                            __rbit
 777:usb/../cmsis/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:usb/../cmsis/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:usb/../cmsis/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:usb/../cmsis/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:usb/../cmsis/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:usb/../cmsis/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:usb/../cmsis/core_cm3.h **** 
 784:usb/../cmsis/core_cm3.h **** 
 785:usb/../cmsis/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:usb/../cmsis/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:usb/../cmsis/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:usb/../cmsis/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:usb/../cmsis/core_cm3.h **** 
 790:usb/../cmsis/core_cm3.h **** 
 791:usb/../cmsis/core_cm3.h **** /**
 792:usb/../cmsis/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:usb/../cmsis/core_cm3.h ****  *
 794:usb/../cmsis/core_cm3.h ****  * @return ProcessStackPointer
 795:usb/../cmsis/core_cm3.h ****  *
 796:usb/../cmsis/core_cm3.h ****  * Return the actual process stack pointer
ARM GAS  /tmp/ccNLaRzu.s 			page 20


 797:usb/../cmsis/core_cm3.h ****  */
 798:usb/../cmsis/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:usb/../cmsis/core_cm3.h **** 
 800:usb/../cmsis/core_cm3.h **** /**
 801:usb/../cmsis/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:usb/../cmsis/core_cm3.h ****  *
 803:usb/../cmsis/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:usb/../cmsis/core_cm3.h ****  *
 805:usb/../cmsis/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 806:usb/../cmsis/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:usb/../cmsis/core_cm3.h ****  */
 808:usb/../cmsis/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:usb/../cmsis/core_cm3.h **** 
 810:usb/../cmsis/core_cm3.h **** /**
 811:usb/../cmsis/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:usb/../cmsis/core_cm3.h ****  *
 813:usb/../cmsis/core_cm3.h ****  * @return Main Stack Pointer
 814:usb/../cmsis/core_cm3.h ****  *
 815:usb/../cmsis/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:usb/../cmsis/core_cm3.h ****  * Cortex processor register
 817:usb/../cmsis/core_cm3.h ****  */
 818:usb/../cmsis/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:usb/../cmsis/core_cm3.h **** 
 820:usb/../cmsis/core_cm3.h **** /**
 821:usb/../cmsis/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:usb/../cmsis/core_cm3.h ****  *
 823:usb/../cmsis/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:usb/../cmsis/core_cm3.h ****  *
 825:usb/../cmsis/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 826:usb/../cmsis/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:usb/../cmsis/core_cm3.h ****  */
 828:usb/../cmsis/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:usb/../cmsis/core_cm3.h **** 
 830:usb/../cmsis/core_cm3.h **** /**
 831:usb/../cmsis/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:usb/../cmsis/core_cm3.h ****  *
 833:usb/../cmsis/core_cm3.h ****  * @param   value  value to reverse
 834:usb/../cmsis/core_cm3.h ****  * @return         reversed value
 835:usb/../cmsis/core_cm3.h ****  *
 836:usb/../cmsis/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:usb/../cmsis/core_cm3.h ****  */
 838:usb/../cmsis/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:usb/../cmsis/core_cm3.h **** 
 840:usb/../cmsis/core_cm3.h **** /**
 841:usb/../cmsis/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:usb/../cmsis/core_cm3.h ****  *
 843:usb/../cmsis/core_cm3.h ****  * @param   value  value to reverse
 844:usb/../cmsis/core_cm3.h ****  * @return         reversed value
 845:usb/../cmsis/core_cm3.h ****  *
 846:usb/../cmsis/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:usb/../cmsis/core_cm3.h ****  */
 848:usb/../cmsis/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:usb/../cmsis/core_cm3.h **** 
 850:usb/../cmsis/core_cm3.h **** 
 851:usb/../cmsis/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:usb/../cmsis/core_cm3.h **** 
 853:usb/../cmsis/core_cm3.h **** /**
ARM GAS  /tmp/ccNLaRzu.s 			page 21


 854:usb/../cmsis/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:usb/../cmsis/core_cm3.h ****  *
 856:usb/../cmsis/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:usb/../cmsis/core_cm3.h ****  */
 858:usb/../cmsis/core_cm3.h **** extern void __CLREX(void);
 859:usb/../cmsis/core_cm3.h **** 
 860:usb/../cmsis/core_cm3.h **** /**
 861:usb/../cmsis/core_cm3.h ****  * @brief  Return the Base Priority value
 862:usb/../cmsis/core_cm3.h ****  *
 863:usb/../cmsis/core_cm3.h ****  * @return BasePriority
 864:usb/../cmsis/core_cm3.h ****  *
 865:usb/../cmsis/core_cm3.h ****  * Return the content of the base priority register
 866:usb/../cmsis/core_cm3.h ****  */
 867:usb/../cmsis/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:usb/../cmsis/core_cm3.h **** 
 869:usb/../cmsis/core_cm3.h **** /**
 870:usb/../cmsis/core_cm3.h ****  * @brief  Set the Base Priority value
 871:usb/../cmsis/core_cm3.h ****  *
 872:usb/../cmsis/core_cm3.h ****  * @param  basePri  BasePriority
 873:usb/../cmsis/core_cm3.h ****  *
 874:usb/../cmsis/core_cm3.h ****  * Set the base priority register
 875:usb/../cmsis/core_cm3.h ****  */
 876:usb/../cmsis/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:usb/../cmsis/core_cm3.h **** 
 878:usb/../cmsis/core_cm3.h **** /**
 879:usb/../cmsis/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:usb/../cmsis/core_cm3.h ****  *
 881:usb/../cmsis/core_cm3.h ****  * @return PriMask
 882:usb/../cmsis/core_cm3.h ****  *
 883:usb/../cmsis/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:usb/../cmsis/core_cm3.h ****  */
 885:usb/../cmsis/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:usb/../cmsis/core_cm3.h **** 
 887:usb/../cmsis/core_cm3.h **** /**
 888:usb/../cmsis/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:usb/../cmsis/core_cm3.h ****  *
 890:usb/../cmsis/core_cm3.h ****  * @param   priMask  PriMask
 891:usb/../cmsis/core_cm3.h ****  *
 892:usb/../cmsis/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:usb/../cmsis/core_cm3.h ****  */
 894:usb/../cmsis/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:usb/../cmsis/core_cm3.h **** 
 896:usb/../cmsis/core_cm3.h **** /**
 897:usb/../cmsis/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:usb/../cmsis/core_cm3.h ****  *
 899:usb/../cmsis/core_cm3.h ****  * @return FaultMask
 900:usb/../cmsis/core_cm3.h ****  *
 901:usb/../cmsis/core_cm3.h ****  * Return the content of the fault mask register
 902:usb/../cmsis/core_cm3.h ****  */
 903:usb/../cmsis/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:usb/../cmsis/core_cm3.h **** 
 905:usb/../cmsis/core_cm3.h **** /**
 906:usb/../cmsis/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:usb/../cmsis/core_cm3.h ****  *
 908:usb/../cmsis/core_cm3.h ****  * @param  faultMask faultMask value
 909:usb/../cmsis/core_cm3.h ****  *
 910:usb/../cmsis/core_cm3.h ****  * Set the fault mask register
ARM GAS  /tmp/ccNLaRzu.s 			page 22


 911:usb/../cmsis/core_cm3.h ****  */
 912:usb/../cmsis/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:usb/../cmsis/core_cm3.h **** 
 914:usb/../cmsis/core_cm3.h **** /**
 915:usb/../cmsis/core_cm3.h ****  * @brief  Return the Control Register value
 916:usb/../cmsis/core_cm3.h ****  * 
 917:usb/../cmsis/core_cm3.h ****  * @return Control value
 918:usb/../cmsis/core_cm3.h ****  *
 919:usb/../cmsis/core_cm3.h ****  * Return the content of the control register
 920:usb/../cmsis/core_cm3.h ****  */
 921:usb/../cmsis/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:usb/../cmsis/core_cm3.h **** 
 923:usb/../cmsis/core_cm3.h **** /**
 924:usb/../cmsis/core_cm3.h ****  * @brief  Set the Control Register value
 925:usb/../cmsis/core_cm3.h ****  *
 926:usb/../cmsis/core_cm3.h ****  * @param  control  Control value
 927:usb/../cmsis/core_cm3.h ****  *
 928:usb/../cmsis/core_cm3.h ****  * Set the control register
 929:usb/../cmsis/core_cm3.h ****  */
 930:usb/../cmsis/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:usb/../cmsis/core_cm3.h **** 
 932:usb/../cmsis/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:usb/../cmsis/core_cm3.h **** 
 934:usb/../cmsis/core_cm3.h **** /**
 935:usb/../cmsis/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:usb/../cmsis/core_cm3.h ****  *
 937:usb/../cmsis/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:usb/../cmsis/core_cm3.h ****  */
 939:usb/../cmsis/core_cm3.h **** #define __CLREX                           __clrex
 940:usb/../cmsis/core_cm3.h **** 
 941:usb/../cmsis/core_cm3.h **** /**
 942:usb/../cmsis/core_cm3.h ****  * @brief  Return the Base Priority value
 943:usb/../cmsis/core_cm3.h ****  *
 944:usb/../cmsis/core_cm3.h ****  * @return BasePriority
 945:usb/../cmsis/core_cm3.h ****  *
 946:usb/../cmsis/core_cm3.h ****  * Return the content of the base priority register
 947:usb/../cmsis/core_cm3.h ****  */
 948:usb/../cmsis/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:usb/../cmsis/core_cm3.h **** {
 950:usb/../cmsis/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:usb/../cmsis/core_cm3.h ****   return(__regBasePri);
 952:usb/../cmsis/core_cm3.h **** }
 953:usb/../cmsis/core_cm3.h **** 
 954:usb/../cmsis/core_cm3.h **** /**
 955:usb/../cmsis/core_cm3.h ****  * @brief  Set the Base Priority value
 956:usb/../cmsis/core_cm3.h ****  *
 957:usb/../cmsis/core_cm3.h ****  * @param  basePri  BasePriority
 958:usb/../cmsis/core_cm3.h ****  *
 959:usb/../cmsis/core_cm3.h ****  * Set the base priority register
 960:usb/../cmsis/core_cm3.h ****  */
 961:usb/../cmsis/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:usb/../cmsis/core_cm3.h **** {
 963:usb/../cmsis/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:usb/../cmsis/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:usb/../cmsis/core_cm3.h **** }
 966:usb/../cmsis/core_cm3.h **** 
 967:usb/../cmsis/core_cm3.h **** /**
ARM GAS  /tmp/ccNLaRzu.s 			page 23


 968:usb/../cmsis/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:usb/../cmsis/core_cm3.h ****  *
 970:usb/../cmsis/core_cm3.h ****  * @return PriMask
 971:usb/../cmsis/core_cm3.h ****  *
 972:usb/../cmsis/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:usb/../cmsis/core_cm3.h ****  */
 974:usb/../cmsis/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:usb/../cmsis/core_cm3.h **** {
 976:usb/../cmsis/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:usb/../cmsis/core_cm3.h ****   return(__regPriMask);
 978:usb/../cmsis/core_cm3.h **** }
 979:usb/../cmsis/core_cm3.h **** 
 980:usb/../cmsis/core_cm3.h **** /**
 981:usb/../cmsis/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:usb/../cmsis/core_cm3.h ****  *
 983:usb/../cmsis/core_cm3.h ****  * @param  priMask  PriMask
 984:usb/../cmsis/core_cm3.h ****  *
 985:usb/../cmsis/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:usb/../cmsis/core_cm3.h ****  */
 987:usb/../cmsis/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:usb/../cmsis/core_cm3.h **** {
 989:usb/../cmsis/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:usb/../cmsis/core_cm3.h ****   __regPriMask = (priMask);
 991:usb/../cmsis/core_cm3.h **** }
 992:usb/../cmsis/core_cm3.h **** 
 993:usb/../cmsis/core_cm3.h **** /**
 994:usb/../cmsis/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:usb/../cmsis/core_cm3.h ****  *
 996:usb/../cmsis/core_cm3.h ****  * @return FaultMask
 997:usb/../cmsis/core_cm3.h ****  *
 998:usb/../cmsis/core_cm3.h ****  * Return the content of the fault mask register
 999:usb/../cmsis/core_cm3.h ****  */
1000:usb/../cmsis/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:usb/../cmsis/core_cm3.h **** {
1002:usb/../cmsis/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:usb/../cmsis/core_cm3.h ****   return(__regFaultMask);
1004:usb/../cmsis/core_cm3.h **** }
1005:usb/../cmsis/core_cm3.h **** 
1006:usb/../cmsis/core_cm3.h **** /**
1007:usb/../cmsis/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:usb/../cmsis/core_cm3.h ****  *
1009:usb/../cmsis/core_cm3.h ****  * @param  faultMask  faultMask value
1010:usb/../cmsis/core_cm3.h ****  *
1011:usb/../cmsis/core_cm3.h ****  * Set the fault mask register
1012:usb/../cmsis/core_cm3.h ****  */
1013:usb/../cmsis/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:usb/../cmsis/core_cm3.h **** {
1015:usb/../cmsis/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:usb/../cmsis/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:usb/../cmsis/core_cm3.h **** }
1018:usb/../cmsis/core_cm3.h **** 
1019:usb/../cmsis/core_cm3.h **** /**
1020:usb/../cmsis/core_cm3.h ****  * @brief  Return the Control Register value
1021:usb/../cmsis/core_cm3.h ****  * 
1022:usb/../cmsis/core_cm3.h ****  * @return Control value
1023:usb/../cmsis/core_cm3.h ****  *
1024:usb/../cmsis/core_cm3.h ****  * Return the content of the control register
ARM GAS  /tmp/ccNLaRzu.s 			page 24


1025:usb/../cmsis/core_cm3.h ****  */
1026:usb/../cmsis/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:usb/../cmsis/core_cm3.h **** {
1028:usb/../cmsis/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:usb/../cmsis/core_cm3.h ****   return(__regControl);
1030:usb/../cmsis/core_cm3.h **** }
1031:usb/../cmsis/core_cm3.h **** 
1032:usb/../cmsis/core_cm3.h **** /**
1033:usb/../cmsis/core_cm3.h ****  * @brief  Set the Control Register value
1034:usb/../cmsis/core_cm3.h ****  *
1035:usb/../cmsis/core_cm3.h ****  * @param  control  Control value
1036:usb/../cmsis/core_cm3.h ****  *
1037:usb/../cmsis/core_cm3.h ****  * Set the control register
1038:usb/../cmsis/core_cm3.h ****  */
1039:usb/../cmsis/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:usb/../cmsis/core_cm3.h **** {
1041:usb/../cmsis/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:usb/../cmsis/core_cm3.h ****   __regControl = control;
1043:usb/../cmsis/core_cm3.h **** }
1044:usb/../cmsis/core_cm3.h **** 
1045:usb/../cmsis/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
1046:usb/../cmsis/core_cm3.h **** 
1047:usb/../cmsis/core_cm3.h **** 
1048:usb/../cmsis/core_cm3.h **** 
1049:usb/../cmsis/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:usb/../cmsis/core_cm3.h **** /* IAR iccarm specific functions */
1051:usb/../cmsis/core_cm3.h **** 
1052:usb/../cmsis/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:usb/../cmsis/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:usb/../cmsis/core_cm3.h **** 
1055:usb/../cmsis/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:usb/../cmsis/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:usb/../cmsis/core_cm3.h **** 
1058:usb/../cmsis/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:usb/../cmsis/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:usb/../cmsis/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:usb/../cmsis/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:usb/../cmsis/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:usb/../cmsis/core_cm3.h **** 
1064:usb/../cmsis/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:usb/../cmsis/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:usb/../cmsis/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:usb/../cmsis/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:usb/../cmsis/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:usb/../cmsis/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:usb/../cmsis/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:usb/../cmsis/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:usb/../cmsis/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:usb/../cmsis/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:usb/../cmsis/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:usb/../cmsis/core_cm3.h **** 
1076:usb/../cmsis/core_cm3.h **** 
1077:usb/../cmsis/core_cm3.h **** /**
1078:usb/../cmsis/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:usb/../cmsis/core_cm3.h ****  *
1080:usb/../cmsis/core_cm3.h ****  * @return ProcessStackPointer
1081:usb/../cmsis/core_cm3.h ****  *
ARM GAS  /tmp/ccNLaRzu.s 			page 25


1082:usb/../cmsis/core_cm3.h ****  * Return the actual process stack pointer
1083:usb/../cmsis/core_cm3.h ****  */
1084:usb/../cmsis/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:usb/../cmsis/core_cm3.h **** 
1086:usb/../cmsis/core_cm3.h **** /**
1087:usb/../cmsis/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:usb/../cmsis/core_cm3.h ****  *
1089:usb/../cmsis/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:usb/../cmsis/core_cm3.h ****  *
1091:usb/../cmsis/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1092:usb/../cmsis/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:usb/../cmsis/core_cm3.h ****  */
1094:usb/../cmsis/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:usb/../cmsis/core_cm3.h **** 
1096:usb/../cmsis/core_cm3.h **** /**
1097:usb/../cmsis/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:usb/../cmsis/core_cm3.h ****  *
1099:usb/../cmsis/core_cm3.h ****  * @return Main Stack Pointer
1100:usb/../cmsis/core_cm3.h ****  *
1101:usb/../cmsis/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:usb/../cmsis/core_cm3.h ****  * Cortex processor register
1103:usb/../cmsis/core_cm3.h ****  */
1104:usb/../cmsis/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:usb/../cmsis/core_cm3.h **** 
1106:usb/../cmsis/core_cm3.h **** /**
1107:usb/../cmsis/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:usb/../cmsis/core_cm3.h ****  *
1109:usb/../cmsis/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:usb/../cmsis/core_cm3.h ****  *
1111:usb/../cmsis/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1112:usb/../cmsis/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:usb/../cmsis/core_cm3.h ****  */
1114:usb/../cmsis/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:usb/../cmsis/core_cm3.h **** 
1116:usb/../cmsis/core_cm3.h **** /**
1117:usb/../cmsis/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:usb/../cmsis/core_cm3.h ****  *
1119:usb/../cmsis/core_cm3.h ****  * @param  value  value to reverse
1120:usb/../cmsis/core_cm3.h ****  * @return        reversed value
1121:usb/../cmsis/core_cm3.h ****  *
1122:usb/../cmsis/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:usb/../cmsis/core_cm3.h ****  */
1124:usb/../cmsis/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:usb/../cmsis/core_cm3.h **** 
1126:usb/../cmsis/core_cm3.h **** /**
1127:usb/../cmsis/core_cm3.h ****  * @brief  Reverse bit order of value
1128:usb/../cmsis/core_cm3.h ****  *
1129:usb/../cmsis/core_cm3.h ****  * @param  value  value to reverse
1130:usb/../cmsis/core_cm3.h ****  * @return        reversed value
1131:usb/../cmsis/core_cm3.h ****  *
1132:usb/../cmsis/core_cm3.h ****  * Reverse bit order of value
1133:usb/../cmsis/core_cm3.h ****  */
1134:usb/../cmsis/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:usb/../cmsis/core_cm3.h **** 
1136:usb/../cmsis/core_cm3.h **** /**
1137:usb/../cmsis/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:usb/../cmsis/core_cm3.h ****  *
ARM GAS  /tmp/ccNLaRzu.s 			page 26


1139:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1140:usb/../cmsis/core_cm3.h ****  * @return        value of (*address)
1141:usb/../cmsis/core_cm3.h ****  *
1142:usb/../cmsis/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:usb/../cmsis/core_cm3.h ****  */
1144:usb/../cmsis/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:usb/../cmsis/core_cm3.h **** 
1146:usb/../cmsis/core_cm3.h **** /**
1147:usb/../cmsis/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:usb/../cmsis/core_cm3.h ****  *
1149:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1150:usb/../cmsis/core_cm3.h ****  * @return        value of (*address)
1151:usb/../cmsis/core_cm3.h ****  *
1152:usb/../cmsis/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:usb/../cmsis/core_cm3.h ****  */
1154:usb/../cmsis/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:usb/../cmsis/core_cm3.h **** 
1156:usb/../cmsis/core_cm3.h **** /**
1157:usb/../cmsis/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:usb/../cmsis/core_cm3.h ****  *
1159:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1160:usb/../cmsis/core_cm3.h ****  * @return        value of (*address)
1161:usb/../cmsis/core_cm3.h ****  *
1162:usb/../cmsis/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:usb/../cmsis/core_cm3.h ****  */
1164:usb/../cmsis/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:usb/../cmsis/core_cm3.h **** 
1166:usb/../cmsis/core_cm3.h **** /**
1167:usb/../cmsis/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:usb/../cmsis/core_cm3.h ****  *
1169:usb/../cmsis/core_cm3.h ****  * @param  value  value to store
1170:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1171:usb/../cmsis/core_cm3.h ****  * @return        successful / failed
1172:usb/../cmsis/core_cm3.h ****  *
1173:usb/../cmsis/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:usb/../cmsis/core_cm3.h ****  */
1175:usb/../cmsis/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:usb/../cmsis/core_cm3.h **** 
1177:usb/../cmsis/core_cm3.h **** /**
1178:usb/../cmsis/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:usb/../cmsis/core_cm3.h ****  *
1180:usb/../cmsis/core_cm3.h ****  * @param  value  value to store
1181:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1182:usb/../cmsis/core_cm3.h ****  * @return        successful / failed
1183:usb/../cmsis/core_cm3.h ****  *
1184:usb/../cmsis/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:usb/../cmsis/core_cm3.h ****  */
1186:usb/../cmsis/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:usb/../cmsis/core_cm3.h **** 
1188:usb/../cmsis/core_cm3.h **** /**
1189:usb/../cmsis/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:usb/../cmsis/core_cm3.h ****  *
1191:usb/../cmsis/core_cm3.h ****  * @param  value  value to store
1192:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1193:usb/../cmsis/core_cm3.h ****  * @return        successful / failed
1194:usb/../cmsis/core_cm3.h ****  *
1195:usb/../cmsis/core_cm3.h ****  * Exclusive STR command for 32 bit values
ARM GAS  /tmp/ccNLaRzu.s 			page 27


1196:usb/../cmsis/core_cm3.h ****  */
1197:usb/../cmsis/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:usb/../cmsis/core_cm3.h **** 
1199:usb/../cmsis/core_cm3.h **** 
1200:usb/../cmsis/core_cm3.h **** 
1201:usb/../cmsis/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:usb/../cmsis/core_cm3.h **** /* GNU gcc specific functions */
1203:usb/../cmsis/core_cm3.h **** 
1204:usb/../cmsis/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:usb/../cmsis/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:usb/../cmsis/core_cm3.h **** 
1207:usb/../cmsis/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:usb/../cmsis/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:usb/../cmsis/core_cm3.h **** 
1210:usb/../cmsis/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:usb/../cmsis/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
1212:usb/../cmsis/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
1213:usb/../cmsis/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
1214:usb/../cmsis/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
1215:usb/../cmsis/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
1216:usb/../cmsis/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
1217:usb/../cmsis/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
1218:usb/../cmsis/core_cm3.h **** 
1219:usb/../cmsis/core_cm3.h **** 
1220:usb/../cmsis/core_cm3.h **** /**
1221:usb/../cmsis/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1222:usb/../cmsis/core_cm3.h ****  *
1223:usb/../cmsis/core_cm3.h ****  * @return ProcessStackPointer
1224:usb/../cmsis/core_cm3.h ****  *
1225:usb/../cmsis/core_cm3.h ****  * Return the actual process stack pointer
1226:usb/../cmsis/core_cm3.h ****  */
1227:usb/../cmsis/core_cm3.h **** extern uint32_t __get_PSP(void);
1228:usb/../cmsis/core_cm3.h **** 
1229:usb/../cmsis/core_cm3.h **** /**
1230:usb/../cmsis/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1231:usb/../cmsis/core_cm3.h ****  *
1232:usb/../cmsis/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1233:usb/../cmsis/core_cm3.h ****  *
1234:usb/../cmsis/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1235:usb/../cmsis/core_cm3.h ****  * (process stack pointer) Cortex processor register
1236:usb/../cmsis/core_cm3.h ****  */
1237:usb/../cmsis/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1238:usb/../cmsis/core_cm3.h **** 
1239:usb/../cmsis/core_cm3.h **** /**
1240:usb/../cmsis/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1241:usb/../cmsis/core_cm3.h ****  *
1242:usb/../cmsis/core_cm3.h ****  * @return Main Stack Pointer
1243:usb/../cmsis/core_cm3.h ****  *
1244:usb/../cmsis/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1245:usb/../cmsis/core_cm3.h ****  * Cortex processor register
1246:usb/../cmsis/core_cm3.h ****  */
1247:usb/../cmsis/core_cm3.h **** extern uint32_t __get_MSP(void);
1248:usb/../cmsis/core_cm3.h **** 
1249:usb/../cmsis/core_cm3.h **** /**
1250:usb/../cmsis/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1251:usb/../cmsis/core_cm3.h ****  *
1252:usb/../cmsis/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
ARM GAS  /tmp/ccNLaRzu.s 			page 28


1253:usb/../cmsis/core_cm3.h ****  *
1254:usb/../cmsis/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1255:usb/../cmsis/core_cm3.h ****  * (main stack pointer) Cortex processor register
1256:usb/../cmsis/core_cm3.h ****  */
1257:usb/../cmsis/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1258:usb/../cmsis/core_cm3.h **** 
1259:usb/../cmsis/core_cm3.h **** /**
1260:usb/../cmsis/core_cm3.h ****  * @brief  Return the Base Priority value
1261:usb/../cmsis/core_cm3.h ****  *
1262:usb/../cmsis/core_cm3.h ****  * @return BasePriority
1263:usb/../cmsis/core_cm3.h ****  *
1264:usb/../cmsis/core_cm3.h ****  * Return the content of the base priority register
1265:usb/../cmsis/core_cm3.h ****  */
1266:usb/../cmsis/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
1267:usb/../cmsis/core_cm3.h **** 
1268:usb/../cmsis/core_cm3.h **** /**
1269:usb/../cmsis/core_cm3.h ****  * @brief  Set the Base Priority value
1270:usb/../cmsis/core_cm3.h ****  *
1271:usb/../cmsis/core_cm3.h ****  * @param  basePri  BasePriority
1272:usb/../cmsis/core_cm3.h ****  *
1273:usb/../cmsis/core_cm3.h ****  * Set the base priority register
1274:usb/../cmsis/core_cm3.h ****  */
1275:usb/../cmsis/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
1276:usb/../cmsis/core_cm3.h **** 
1277:usb/../cmsis/core_cm3.h **** /**
1278:usb/../cmsis/core_cm3.h ****  * @brief  Return the Priority Mask value
1279:usb/../cmsis/core_cm3.h ****  *
1280:usb/../cmsis/core_cm3.h ****  * @return PriMask
1281:usb/../cmsis/core_cm3.h ****  *
1282:usb/../cmsis/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
1283:usb/../cmsis/core_cm3.h ****  */
1284:usb/../cmsis/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
1285:usb/../cmsis/core_cm3.h **** 
1286:usb/../cmsis/core_cm3.h **** /**
1287:usb/../cmsis/core_cm3.h ****  * @brief  Set the Priority Mask value
1288:usb/../cmsis/core_cm3.h ****  *
1289:usb/../cmsis/core_cm3.h ****  * @param  priMask  PriMask
1290:usb/../cmsis/core_cm3.h ****  *
1291:usb/../cmsis/core_cm3.h ****  * Set the priority mask bit in the priority mask register
1292:usb/../cmsis/core_cm3.h ****  */
1293:usb/../cmsis/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
1294:usb/../cmsis/core_cm3.h **** 
1295:usb/../cmsis/core_cm3.h **** /**
1296:usb/../cmsis/core_cm3.h ****  * @brief  Return the Fault Mask value
1297:usb/../cmsis/core_cm3.h ****  *
1298:usb/../cmsis/core_cm3.h ****  * @return FaultMask
1299:usb/../cmsis/core_cm3.h ****  *
1300:usb/../cmsis/core_cm3.h ****  * Return the content of the fault mask register
1301:usb/../cmsis/core_cm3.h ****  */
1302:usb/../cmsis/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
1303:usb/../cmsis/core_cm3.h **** 
1304:usb/../cmsis/core_cm3.h **** /**
1305:usb/../cmsis/core_cm3.h ****  * @brief  Set the Fault Mask value
1306:usb/../cmsis/core_cm3.h ****  *
1307:usb/../cmsis/core_cm3.h ****  * @param  faultMask  faultMask value
1308:usb/../cmsis/core_cm3.h ****  *
1309:usb/../cmsis/core_cm3.h ****  * Set the fault mask register
ARM GAS  /tmp/ccNLaRzu.s 			page 29


1310:usb/../cmsis/core_cm3.h ****  */
1311:usb/../cmsis/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
1312:usb/../cmsis/core_cm3.h **** 
1313:usb/../cmsis/core_cm3.h **** /**
1314:usb/../cmsis/core_cm3.h ****  * @brief  Return the Control Register value
1315:usb/../cmsis/core_cm3.h **** * 
1316:usb/../cmsis/core_cm3.h **** *  @return Control value
1317:usb/../cmsis/core_cm3.h ****  *
1318:usb/../cmsis/core_cm3.h ****  * Return the content of the control register
1319:usb/../cmsis/core_cm3.h ****  */
1320:usb/../cmsis/core_cm3.h **** extern uint32_t __get_CONTROL(void);
1321:usb/../cmsis/core_cm3.h **** 
1322:usb/../cmsis/core_cm3.h **** /**
1323:usb/../cmsis/core_cm3.h ****  * @brief  Set the Control Register value
1324:usb/../cmsis/core_cm3.h ****  *
1325:usb/../cmsis/core_cm3.h ****  * @param  control  Control value
1326:usb/../cmsis/core_cm3.h ****  *
1327:usb/../cmsis/core_cm3.h ****  * Set the control register
1328:usb/../cmsis/core_cm3.h ****  */
1329:usb/../cmsis/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
1330:usb/../cmsis/core_cm3.h **** 
1331:usb/../cmsis/core_cm3.h **** /**
1332:usb/../cmsis/core_cm3.h ****  * @brief  Reverse byte order in integer value
1333:usb/../cmsis/core_cm3.h ****  *
1334:usb/../cmsis/core_cm3.h ****  * @param  value  value to reverse
1335:usb/../cmsis/core_cm3.h ****  * @return        reversed value
1336:usb/../cmsis/core_cm3.h ****  *
1337:usb/../cmsis/core_cm3.h ****  * Reverse byte order in integer value
1338:usb/../cmsis/core_cm3.h ****  */
1339:usb/../cmsis/core_cm3.h **** extern uint32_t __REV(uint32_t value);
1340:usb/../cmsis/core_cm3.h **** 
1341:usb/../cmsis/core_cm3.h **** /**
1342:usb/../cmsis/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1343:usb/../cmsis/core_cm3.h ****  *
1344:usb/../cmsis/core_cm3.h ****  * @param  value  value to reverse
1345:usb/../cmsis/core_cm3.h ****  * @return        reversed value
1346:usb/../cmsis/core_cm3.h ****  *
1347:usb/../cmsis/core_cm3.h ****  * Reverse byte order in unsigned short value
1348:usb/../cmsis/core_cm3.h ****  */
1349:usb/../cmsis/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1350:usb/../cmsis/core_cm3.h **** 
1351:usb/../cmsis/core_cm3.h **** /**
1352:usb/../cmsis/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
1353:usb/../cmsis/core_cm3.h ****  *
1354:usb/../cmsis/core_cm3.h ****  * @param  value  value to reverse
1355:usb/../cmsis/core_cm3.h ****  * @return        reversed value
1356:usb/../cmsis/core_cm3.h ****  *
1357:usb/../cmsis/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
1358:usb/../cmsis/core_cm3.h ****  */
1359:usb/../cmsis/core_cm3.h **** extern int32_t __REVSH(int16_t value);
1360:usb/../cmsis/core_cm3.h **** 
1361:usb/../cmsis/core_cm3.h **** /**
1362:usb/../cmsis/core_cm3.h ****  * @brief  Reverse bit order of value
1363:usb/../cmsis/core_cm3.h ****  *
1364:usb/../cmsis/core_cm3.h ****  * @param  value  value to reverse
1365:usb/../cmsis/core_cm3.h ****  * @return        reversed value
1366:usb/../cmsis/core_cm3.h ****  *
ARM GAS  /tmp/ccNLaRzu.s 			page 30


1367:usb/../cmsis/core_cm3.h ****  * Reverse bit order of value
1368:usb/../cmsis/core_cm3.h ****  */
1369:usb/../cmsis/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1370:usb/../cmsis/core_cm3.h **** 
1371:usb/../cmsis/core_cm3.h **** /**
1372:usb/../cmsis/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1373:usb/../cmsis/core_cm3.h ****  *
1374:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1375:usb/../cmsis/core_cm3.h ****  * @return        value of (*address)
1376:usb/../cmsis/core_cm3.h ****  *
1377:usb/../cmsis/core_cm3.h ****  * Exclusive LDR command for 8 bit value
1378:usb/../cmsis/core_cm3.h ****  */
1379:usb/../cmsis/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1380:usb/../cmsis/core_cm3.h **** 
1381:usb/../cmsis/core_cm3.h **** /**
1382:usb/../cmsis/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1383:usb/../cmsis/core_cm3.h ****  *
1384:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1385:usb/../cmsis/core_cm3.h ****  * @return        value of (*address)
1386:usb/../cmsis/core_cm3.h ****  *
1387:usb/../cmsis/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1388:usb/../cmsis/core_cm3.h ****  */
1389:usb/../cmsis/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1390:usb/../cmsis/core_cm3.h **** 
1391:usb/../cmsis/core_cm3.h **** /**
1392:usb/../cmsis/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1393:usb/../cmsis/core_cm3.h ****  *
1394:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1395:usb/../cmsis/core_cm3.h ****  * @return        value of (*address)
1396:usb/../cmsis/core_cm3.h ****  *
1397:usb/../cmsis/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1398:usb/../cmsis/core_cm3.h ****  */
1399:usb/../cmsis/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1400:usb/../cmsis/core_cm3.h **** 
1401:usb/../cmsis/core_cm3.h **** /**
1402:usb/../cmsis/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1403:usb/../cmsis/core_cm3.h ****  *
1404:usb/../cmsis/core_cm3.h ****  * @param  value  value to store
1405:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1406:usb/../cmsis/core_cm3.h ****  * @return        successful / failed
1407:usb/../cmsis/core_cm3.h ****  *
1408:usb/../cmsis/core_cm3.h ****  * Exclusive STR command for 8 bit values
1409:usb/../cmsis/core_cm3.h ****  */
1410:usb/../cmsis/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1411:usb/../cmsis/core_cm3.h **** 
1412:usb/../cmsis/core_cm3.h **** /**
1413:usb/../cmsis/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1414:usb/../cmsis/core_cm3.h ****  *
1415:usb/../cmsis/core_cm3.h ****  * @param  value  value to store
1416:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1417:usb/../cmsis/core_cm3.h ****  * @return        successful / failed
1418:usb/../cmsis/core_cm3.h ****  *
1419:usb/../cmsis/core_cm3.h ****  * Exclusive STR command for 16 bit values
1420:usb/../cmsis/core_cm3.h ****  */
1421:usb/../cmsis/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1422:usb/../cmsis/core_cm3.h **** 
1423:usb/../cmsis/core_cm3.h **** /**
ARM GAS  /tmp/ccNLaRzu.s 			page 31


1424:usb/../cmsis/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1425:usb/../cmsis/core_cm3.h ****  *
1426:usb/../cmsis/core_cm3.h ****  * @param  value  value to store
1427:usb/../cmsis/core_cm3.h ****  * @param  *addr  address pointer
1428:usb/../cmsis/core_cm3.h ****  * @return        successful / failed
1429:usb/../cmsis/core_cm3.h ****  *
1430:usb/../cmsis/core_cm3.h ****  * Exclusive STR command for 32 bit values
1431:usb/../cmsis/core_cm3.h ****  */
1432:usb/../cmsis/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1433:usb/../cmsis/core_cm3.h **** 
1434:usb/../cmsis/core_cm3.h **** 
1435:usb/../cmsis/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1436:usb/../cmsis/core_cm3.h **** /* TASKING carm specific functions */
1437:usb/../cmsis/core_cm3.h **** 
1438:usb/../cmsis/core_cm3.h **** /*
1439:usb/../cmsis/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1440:usb/../cmsis/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1441:usb/../cmsis/core_cm3.h ****  * Including the CMSIS ones.
1442:usb/../cmsis/core_cm3.h ****  */
1443:usb/../cmsis/core_cm3.h **** 
1444:usb/../cmsis/core_cm3.h **** #endif
1445:usb/../cmsis/core_cm3.h **** 
1446:usb/../cmsis/core_cm3.h **** 
1447:usb/../cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
1448:usb/../cmsis/core_cm3.h ****   Core  Function Interface containing:
1449:usb/../cmsis/core_cm3.h ****   - Core NVIC Functions
1450:usb/../cmsis/core_cm3.h ****   - Core SysTick Functions
1451:usb/../cmsis/core_cm3.h ****   - Core Reset Functions
1452:usb/../cmsis/core_cm3.h **** */
1453:usb/../cmsis/core_cm3.h **** /*@{*/
1454:usb/../cmsis/core_cm3.h **** 
1455:usb/../cmsis/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1456:usb/../cmsis/core_cm3.h **** 
1457:usb/../cmsis/core_cm3.h **** /**
1458:usb/../cmsis/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1459:usb/../cmsis/core_cm3.h ****  *
1460:usb/../cmsis/core_cm3.h ****  * @param  PriorityGroup is priority grouping field
1461:usb/../cmsis/core_cm3.h ****  *
1462:usb/../cmsis/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1463:usb/../cmsis/core_cm3.h ****  * The parameter priority_grouping is assigned to the field 
1464:usb/../cmsis/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1465:usb/../cmsis/core_cm3.h ****  * In case of a conflict between priority grouping and available
1466:usb/../cmsis/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1467:usb/../cmsis/core_cm3.h ****  */
1468:usb/../cmsis/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1469:usb/../cmsis/core_cm3.h **** {
1470:usb/../cmsis/core_cm3.h ****   uint32_t reg_value;
1471:usb/../cmsis/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1472:usb/../cmsis/core_cm3.h ****   
1473:usb/../cmsis/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1474:usb/../cmsis/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1475:usb/../cmsis/core_cm3.h ****   reg_value  =  (reg_value                       |
1476:usb/../cmsis/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) | 
1477:usb/../cmsis/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1478:usb/../cmsis/core_cm3.h ****   SCB->AIRCR =  reg_value;
1479:usb/../cmsis/core_cm3.h **** }
1480:usb/../cmsis/core_cm3.h **** 
ARM GAS  /tmp/ccNLaRzu.s 			page 32


1481:usb/../cmsis/core_cm3.h **** /**
1482:usb/../cmsis/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1483:usb/../cmsis/core_cm3.h ****  *
1484:usb/../cmsis/core_cm3.h ****  * @return priority grouping field 
1485:usb/../cmsis/core_cm3.h ****  *
1486:usb/../cmsis/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1487:usb/../cmsis/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1488:usb/../cmsis/core_cm3.h ****  */
1489:usb/../cmsis/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1490:usb/../cmsis/core_cm3.h **** {
1491:usb/../cmsis/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1492:usb/../cmsis/core_cm3.h **** }
1493:usb/../cmsis/core_cm3.h **** 
1494:usb/../cmsis/core_cm3.h **** /**
1495:usb/../cmsis/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1496:usb/../cmsis/core_cm3.h ****  *
1497:usb/../cmsis/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to enable
1498:usb/../cmsis/core_cm3.h ****  *
1499:usb/../cmsis/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1500:usb/../cmsis/core_cm3.h ****  * The interrupt number cannot be a negative value.
1501:usb/../cmsis/core_cm3.h ****  */
1502:usb/../cmsis/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1503:usb/../cmsis/core_cm3.h **** {
1504:usb/../cmsis/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
1505:usb/../cmsis/core_cm3.h **** }
1506:usb/../cmsis/core_cm3.h **** 
1507:usb/../cmsis/core_cm3.h **** /**
1508:usb/../cmsis/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1509:usb/../cmsis/core_cm3.h ****  * 
1510:usb/../cmsis/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to disable
1511:usb/../cmsis/core_cm3.h ****  * 
1512:usb/../cmsis/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1513:usb/../cmsis/core_cm3.h ****  * The interrupt number cannot be a negative value.
1514:usb/../cmsis/core_cm3.h ****  */
1515:usb/../cmsis/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1516:usb/../cmsis/core_cm3.h **** {
1517:usb/../cmsis/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  41              		.loc 2 1517 0
  42 0008 0C49     		ldr	r1, .L2+4
  43 000a 4FF48010 		mov	r0, #1048576
  44 000e C1F88000 		str	r0, [r1, #128]
  45              	.LVL1:
  46              	.LBE7:
  47              	.LBE6:
 249:usb/usb.c     **** 	
 250:usb/usb.c     **** 	NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 251:usb/usb.c     ****     RCC->APB1ENR |= RCC_APB1ENR_USBEN;
  48              		.loc 1 251 0
  49 0012 0B4A     		ldr	r2, .L2+8
  50 0014 D369     		ldr	r3, [r2, #28]
  51 0016 43F40003 		orr	r3, r3, #8388608
  52 001a D361     		str	r3, [r2, #28]
 252:usb/usb.c     **** 
 253:usb/usb.c     ****     USB->CNTR   = USB_CNTR_FRES; /* Force USB Reset */
  53              		.loc 1 253 0
  54 001c 094B     		ldr	r3, .L2+12
  55 001e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccNLaRzu.s 			page 33


  56 0020 0122     		movs	r2, #1
  57 0022 1A64     		str	r2, [r3, #64]
 254:usb/usb.c     ****     USB->BTABLE = 0;
  58              		.loc 1 254 0
  59 0024 0022     		movs	r2, #0
  60 0026 1A65     		str	r2, [r3, #80]
 255:usb/usb.c     ****     USB->DADDR  = 0;
  61              		.loc 1 255 0
  62 0028 DA64     		str	r2, [r3, #76]
 256:usb/usb.c     ****     USB->ISTR   = 0;
  63              		.loc 1 256 0
  64 002a 5A64     		str	r2, [r3, #68]
 257:usb/usb.c     ****     USB->CNTR   = USB_CNTR_RESETM; 
  65              		.loc 1 257 0
  66 002c 4FF48062 		mov	r2, #1024
  67 0030 1A64     		str	r2, [r3, #64]
  68              	.LVL2:
  69              	.LBB8:
  70              	.LBB9:
1504:usb/../cmsis/core_cm3.h **** }
  71              		.loc 2 1504 0
  72 0032 0860     		str	r0, [r1]
  73              	.LVL3:
  74 0034 7047     		bx	lr
  75              	.L3:
  76 0036 00BF     		.align	2
  77              	.L2:
  78 0038 00000000 		.word	heap
  79 003c 00E100E0 		.word	-536813312
  80 0040 00100240 		.word	1073876992
  81 0044 00000000 		.word	.LANCHOR0
  82              	.LBE9:
  83              	.LBE8:
  84              		.cfi_endproc
  85              	.LFE29:
  87              		.section	.text.USBWrite,"ax",%progbits
  88              		.align	2
  89              		.global	USBWrite
  90              		.thumb
  91              		.thumb_func
  93              	USBWrite:
  94              	.LFB31:
 258:usb/usb.c     ****     NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 259:usb/usb.c     **** }
 260:usb/usb.c     **** void USBRead(uint8_t *buff){
 261:usb/usb.c     **** 	heap.cntRx = (uint8_t)EPBuffTable[1]->COUNT_RX;
 262:usb/usb.c     **** 	USBReadEP((uint8_t *)buff, heap.cntRx, 1);
 263:usb/usb.c     **** 	USB->EPR[1] = USB_EP_INTERRUPT | USB_EP_RX_VALID;
 264:usb/usb.c     **** }
 265:usb/usb.c     **** void USBWrite(uint8_t *buff){
  95              		.loc 1 265 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		@ link register save eliminated.
 100              	.LVL4:
 101 0000 7047     		bx	lr
ARM GAS  /tmp/ccNLaRzu.s 			page 34


 102              		.cfi_endproc
 103              	.LFE31:
 105 0002 00BF     		.section	.text.USBGetString,"ax",%progbits
 106              		.align	2
 107              		.global	USBGetString
 108              		.thumb
 109              		.thumb_func
 111              	USBGetString:
 112              	.LFB32:
 266:usb/usb.c     **** 
 267:usb/usb.c     **** }
 268:usb/usb.c     **** 
 269:usb/usb.c     **** /* Private */
 270:usb/usb.c     **** 
 271:usb/usb.c     **** void USBGetString(uint8_t *str, uint8_t *buff, uint16_t *len)
 272:usb/usb.c     **** {
 113              		.loc 1 272 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118              	.LVL5:
 273:usb/usb.c     ****   uint8_t cnt = 0;
 274:usb/usb.c     ****   
 275:usb/usb.c     ****   if (str != 0) 
 119              		.loc 1 275 0
 120 0000 A0B1     		cbz	r0, .L11
 272:usb/usb.c     ****   uint8_t cnt = 0;
 121              		.loc 1 272 0
 122 0002 10B4     		push	{r4}
 123              	.LCFI0:
 124              		.cfi_def_cfa_offset 4
 125              		.cfi_offset 4, -4
 126 0004 0446     		mov	r4, r0
 276:usb/usb.c     ****   {
 277:usb/usb.c     ****     *len =  sizeof(str);    
 127              		.loc 1 277 0
 128 0006 0423     		movs	r3, #4
 129 0008 1380     		strh	r3, [r2]	@ movhi
 130              	.LVL6:
 278:usb/usb.c     ****     buff[cnt++] = *len;
 131              		.loc 1 278 0
 132 000a 0B70     		strb	r3, [r1]
 133              	.LVL7:
 279:usb/usb.c     ****     buff[cnt++] =  0x03;
 134              		.loc 1 279 0
 135 000c 0323     		movs	r3, #3
 136 000e 4B70     		strb	r3, [r1, #1]
 137 0010 0223     		movs	r3, #2
 280:usb/usb.c     ****     
 281:usb/usb.c     ****     while (*str != '\0') 
 138              		.loc 1 281 0
 139 0012 07E0     		b	.L7
 140              	.LVL8:
 141              	.L8:
 282:usb/usb.c     ****     {
 283:usb/usb.c     ****       buff[cnt++] = *str++;
ARM GAS  /tmp/ccNLaRzu.s 			page 35


 142              		.loc 1 283 0
 143 0014 5A1C     		adds	r2, r3, #1
 144 0016 D2B2     		uxtb	r2, r2
 145              	.LVL9:
 146 0018 0134     		adds	r4, r4, #1
 147              	.LVL10:
 148 001a C854     		strb	r0, [r1, r3]
 284:usb/usb.c     ****       buff[cnt++] =  0x00;
 149              		.loc 1 284 0
 150 001c 0233     		adds	r3, r3, #2
 151 001e DBB2     		uxtb	r3, r3
 152              	.LVL11:
 153 0020 0020     		movs	r0, #0
 154 0022 8854     		strb	r0, [r1, r2]
 155              	.LVL12:
 156              	.L7:
 281:usb/usb.c     ****     {
 157              		.loc 1 281 0
 158 0024 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 159 0026 0028     		cmp	r0, #0
 160 0028 F4D1     		bne	.L8
 285:usb/usb.c     ****     }
 286:usb/usb.c     ****   } 
 287:usb/usb.c     **** }
 161              		.loc 1 287 0
 162 002a 10BC     		pop	{r4}
 163              	.LCFI1:
 164              		.cfi_restore 4
 165              		.cfi_def_cfa_offset 0
 166              	.LVL13:
 167              	.L11:
 168 002c 7047     		bx	lr
 169              		.cfi_endproc
 170              	.LFE32:
 172 002e 00BF     		.section	.text.USBWriteEP,"ax",%progbits
 173              		.align	2
 174              		.global	USBWriteEP
 175              		.thumb
 176              		.thumb_func
 178              	USBWriteEP:
 179              	.LFB33:
 288:usb/usb.c     **** 
 289:usb/usb.c     **** void USBWriteEP(uint8_t number){
 180              		.loc 1 289 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184              		@ link register save eliminated.
 185              	.LVL14:
 186 0000 30B4     		push	{r4, r5}
 187              	.LCFI2:
 188              		.cfi_def_cfa_offset 8
 189              		.cfi_offset 4, -8
 190              		.cfi_offset 5, -4
 290:usb/usb.c     **** 	uint16_t len = heap.cntTx >= heap.cntMaxEp0 ? heap.cntMaxEp0 : heap.cntTx;
 191              		.loc 1 290 0
 192 0002 164B     		ldr	r3, .L16
ARM GAS  /tmp/ccNLaRzu.s 			page 36


 193 0004 B3F83C51 		ldrh	r5, [r3, #316]
 194 0008 9A88     		ldrh	r2, [r3, #4]
 195 000a 9542     		cmp	r5, r2
 196 000c 28BF     		it	cs
 197 000e 1546     		movcs	r5, r2
 198              	.LVL15:
 291:usb/usb.c     **** 	uint16_t nBytes = (len + 1) >> 1;
 199              		.loc 1 291 0
 200 0010 691C     		adds	r1, r5, #1
 201 0012 C1F34F01 		ubfx	r1, r1, #1, #16
 202              	.LVL16:
 292:usb/usb.c     ****     uint32_t *addrTx = (uint32_t *)((uint16_t)EPBuffTable[number]->ADDR_TX * 2 + USB_PMA_ADDR);
 203              		.loc 1 292 0
 204 0016 124A     		ldr	r2, .L16+4
 205 0018 52F82020 		ldr	r2, [r2, r0, lsl #2]
 206 001c 1268     		ldr	r2, [r2]
 207 001e 92B2     		uxth	r2, r2
 208 0020 02F10052 		add	r2, r2, #536870912
 209 0024 02F54052 		add	r2, r2, #12288
 210 0028 5200     		lsls	r2, r2, #1
 211              	.LVL17:
 293:usb/usb.c     ****     uint16_t *temp = (uint16_t *)heap.buffTx;
 212              		.loc 1 293 0
 213 002a 1C68     		ldr	r4, [r3]
 214              	.LVL18:
 294:usb/usb.c     ****     while(nBytes--)
 215              		.loc 1 294 0
 216 002c 04E0     		b	.L13
 217              	.LVL19:
 218              	.L14:
 295:usb/usb.c     ****         *addrTx++ = *temp++;
 219              		.loc 1 295 0
 220 002e 2188     		ldrh	r1, [r4]
 221 0030 1160     		str	r1, [r2]
 294:usb/usb.c     ****     while(nBytes--)
 222              		.loc 1 294 0
 223 0032 1946     		mov	r1, r3
 224              		.loc 1 295 0
 225 0034 0234     		adds	r4, r4, #2
 226              	.LVL20:
 227 0036 0432     		adds	r2, r2, #4
 228              	.LVL21:
 229              	.L13:
 294:usb/usb.c     ****     while(nBytes--)
 230              		.loc 1 294 0
 231 0038 4B1E     		subs	r3, r1, #1
 232 003a 9BB2     		uxth	r3, r3
 233              	.LVL22:
 234 003c 0029     		cmp	r1, #0
 235 003e F6D1     		bne	.L14
 296:usb/usb.c     ****     EPBuffTable[number]->COUNT_TX = len;
 236              		.loc 1 296 0
 237 0040 074B     		ldr	r3, .L16+4
 238              	.LVL23:
 239 0042 53F82030 		ldr	r3, [r3, r0, lsl #2]
 240 0046 5D60     		str	r5, [r3, #4]
 297:usb/usb.c     ****     heap.cntTx -= len;
ARM GAS  /tmp/ccNLaRzu.s 			page 37


 241              		.loc 1 297 0
 242 0048 044B     		ldr	r3, .L16
 243 004a 9A88     		ldrh	r2, [r3, #4]
 244              	.LVL24:
 245 004c 521B     		subs	r2, r2, r5
 246 004e 9A80     		strh	r2, [r3, #4]	@ movhi
 298:usb/usb.c     ****     heap.buffTx += len;
 247              		.loc 1 298 0
 248 0050 1A68     		ldr	r2, [r3]
 249 0052 1544     		add	r5, r5, r2
 250              	.LVL25:
 251 0054 1D60     		str	r5, [r3]
 299:usb/usb.c     **** }
 252              		.loc 1 299 0
 253 0056 30BC     		pop	{r4, r5}
 254              	.LCFI3:
 255              		.cfi_restore 5
 256              		.cfi_restore 4
 257              		.cfi_def_cfa_offset 0
 258              	.LVL26:
 259 0058 7047     		bx	lr
 260              	.L17:
 261 005a 00BF     		.align	2
 262              	.L16:
 263 005c 00000000 		.word	heap
 264 0060 00000000 		.word	.LANCHOR1
 265              		.cfi_endproc
 266              	.LFE33:
 268              		.section	.text.USBReadEP,"ax",%progbits
 269              		.align	2
 270              		.global	USBReadEP
 271              		.thumb
 272              		.thumb_func
 274              	USBReadEP:
 275              	.LFB34:
 300:usb/usb.c     **** void USBReadEP(uint8_t *buffer, 
 301:usb/usb.c     **** 			   uint16_t len, 
 302:usb/usb.c     **** 			   uint8_t number){
 276              		.loc 1 302 0
 277              		.cfi_startproc
 278              		@ args = 0, pretend = 0, frame = 0
 279              		@ frame_needed = 0, uses_anonymous_args = 0
 280              		@ link register save eliminated.
 281              	.LVL27:
 303:usb/usb.c     ****     uint16_t nBytes = (len + 1) >> 1;
 282              		.loc 1 303 0
 283 0000 0131     		adds	r1, r1, #1
 284              	.LVL28:
 285 0002 C1F34F01 		ubfx	r1, r1, #1, #16
 286              	.LVL29:
 304:usb/usb.c     ****     uint32_t *addrRx = (uint32_t *)((uint16_t)EPBuffTable[number]->ADDR_RX * 2 + USB_PMA_ADDR);
 287              		.loc 1 304 0
 288 0006 0A4B     		ldr	r3, .L21
 289 0008 53F82230 		ldr	r3, [r3, r2, lsl #2]
 290 000c 9A68     		ldr	r2, [r3, #8]
 291              	.LVL30:
 292 000e 92B2     		uxth	r2, r2
ARM GAS  /tmp/ccNLaRzu.s 			page 38


 293 0010 02F10052 		add	r2, r2, #536870912
 294 0014 02F54052 		add	r2, r2, #12288
 295 0018 5200     		lsls	r2, r2, #1
 296              	.LVL31:
 305:usb/usb.c     ****     uint16_t *temp = (uint16_t *)buffer;
 306:usb/usb.c     ****     while(nBytes--)
 297              		.loc 1 306 0
 298 001a 04E0     		b	.L19
 299              	.LVL32:
 300              	.L20:
 307:usb/usb.c     ****         *temp++ = *addrRx++;
 301              		.loc 1 307 0
 302 001c 1168     		ldr	r1, [r2]
 303 001e 0180     		strh	r1, [r0]	@ movhi
 306:usb/usb.c     ****         *temp++ = *addrRx++;
 304              		.loc 1 306 0
 305 0020 1946     		mov	r1, r3
 306              		.loc 1 307 0
 307 0022 0230     		adds	r0, r0, #2
 308              	.LVL33:
 309 0024 0432     		adds	r2, r2, #4
 310              	.LVL34:
 311              	.L19:
 306:usb/usb.c     ****         *temp++ = *addrRx++;
 312              		.loc 1 306 0
 313 0026 4B1E     		subs	r3, r1, #1
 314 0028 9BB2     		uxth	r3, r3
 315              	.LVL35:
 316 002a 0029     		cmp	r1, #0
 317 002c F6D1     		bne	.L20
 308:usb/usb.c     **** }
 318              		.loc 1 308 0
 319 002e 7047     		bx	lr
 320              	.L22:
 321              		.align	2
 322              	.L21:
 323 0030 00000000 		.word	.LANCHOR1
 324              		.cfi_endproc
 325              	.LFE34:
 327              		.section	.text.USBRead,"ax",%progbits
 328              		.align	2
 329              		.global	USBRead
 330              		.thumb
 331              		.thumb_func
 333              	USBRead:
 334              	.LFB30:
 260:usb/usb.c     **** 	heap.cntRx = (uint8_t)EPBuffTable[1]->COUNT_RX;
 335              		.loc 1 260 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              	.LVL36:
 340 0000 08B5     		push	{r3, lr}
 341              	.LCFI4:
 342              		.cfi_def_cfa_offset 8
 343              		.cfi_offset 3, -8
 344              		.cfi_offset 14, -4
ARM GAS  /tmp/ccNLaRzu.s 			page 39


 261:usb/usb.c     **** 	USBReadEP((uint8_t *)buff, heap.cntRx, 1);
 345              		.loc 1 261 0
 346 0002 084B     		ldr	r3, .L25
 347 0004 5B68     		ldr	r3, [r3, #4]
 348 0006 D968     		ldr	r1, [r3, #12]
 349 0008 C9B2     		uxtb	r1, r1
 350 000a 074B     		ldr	r3, .L25+4
 351 000c A3F80811 		strh	r1, [r3, #264]	@ movhi
 262:usb/usb.c     **** 	USB->EPR[1] = USB_EP_INTERRUPT | USB_EP_RX_VALID;
 352              		.loc 1 262 0
 353 0010 0122     		movs	r2, #1
 354 0012 FFF7FEFF 		bl	USBReadEP
 355              	.LVL37:
 263:usb/usb.c     **** }
 356              		.loc 1 263 0
 357 0016 054B     		ldr	r3, .L25+8
 358 0018 1B68     		ldr	r3, [r3]
 359 001a 4FF45852 		mov	r2, #13824
 360 001e 5A60     		str	r2, [r3, #4]
 361 0020 08BD     		pop	{r3, pc}
 362              	.L26:
 363 0022 00BF     		.align	2
 364              	.L25:
 365 0024 00000000 		.word	.LANCHOR1
 366 0028 00000000 		.word	heap
 367 002c 00000000 		.word	.LANCHOR0
 368              		.cfi_endproc
 369              	.LFE30:
 371              		.section	.text.USBStatusTx,"ax",%progbits
 372              		.align	2
 373              		.global	USBStatusTx
 374              		.thumb
 375              		.thumb_func
 377              	USBStatusTx:
 378              	.LFB35:
 309:usb/usb.c     **** void USBStatusTx(uint8_t numEp, 
 310:usb/usb.c     **** 				 uint16_t status)
 311:usb/usb.c     **** {
 379              		.loc 1 311 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383              		@ link register save eliminated.
 384              	.LVL38:
 312:usb/usb.c     ****     register uint16_t val = USB->EPR[numEp];
 385              		.loc 1 312 0
 386 0000 084B     		ldr	r3, .L28
 387 0002 1A68     		ldr	r2, [r3]
 388 0004 52F82030 		ldr	r3, [r2, r0, lsl #2]
 389              	.LVL39:
 313:usb/usb.c     ****     // USB->EPR[numEp] = val;
 314:usb/usb.c     ****     // USB->EPR[numEp] |= status;
 315:usb/usb.c     ****     USB->EPR[numEp] = (val ^ (status & USB_EP_STAT_TX)) & (USB_EP_MASK | USB_EP_STAT_TX);
 390              		.loc 1 315 0
 391 0008 01F03001 		and	r1, r1, #48
 392              	.LVL40:
 393 000c 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccNLaRzu.s 			page 40


 394 000e 5940     		eors	r1, r1, r3
 395 0010 21F4E041 		bic	r1, r1, #28672
 396 0014 21F04001 		bic	r1, r1, #64
 397 0018 0904     		lsls	r1, r1, #16
 398 001a 090C     		lsrs	r1, r1, #16
 399 001c 42F82010 		str	r1, [r2, r0, lsl #2]
 400 0020 7047     		bx	lr
 401              	.L29:
 402 0022 00BF     		.align	2
 403              	.L28:
 404 0024 00000000 		.word	.LANCHOR0
 405              		.cfi_endproc
 406              	.LFE35:
 408              		.section	.text.USBStatusRx,"ax",%progbits
 409              		.align	2
 410              		.global	USBStatusRx
 411              		.thumb
 412              		.thumb_func
 414              	USBStatusRx:
 415              	.LFB36:
 316:usb/usb.c     **** }
 317:usb/usb.c     **** 
 318:usb/usb.c     **** void USBStatusRx(uint8_t numEp, 
 319:usb/usb.c     **** 			     uint16_t status)
 320:usb/usb.c     **** {
 416              		.loc 1 320 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              		@ link register save eliminated.
 421              	.LVL41:
 321:usb/usb.c     ****     register uint16_t val = USB->EPR[numEp];
 422              		.loc 1 321 0
 423 0000 084B     		ldr	r3, .L31
 424 0002 1A68     		ldr	r2, [r3]
 425 0004 52F82030 		ldr	r3, [r2, r0, lsl #2]
 426              	.LVL42:
 322:usb/usb.c     **** 	// register uint16_t val = USB->EPR[numEp] & USB_EP_STAT_RX;
 323:usb/usb.c     ****     // USB->EPR[numEp] = val;
 324:usb/usb.c     ****     // USB->EPR[numEp] |= status;
 325:usb/usb.c     **** 
 326:usb/usb.c     ****     USB->EPR[numEp] = (val ^ (status & USB_EP_STAT_RX)) & (USB_EP_MASK | USB_EP_STAT_RX);
 427              		.loc 1 326 0
 428 0008 01F44051 		and	r1, r1, #12288
 429              	.LVL43:
 430 000c 9BB2     		uxth	r3, r3
 431 000e 5940     		eors	r1, r1, r3
 432 0010 21F48041 		bic	r1, r1, #16384
 433 0014 21F07001 		bic	r1, r1, #112
 434 0018 0904     		lsls	r1, r1, #16
 435 001a 090C     		lsrs	r1, r1, #16
 436 001c 42F82010 		str	r1, [r2, r0, lsl #2]
 437 0020 7047     		bx	lr
 438              	.L32:
 439 0022 00BF     		.align	2
 440              	.L31:
 441 0024 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccNLaRzu.s 			page 41


 442              		.cfi_endproc
 443              	.LFE36:
 445              		.section	.text.USBSendData,"ax",%progbits
 446              		.align	2
 447              		.global	USBSendData
 448              		.thumb
 449              		.thumb_func
 451              	USBSendData:
 452              	.LFB37:
 327:usb/usb.c     **** }
 328:usb/usb.c     **** void USBSendData(uint8_t *buffer, 
 329:usb/usb.c     **** 				 uint8_t len, 
 330:usb/usb.c     **** 				 uint8_t number){
 453              		.loc 1 330 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 457              	.LVL44:
 458 0000 10B5     		push	{r4, lr}
 459              	.LCFI5:
 460              		.cfi_def_cfa_offset 8
 461              		.cfi_offset 4, -8
 462              		.cfi_offset 14, -4
 463 0002 1446     		mov	r4, r2
 331:usb/usb.c     **** 	heap.buffTx = buffer;
 464              		.loc 1 331 0
 465 0004 0C4B     		ldr	r3, .L38
 466 0006 1860     		str	r0, [r3]
 332:usb/usb.c     **** 	heap.cntTx = len;
 467              		.loc 1 332 0
 468 0008 9980     		strh	r1, [r3, #4]	@ movhi
 333:usb/usb.c     **** 
 334:usb/usb.c     **** 	if(len > 0){
 469              		.loc 1 334 0
 470 000a 19B1     		cbz	r1, .L34
 335:usb/usb.c     ****         USBWriteEP(number);
 471              		.loc 1 335 0
 472 000c 1046     		mov	r0, r2
 473              	.LVL45:
 474 000e FFF7FEFF 		bl	USBWriteEP
 475              	.LVL46:
 476 0012 04E0     		b	.L35
 477              	.LVL47:
 478              	.L34:
 336:usb/usb.c     ****     }else{
 337:usb/usb.c     ****         EPBuffTable[number]->COUNT_TX = 0;
 479              		.loc 1 337 0
 480 0014 094B     		ldr	r3, .L38+4
 481 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 482 001a 0022     		movs	r2, #0
 483              	.LVL48:
 484 001c 5A60     		str	r2, [r3, #4]
 485              	.LVL49:
 486              	.L35:
 338:usb/usb.c     ****     }
 339:usb/usb.c     ****     // uint16_t val = USB->EPR[number];
 340:usb/usb.c     ****     // USB->EPR[number] ^= USB_EP_STAT_TX_0;
ARM GAS  /tmp/ccNLaRzu.s 			page 42


 341:usb/usb.c     **** 	USBStatusTx(0, USB_EP_TX_VALID);
 487              		.loc 1 341 0
 488 001e 3021     		movs	r1, #48
 489 0020 0020     		movs	r0, #0
 490 0022 FFF7FEFF 		bl	USBStatusTx
 491              	.LVL50:
 492              	.L36:
 342:usb/usb.c     **** 	while(!(USB->EPR[number] & USB_EP_CTR_TX)){}
 493              		.loc 1 342 0 discriminator 1
 494 0026 064B     		ldr	r3, .L38+8
 495 0028 1B68     		ldr	r3, [r3]
 496 002a 53F82430 		ldr	r3, [r3, r4, lsl #2]
 497 002e 13F0800F 		tst	r3, #128
 498 0032 F8D0     		beq	.L36
 343:usb/usb.c     **** }
 499              		.loc 1 343 0
 500 0034 10BD     		pop	{r4, pc}
 501              	.L39:
 502 0036 00BF     		.align	2
 503              	.L38:
 504 0038 00000000 		.word	heap
 505 003c 00000000 		.word	.LANCHOR1
 506 0040 00000000 		.word	.LANCHOR0
 507              		.cfi_endproc
 508              	.LFE37:
 510              		.section	.text.USBRequest,"ax",%progbits
 511              		.align	2
 512              		.global	USBRequest
 513              		.thumb
 514              		.thumb_func
 516              	USBRequest:
 517              	.LFB38:
 344:usb/usb.c     **** void USBRequest(USBSetupPacket *req, 
 345:usb/usb.c     **** 				uint8_t *pdata){
 518              		.loc 1 345 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 0
 521              		@ frame_needed = 0, uses_anonymous_args = 0
 522              		@ link register save eliminated.
 523              	.LVL51:
 346:usb/usb.c     ****     req->bmRequestType     = *pdata;
 524              		.loc 1 346 0
 525 0000 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 526 0002 0370     		strb	r3, [r0]
 347:usb/usb.c     ****     req->bRequest          = *(pdata + 1);
 527              		.loc 1 347 0
 528 0004 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 529 0006 4370     		strb	r3, [r0, #1]
 348:usb/usb.c     ****     req->wValue.low        = *(pdata + 2);
 530              		.loc 1 348 0
 531 0008 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
 532 000a C370     		strb	r3, [r0, #3]
 349:usb/usb.c     ****     req->wValue.high       = *(pdata + 3);
 533              		.loc 1 349 0
 534 000c CB78     		ldrb	r3, [r1, #3]	@ zero_extendqisi2
 535 000e 8370     		strb	r3, [r0, #2]
 350:usb/usb.c     ****     req->wIndex.low        = *(pdata + 4);
ARM GAS  /tmp/ccNLaRzu.s 			page 43


 536              		.loc 1 350 0
 537 0010 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 538 0012 4371     		strb	r3, [r0, #5]
 351:usb/usb.c     ****     req->wIndex.high       = *(pdata + 5);
 539              		.loc 1 351 0
 540 0014 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 541 0016 0371     		strb	r3, [r0, #4]
 352:usb/usb.c     ****     req->wLength.low       = *(pdata + 6);
 542              		.loc 1 352 0
 543 0018 8B79     		ldrb	r3, [r1, #6]	@ zero_extendqisi2
 544 001a C371     		strb	r3, [r0, #7]
 353:usb/usb.c     ****     req->wLength.high      = *(pdata + 7);
 545              		.loc 1 353 0
 546 001c CB79     		ldrb	r3, [r1, #7]	@ zero_extendqisi2
 547 001e 8371     		strb	r3, [r0, #6]
 548 0020 7047     		bx	lr
 549              		.cfi_endproc
 550              	.LFE38:
 552 0022 00BF     		.section	.text.USBReset,"ax",%progbits
 553              		.align	2
 554              		.global	USBReset
 555              		.thumb
 556              		.thumb_func
 558              	USBReset:
 559              	.LFB39:
 354:usb/usb.c     **** }
 355:usb/usb.c     **** void USBReset(void){
 560              		.loc 1 355 0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 0
 563              		@ frame_needed = 0, uses_anonymous_args = 0
 564              		@ link register save eliminated.
 565 0000 10B4     		push	{r4}
 566              	.LCFI6:
 567              		.cfi_def_cfa_offset 4
 568              		.cfi_offset 4, -4
 356:usb/usb.c     **** 
 357:usb/usb.c     **** 	EPBuffTable[0]->ADDR_TX = 0x80;
 569              		.loc 1 357 0
 570 0002 134B     		ldr	r3, .L43
 571 0004 1968     		ldr	r1, [r3]
 572 0006 8022     		movs	r2, #128
 573 0008 0A60     		str	r2, [r1]
 358:usb/usb.c     **** 	EPBuffTable[0]->ADDR_RX = 0x100;
 574              		.loc 1 358 0
 575 000a 1868     		ldr	r0, [r3]
 576 000c 4FF48071 		mov	r1, #256
 577 0010 8160     		str	r1, [r0, #8]
 359:usb/usb.c     **** 	EPBuffTable[0]->COUNT_RX = 0xbc00;
 578              		.loc 1 359 0
 579 0012 4FF43C41 		mov	r1, #48128
 580 0016 C160     		str	r1, [r0, #12]
 360:usb/usb.c     **** 
 361:usb/usb.c     ****     EPBuffTable[1]->ADDR_TX = 0x180;
 581              		.loc 1 361 0
 582 0018 5868     		ldr	r0, [r3, #4]
 583 001a 4FF4C074 		mov	r4, #384
ARM GAS  /tmp/ccNLaRzu.s 			page 44


 584 001e 0460     		str	r4, [r0]
 362:usb/usb.c     ****     EPBuffTable[1]->ADDR_RX = 0x200;
 585              		.loc 1 362 0
 586 0020 5B68     		ldr	r3, [r3, #4]
 587 0022 4FF40070 		mov	r0, #512
 588 0026 9860     		str	r0, [r3, #8]
 363:usb/usb.c     ****     EPBuffTable[1]->COUNT_RX = 0xbc00;
 589              		.loc 1 363 0
 590 0028 D960     		str	r1, [r3, #12]
 364:usb/usb.c     **** 
 365:usb/usb.c     ****     USB->EPR[0] = USB_EP_CONTROL | USB_EP_RX_VALID;
 591              		.loc 1 365 0
 592 002a 0A4B     		ldr	r3, .L43+4
 593 002c 1968     		ldr	r1, [r3]
 594 002e 4FF44850 		mov	r0, #12800
 595 0032 0860     		str	r0, [r1]
 366:usb/usb.c     **** 
 367:usb/usb.c     **** 	USB->EPR[1] = USB_EP_INTERRUPT | USB_EP_RX_VALID | USB_EP_TX_VALID | 0x01;
 596              		.loc 1 367 0
 597 0034 1B68     		ldr	r3, [r3]
 598 0036 43F23161 		movw	r1, #13873
 599 003a 5960     		str	r1, [r3, #4]
 368:usb/usb.c     **** 
 369:usb/usb.c     **** 	USB->CNTR   = USB_CNTR_CTRM | USB_CNTR_RESETM | USB_CNTR_SUSPM;
 600              		.loc 1 369 0
 601 003c 4FF40C41 		mov	r1, #35840
 602 0040 1964     		str	r1, [r3, #64]
 370:usb/usb.c     ****     USB->ISTR   = 0x00;
 603              		.loc 1 370 0
 604 0042 0021     		movs	r1, #0
 605 0044 5964     		str	r1, [r3, #68]
 371:usb/usb.c     ****     USB->BTABLE = 0x00;
 606              		.loc 1 371 0
 607 0046 1965     		str	r1, [r3, #80]
 372:usb/usb.c     ****     USB->DADDR  = USB_DADDR_EF;
 608              		.loc 1 372 0
 609 0048 DA64     		str	r2, [r3, #76]
 373:usb/usb.c     **** }
 610              		.loc 1 373 0
 611 004a 10BC     		pop	{r4}
 612              	.LCFI7:
 613              		.cfi_restore 4
 614              		.cfi_def_cfa_offset 0
 615 004c 7047     		bx	lr
 616              	.L44:
 617 004e 00BF     		.align	2
 618              	.L43:
 619 0050 00000000 		.word	.LANCHOR1
 620 0054 00000000 		.word	.LANCHOR0
 621              		.cfi_endproc
 622              	.LFE39:
 624              		.section	.text.USBGetDescriptor,"ax",%progbits
 625              		.align	2
 626              		.global	USBGetDescriptor
 627              		.thumb
 628              		.thumb_func
 630              	USBGetDescriptor:
ARM GAS  /tmp/ccNLaRzu.s 			page 45


 631              	.LFB40:
 374:usb/usb.c     **** void USBGetDescriptor(void){
 632              		.loc 1 374 0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 636              		@ link register save eliminated.
 375:usb/usb.c     **** 	switch(SetupPacket.wValue.high){
 637              		.loc 1 375 0
 638 0000 4C4B     		ldr	r3, .L80
 639 0002 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 640 0004 013B     		subs	r3, r3, #1
 641 0006 212B     		cmp	r3, #33
 642 0008 00F29380 		bhi	.L45
 643 000c DFE803F0 		tbb	[pc, r3]
 644              	.L48:
 645 0010 11       		.byte	(.L47-.L48)/2
 646 0011 29       		.byte	(.L49-.L48)/2
 647 0012 35       		.byte	(.L50-.L48)/2
 648 0013 91       		.byte	(.L45-.L48)/2
 649 0014 91       		.byte	(.L45-.L48)/2
 650 0015 1D       		.byte	(.L51-.L48)/2
 651 0016 91       		.byte	(.L45-.L48)/2
 652 0017 91       		.byte	(.L45-.L48)/2
 653 0018 91       		.byte	(.L45-.L48)/2
 654 0019 91       		.byte	(.L45-.L48)/2
 655 001a 91       		.byte	(.L45-.L48)/2
 656 001b 91       		.byte	(.L45-.L48)/2
 657 001c 91       		.byte	(.L45-.L48)/2
 658 001d 91       		.byte	(.L45-.L48)/2
 659 001e 91       		.byte	(.L45-.L48)/2
 660 001f 91       		.byte	(.L45-.L48)/2
 661 0020 91       		.byte	(.L45-.L48)/2
 662 0021 91       		.byte	(.L45-.L48)/2
 663 0022 91       		.byte	(.L45-.L48)/2
 664 0023 91       		.byte	(.L45-.L48)/2
 665 0024 91       		.byte	(.L45-.L48)/2
 666 0025 91       		.byte	(.L45-.L48)/2
 667 0026 91       		.byte	(.L45-.L48)/2
 668 0027 91       		.byte	(.L45-.L48)/2
 669 0028 91       		.byte	(.L45-.L48)/2
 670 0029 91       		.byte	(.L45-.L48)/2
 671 002a 91       		.byte	(.L45-.L48)/2
 672 002b 91       		.byte	(.L45-.L48)/2
 673 002c 91       		.byte	(.L45-.L48)/2
 674 002d 91       		.byte	(.L45-.L48)/2
 675 002e 91       		.byte	(.L45-.L48)/2
 676 002f 91       		.byte	(.L45-.L48)/2
 677 0030 91       		.byte	(.L45-.L48)/2
 678 0031 86       		.byte	(.L52-.L48)/2
 679              		.p2align 1
 680              	.L47:
 376:usb/usb.c     **** 		case USB_DEVICE_DESC_TYPE:
 377:usb/usb.c     **** 			heap.cntTx = MIN(SetupPacket.wLength.low, sizeof(descDevice));
 681              		.loc 1 377 0
 682 0032 404B     		ldr	r3, .L80
 683 0034 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
ARM GAS  /tmp/ccNLaRzu.s 			page 46


 684 0036 122B     		cmp	r3, #18
 685 0038 01D8     		bhi	.L70
 686              		.loc 1 377 0 is_stmt 0 discriminator 1
 687 003a 9BB2     		uxth	r3, r3
 688 003c 00E0     		b	.L53
 689              	.L70:
 690              		.loc 1 377 0
 691 003e 1223     		movs	r3, #18
 692              	.L53:
 693              		.loc 1 377 0 discriminator 4
 694 0040 3D4A     		ldr	r2, .L80+4
 695 0042 9380     		strh	r3, [r2, #4]	@ movhi
 378:usb/usb.c     **** 			heap.buffTx = descDevice;
 696              		.loc 1 378 0 is_stmt 1 discriminator 4
 697 0044 3D4B     		ldr	r3, .L80+8
 698 0046 1360     		str	r3, [r2]
 379:usb/usb.c     **** 			break;
 699              		.loc 1 379 0 discriminator 4
 700 0048 7047     		bx	lr
 701              	.L51:
 380:usb/usb.c     **** 		case USB_DEVICE_QR_DESC_TYPE:
 381:usb/usb.c     **** 			heap.cntTx = MIN(SetupPacket.wLength.low, sizeof(descDeviceQualifier));
 702              		.loc 1 381 0
 703 004a 3A4B     		ldr	r3, .L80
 704 004c DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 705 004e 0A2B     		cmp	r3, #10
 706 0050 01D8     		bhi	.L71
 707              		.loc 1 381 0 is_stmt 0 discriminator 1
 708 0052 9BB2     		uxth	r3, r3
 709 0054 00E0     		b	.L54
 710              	.L71:
 711              		.loc 1 381 0
 712 0056 0A23     		movs	r3, #10
 713              	.L54:
 714              		.loc 1 381 0 discriminator 4
 715 0058 374A     		ldr	r2, .L80+4
 716 005a 9380     		strh	r3, [r2, #4]	@ movhi
 382:usb/usb.c     **** 			heap.buffTx = descDeviceQualifier;
 717              		.loc 1 382 0 is_stmt 1 discriminator 4
 718 005c 384B     		ldr	r3, .L80+12
 719 005e 1360     		str	r3, [r2]
 383:usb/usb.c     **** 			break;
 720              		.loc 1 383 0 discriminator 4
 721 0060 7047     		bx	lr
 722              	.L49:
 384:usb/usb.c     **** 		case USB_CFG_DESC_TYPE:
 385:usb/usb.c     **** 			heap.cntTx = MIN(SetupPacket.wLength.low, sizeof(descConfiguration));
 723              		.loc 1 385 0
 724 0062 344B     		ldr	r3, .L80
 725 0064 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 726 0066 292B     		cmp	r3, #41
 727 0068 01D8     		bhi	.L72
 728              		.loc 1 385 0 is_stmt 0 discriminator 1
 729 006a 9BB2     		uxth	r3, r3
 730 006c 00E0     		b	.L55
 731              	.L72:
 732              		.loc 1 385 0
ARM GAS  /tmp/ccNLaRzu.s 			page 47


 733 006e 2923     		movs	r3, #41
 734              	.L55:
 735              		.loc 1 385 0 discriminator 4
 736 0070 314A     		ldr	r2, .L80+4
 737 0072 9380     		strh	r3, [r2, #4]	@ movhi
 386:usb/usb.c     **** 			heap.buffTx = descConfiguration;
 738              		.loc 1 386 0 is_stmt 1 discriminator 4
 739 0074 334B     		ldr	r3, .L80+16
 740 0076 1360     		str	r3, [r2]
 387:usb/usb.c     **** 			break;
 741              		.loc 1 387 0 discriminator 4
 742 0078 7047     		bx	lr
 743              	.L50:
 388:usb/usb.c     **** 		case USB_STR_DESC_TYPE:
 389:usb/usb.c     **** 			switch(SetupPacket.wValue.low){
 744              		.loc 1 389 0
 745 007a 2E4B     		ldr	r3, .L80
 746 007c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 747 007e 052B     		cmp	r3, #5
 748 0080 57D8     		bhi	.L45
 749 0082 DFE803F0 		tbb	[pc, r3]
 750              	.L57:
 751 0086 03       		.byte	(.L56-.L57)/2
 752 0087 0F       		.byte	(.L58-.L57)/2
 753 0088 1B       		.byte	(.L59-.L57)/2
 754 0089 27       		.byte	(.L60-.L57)/2
 755 008a 33       		.byte	(.L61-.L57)/2
 756 008b 3F       		.byte	(.L62-.L57)/2
 757              		.p2align 1
 758              	.L56:
 390:usb/usb.c     **** 				case USB_IDX_LANGID_STR:
 391:usb/usb.c     **** 					heap.cntTx = MIN(SetupPacket.wLength.low, sizeof(descStringLangID));
 759              		.loc 1 391 0
 760 008c 294B     		ldr	r3, .L80
 761 008e DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 762 0090 042B     		cmp	r3, #4
 763 0092 01D8     		bhi	.L73
 764              		.loc 1 391 0 is_stmt 0 discriminator 1
 765 0094 9BB2     		uxth	r3, r3
 766 0096 00E0     		b	.L63
 767              	.L73:
 768              		.loc 1 391 0
 769 0098 0423     		movs	r3, #4
 770              	.L63:
 771              		.loc 1 391 0 discriminator 4
 772 009a 274A     		ldr	r2, .L80+4
 773 009c 9380     		strh	r3, [r2, #4]	@ movhi
 392:usb/usb.c     **** 					heap.buffTx = descStringLangID;
 774              		.loc 1 392 0 is_stmt 1 discriminator 4
 775 009e 2A4B     		ldr	r3, .L80+20
 776 00a0 1360     		str	r3, [r2]
 393:usb/usb.c     **** 					break;
 777              		.loc 1 393 0 discriminator 4
 778 00a2 7047     		bx	lr
 779              	.L58:
 394:usb/usb.c     **** 				case USB_IDX_MFC_STR:
 395:usb/usb.c     **** 					heap.cntTx = MIN(SetupPacket.wLength.low, sizeof(descStringMFC));
ARM GAS  /tmp/ccNLaRzu.s 			page 48


 780              		.loc 1 395 0
 781 00a4 234B     		ldr	r3, .L80
 782 00a6 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 783 00a8 0E2B     		cmp	r3, #14
 784 00aa 01D8     		bhi	.L74
 785              		.loc 1 395 0 is_stmt 0 discriminator 1
 786 00ac 9BB2     		uxth	r3, r3
 787 00ae 00E0     		b	.L64
 788              	.L74:
 789              		.loc 1 395 0
 790 00b0 0E23     		movs	r3, #14
 791              	.L64:
 792              		.loc 1 395 0 discriminator 4
 793 00b2 214A     		ldr	r2, .L80+4
 794 00b4 9380     		strh	r3, [r2, #4]	@ movhi
 396:usb/usb.c     **** 					heap.buffTx = descStringMFC;
 795              		.loc 1 396 0 is_stmt 1 discriminator 4
 796 00b6 254B     		ldr	r3, .L80+24
 797 00b8 1360     		str	r3, [r2]
 397:usb/usb.c     **** 					break;
 798              		.loc 1 397 0 discriminator 4
 799 00ba 7047     		bx	lr
 800              	.L59:
 398:usb/usb.c     **** 				case USB_IDX_PRODUCT_STR:
 399:usb/usb.c     **** 					heap.cntTx = MIN(SetupPacket.wLength.low, sizeof(descStringProduct));
 801              		.loc 1 399 0
 802 00bc 1D4B     		ldr	r3, .L80
 803 00be DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 804 00c0 0E2B     		cmp	r3, #14
 805 00c2 01D8     		bhi	.L75
 806              		.loc 1 399 0 is_stmt 0 discriminator 1
 807 00c4 9BB2     		uxth	r3, r3
 808 00c6 00E0     		b	.L65
 809              	.L75:
 810              		.loc 1 399 0
 811 00c8 0E23     		movs	r3, #14
 812              	.L65:
 813              		.loc 1 399 0 discriminator 4
 814 00ca 1B4A     		ldr	r2, .L80+4
 815 00cc 9380     		strh	r3, [r2, #4]	@ movhi
 400:usb/usb.c     **** 					heap.buffTx = descStringProduct;
 816              		.loc 1 400 0 is_stmt 1 discriminator 4
 817 00ce 204B     		ldr	r3, .L80+28
 818 00d0 1360     		str	r3, [r2]
 401:usb/usb.c     **** 					break;
 819              		.loc 1 401 0 discriminator 4
 820 00d2 7047     		bx	lr
 821              	.L60:
 402:usb/usb.c     **** 				case USB_IDX_SERIAL_STR:
 403:usb/usb.c     **** 					heap.cntTx = MIN(SetupPacket.wLength.low, sizeof(descStringSerialNumber));
 822              		.loc 1 403 0
 823 00d4 174B     		ldr	r3, .L80
 824 00d6 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 825 00d8 1A2B     		cmp	r3, #26
 826 00da 01D8     		bhi	.L76
 827              		.loc 1 403 0 is_stmt 0 discriminator 1
 828 00dc 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccNLaRzu.s 			page 49


 829 00de 00E0     		b	.L66
 830              	.L76:
 831              		.loc 1 403 0
 832 00e0 1A23     		movs	r3, #26
 833              	.L66:
 834              		.loc 1 403 0 discriminator 4
 835 00e2 154A     		ldr	r2, .L80+4
 836 00e4 9380     		strh	r3, [r2, #4]	@ movhi
 404:usb/usb.c     **** 					heap.buffTx = descStringSerialNumber;
 837              		.loc 1 404 0 is_stmt 1 discriminator 4
 838 00e6 1B4B     		ldr	r3, .L80+32
 839 00e8 1360     		str	r3, [r2]
 405:usb/usb.c     **** 					break;
 840              		.loc 1 405 0 discriminator 4
 841 00ea 7047     		bx	lr
 842              	.L61:
 406:usb/usb.c     **** 				case USB_IDX_CONFIG_STR:
 407:usb/usb.c     **** 					heap.cntTx = MIN(SetupPacket.wLength.low, sizeof(descStringConfig));
 843              		.loc 1 407 0
 844 00ec 114B     		ldr	r3, .L80
 845 00ee DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 846 00f0 242B     		cmp	r3, #36
 847 00f2 01D8     		bhi	.L77
 848              		.loc 1 407 0 is_stmt 0 discriminator 1
 849 00f4 9BB2     		uxth	r3, r3
 850 00f6 00E0     		b	.L67
 851              	.L77:
 852              		.loc 1 407 0
 853 00f8 2423     		movs	r3, #36
 854              	.L67:
 855              		.loc 1 407 0 discriminator 4
 856 00fa 0F4A     		ldr	r2, .L80+4
 857 00fc 9380     		strh	r3, [r2, #4]	@ movhi
 408:usb/usb.c     **** 					heap.buffTx = descStringConfig;
 858              		.loc 1 408 0 is_stmt 1 discriminator 4
 859 00fe 164B     		ldr	r3, .L80+36
 860 0100 1360     		str	r3, [r2]
 409:usb/usb.c     **** 					break;
 861              		.loc 1 409 0 discriminator 4
 862 0102 7047     		bx	lr
 863              	.L62:
 410:usb/usb.c     **** 				case USB_IDX_INTERFACE_STR:
 411:usb/usb.c     **** 					heap.cntTx = MIN(SetupPacket.wLength.low, sizeof(descStringInterface));
 864              		.loc 1 411 0
 865 0104 0B4B     		ldr	r3, .L80
 866 0106 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 867 0108 2A2B     		cmp	r3, #42
 868 010a 01D8     		bhi	.L78
 869              		.loc 1 411 0 is_stmt 0 discriminator 1
 870 010c 9BB2     		uxth	r3, r3
 871 010e 00E0     		b	.L68
 872              	.L78:
 873              		.loc 1 411 0
 874 0110 2A23     		movs	r3, #42
 875              	.L68:
 876              		.loc 1 411 0 discriminator 4
 877 0112 094A     		ldr	r2, .L80+4
ARM GAS  /tmp/ccNLaRzu.s 			page 50


 878 0114 9380     		strh	r3, [r2, #4]	@ movhi
 412:usb/usb.c     **** 					heap.buffTx = descStringInterface;
 879              		.loc 1 412 0 is_stmt 1 discriminator 4
 880 0116 114B     		ldr	r3, .L80+40
 881 0118 1360     		str	r3, [r2]
 413:usb/usb.c     **** 					break;
 882              		.loc 1 413 0 discriminator 4
 883 011a 7047     		bx	lr
 884              	.L52:
 414:usb/usb.c     **** 			}
 415:usb/usb.c     **** 			break;
 416:usb/usb.c     ****         case USB_HID_DESC_TYPE:
 417:usb/usb.c     ****             heap.cntTx = MIN(SetupPacket.wLength.low, sizeof(descHIDReport));
 885              		.loc 1 417 0
 886 011c 054B     		ldr	r3, .L80
 887 011e DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 888 0120 242B     		cmp	r3, #36
 889 0122 01D8     		bhi	.L79
 890              		.loc 1 417 0 is_stmt 0 discriminator 1
 891 0124 9BB2     		uxth	r3, r3
 892 0126 00E0     		b	.L69
 893              	.L79:
 894              		.loc 1 417 0
 895 0128 2423     		movs	r3, #36
 896              	.L69:
 897              		.loc 1 417 0 discriminator 4
 898 012a 034A     		ldr	r2, .L80+4
 899 012c 9380     		strh	r3, [r2, #4]	@ movhi
 418:usb/usb.c     **** 			heap.buffTx = descHIDReport;
 900              		.loc 1 418 0 is_stmt 1 discriminator 4
 901 012e 0C4B     		ldr	r3, .L80+44
 902 0130 1360     		str	r3, [r2]
 903              	.L45:
 904 0132 7047     		bx	lr
 905              	.L81:
 906              		.align	2
 907              	.L80:
 908 0134 00000000 		.word	SetupPacket
 909 0138 00000000 		.word	heap
 910 013c 00000000 		.word	.LANCHOR2
 911 0140 00000000 		.word	.LANCHOR3
 912 0144 00000000 		.word	.LANCHOR4
 913 0148 00000000 		.word	.LANCHOR5
 914 014c 00000000 		.word	.LANCHOR6
 915 0150 00000000 		.word	.LANCHOR7
 916 0154 00000000 		.word	.LANCHOR8
 917 0158 00000000 		.word	.LANCHOR9
 918 015c 00000000 		.word	.LANCHOR10
 919 0160 00000000 		.word	.LANCHOR11
 920              		.cfi_endproc
 921              	.LFE40:
 923              		.section	.text.USBSetup,"ax",%progbits
 924              		.align	2
 925              		.global	USBSetup
 926              		.thumb
 927              		.thumb_func
 929              	USBSetup:
ARM GAS  /tmp/ccNLaRzu.s 			page 51


 930              	.LFB41:
 419:usb/usb.c     ****             break;
 420:usb/usb.c     **** 
 421:usb/usb.c     **** 	}
 422:usb/usb.c     **** }
 423:usb/usb.c     **** void USBSetup(void){
 931              		.loc 1 423 0
 932              		.cfi_startproc
 933              		@ args = 0, pretend = 0, frame = 0
 934              		@ frame_needed = 0, uses_anonymous_args = 0
 935 0000 08B5     		push	{r3, lr}
 936              	.LCFI8:
 937              		.cfi_def_cfa_offset 8
 938              		.cfi_offset 3, -8
 939              		.cfi_offset 14, -4
 424:usb/usb.c     **** 	switch(SetupPacket.bmRequestType & 0x1f){
 940              		.loc 1 424 0
 941 0002 3B4B     		ldr	r3, .L94
 942 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 943 0006 13F01F03 		ands	r3, r3, #31
 944 000a 02D0     		beq	.L84
 945 000c 012B     		cmp	r3, #1
 946 000e 19D0     		beq	.L85
 947 0010 37E0     		b	.L83
 948              	.L84:
 425:usb/usb.c     **** 		case USB_DEVICE:
 426:usb/usb.c     **** 			if(SetupPacket.bRequest == USB_GET_DESCRIPTOR){
 949              		.loc 1 426 0
 950 0012 374B     		ldr	r3, .L94
 951 0014 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 952 0016 062B     		cmp	r3, #6
 953 0018 02D1     		bne	.L86
 427:usb/usb.c     **** 				USBGetDescriptor();
 954              		.loc 1 427 0
 955 001a FFF7FEFF 		bl	USBGetDescriptor
 956              	.LVL52:
 957 001e 30E0     		b	.L83
 958              	.L86:
 428:usb/usb.c     **** 			}else if(SetupPacket.bRequest == USB_SET_ADDRESS){
 959              		.loc 1 428 0
 960 0020 052B     		cmp	r3, #5
 961 0022 08D1     		bne	.L87
 429:usb/usb.c     **** 				heap.devAddress = SetupPacket.wValue.low;
 962              		.loc 1 429 0
 963 0024 324B     		ldr	r3, .L94
 964 0026 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 965 0028 324B     		ldr	r3, .L94+4
 966 002a 83F83E21 		strb	r2, [r3, #318]
 430:usb/usb.c     **** 				heap.cntTx = 0;
 967              		.loc 1 430 0
 968 002e 0022     		movs	r2, #0
 969 0030 9A80     		strh	r2, [r3, #4]	@ movhi
 431:usb/usb.c     **** 				heap.buffTx = 0;
 970              		.loc 1 431 0
 971 0032 1A60     		str	r2, [r3]
 972 0034 25E0     		b	.L83
 973              	.L87:
ARM GAS  /tmp/ccNLaRzu.s 			page 52


 432:usb/usb.c     **** 			}else if(SetupPacket.bRequest == USB_SET_CONFIGURATION){
 974              		.loc 1 432 0
 975 0036 092B     		cmp	r3, #9
 976 0038 23D1     		bne	.L83
 433:usb/usb.c     **** 				heap.cntTx = 0;
 977              		.loc 1 433 0
 978 003a 2E4B     		ldr	r3, .L94+4
 979 003c 0022     		movs	r2, #0
 980 003e 9A80     		strh	r2, [r3, #4]	@ movhi
 434:usb/usb.c     **** 				heap.buffTx = 0;
 981              		.loc 1 434 0
 982 0040 1A60     		str	r2, [r3]
 983 0042 1EE0     		b	.L83
 984              	.L85:
 435:usb/usb.c     **** 			}
 436:usb/usb.c     **** 			break;
 437:usb/usb.c     **** 		case USB_INTERFACE:
 438:usb/usb.c     **** 			if(SetupPacket.bRequest == 0x01){
 985              		.loc 1 438 0
 986 0044 2A4B     		ldr	r3, .L94
 987 0046 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 988 0048 012B     		cmp	r3, #1
 989 004a 0FD1     		bne	.L88
 439:usb/usb.c     **** 				exitFun = 1;
 990              		.loc 1 439 0
 991 004c 0122     		movs	r2, #1
 992 004e 2A4B     		ldr	r3, .L94+8
 993 0050 1A70     		strb	r2, [r3]
 440:usb/usb.c     **** 				// heap.cntTx = 0;
 441:usb/usb.c     **** 				// heap.buffTx = 0;
 442:usb/usb.c     **** 				heap.ep = USB->EPR[0];
 994              		.loc 1 442 0
 995 0052 2A4A     		ldr	r2, .L94+12
 996 0054 1168     		ldr	r1, [r2]
 997 0056 0B68     		ldr	r3, [r1]
 998 0058 9BB2     		uxth	r3, r3
 999 005a 2648     		ldr	r0, .L94+4
 1000 005c A0F84031 		strh	r3, [r0, #320]	@ movhi
 443:usb/usb.c     **** 				USB->EPR[0] = heap.ep;
 1001              		.loc 1 443 0
 1002 0060 0B60     		str	r3, [r1]
 444:usb/usb.c     **** 				USB->EPR[0] = USB_EP_CONTROL | USB_EP_TX_STALL; 
 1003              		.loc 1 444 0
 1004 0062 1368     		ldr	r3, [r2]
 1005 0064 4FF40472 		mov	r2, #528
 1006 0068 1A60     		str	r2, [r3]
 1007 006a 0AE0     		b	.L83
 1008              	.L88:
 445:usb/usb.c     **** 				// return;
 446:usb/usb.c     ****             }else if(SetupPacket.bRequest == USB_GET_DESCRIPTOR){
 1009              		.loc 1 446 0
 1010 006c 062B     		cmp	r3, #6
 1011 006e 02D1     		bne	.L89
 447:usb/usb.c     ****                 USBGetDescriptor();
 1012              		.loc 1 447 0
 1013 0070 FFF7FEFF 		bl	USBGetDescriptor
 1014              	.LVL53:
ARM GAS  /tmp/ccNLaRzu.s 			page 53


 1015 0074 05E0     		b	.L83
 1016              	.L89:
 448:usb/usb.c     ****             }else if(SetupPacket.bRequest == 0x0a){
 1017              		.loc 1 448 0
 1018 0076 0A2B     		cmp	r3, #10
 1019 0078 03D1     		bne	.L83
 449:usb/usb.c     ****                 heap.cntTx = 0;
 1020              		.loc 1 449 0
 1021 007a 1E4B     		ldr	r3, .L94+4
 1022 007c 0022     		movs	r2, #0
 1023 007e 9A80     		strh	r2, [r3, #4]	@ movhi
 450:usb/usb.c     **** 				heap.buffTx = 0;
 1024              		.loc 1 450 0
 1025 0080 1A60     		str	r2, [r3]
 1026              	.L83:
 451:usb/usb.c     ****             }
 452:usb/usb.c     **** 			break;
 453:usb/usb.c     **** 		case USB_ENDPOINT:
 454:usb/usb.c     **** 
 455:usb/usb.c     **** 			break;
 456:usb/usb.c     **** 		case USB_OTHER:
 457:usb/usb.c     **** 
 458:usb/usb.c     **** 			break;
 459:usb/usb.c     **** 	}
 460:usb/usb.c     **** 	if(exitFun){
 1027              		.loc 1 460 0
 1028 0082 1D4B     		ldr	r3, .L94+8
 1029 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1030 0086 83B1     		cbz	r3, .L90
 461:usb/usb.c     **** 		heap.ep = USB->EPR[0] & USB_EP_STAT_RX;
 1031              		.loc 1 461 0
 1032 0088 1C4A     		ldr	r2, .L94+12
 1033 008a 1168     		ldr	r1, [r2]
 1034 008c 0B68     		ldr	r3, [r1]
 1035 008e 03F44053 		and	r3, r3, #12288
 1036 0092 1848     		ldr	r0, .L94+4
 1037 0094 A0F84031 		strh	r3, [r0, #320]	@ movhi
 462:usb/usb.c     **** 		USB->EPR[0] = heap.ep;
 1038              		.loc 1 462 0
 1039 0098 0B60     		str	r3, [r1]
 463:usb/usb.c     **** 		USB->EPR[0] = USB_EP_CONTROL | USB_EP_RX_VALID; 
 1040              		.loc 1 463 0
 1041 009a 1368     		ldr	r3, [r2]
 1042 009c 4FF44852 		mov	r2, #12800
 1043 00a0 1A60     		str	r2, [r3]
 464:usb/usb.c     **** 		exitFun = 0;
 1044              		.loc 1 464 0
 1045 00a2 0022     		movs	r2, #0
 1046 00a4 144B     		ldr	r3, .L94+8
 1047 00a6 1A70     		strb	r2, [r3]
 465:usb/usb.c     **** 		return;
 1048              		.loc 1 465 0
 1049 00a8 08BD     		pop	{r3, pc}
 1050              	.L90:
 466:usb/usb.c     **** 	}
 467:usb/usb.c     **** 
 468:usb/usb.c     **** 	USBWriteEP(0);
ARM GAS  /tmp/ccNLaRzu.s 			page 54


 1051              		.loc 1 468 0
 1052 00aa 0020     		movs	r0, #0
 1053 00ac FFF7FEFF 		bl	USBWriteEP
 1054              	.LVL54:
 469:usb/usb.c     **** 	// USBStatusTx(0, USB_EP_TX_VALID);
 470:usb/usb.c     **** 	heap.ep = USB->EPR[0] & USB_EP_STAT_TX;
 1055              		.loc 1 470 0
 1056 00b0 124A     		ldr	r2, .L94+12
 1057 00b2 1168     		ldr	r1, [r2]
 1058 00b4 0B68     		ldr	r3, [r1]
 1059 00b6 03F03003 		and	r3, r3, #48
 1060 00ba 0E48     		ldr	r0, .L94+4
 1061 00bc A0F84031 		strh	r3, [r0, #320]	@ movhi
 471:usb/usb.c     **** 	USB->EPR[0] = heap.ep;
 1062              		.loc 1 471 0
 1063 00c0 0B60     		str	r3, [r1]
 472:usb/usb.c     **** 	USB->EPR[0] = USB_EP_CONTROL | USB_EP_TX_VALID;
 1064              		.loc 1 472 0
 1065 00c2 1368     		ldr	r3, [r2]
 1066 00c4 4FF40C72 		mov	r2, #560
 1067 00c8 1A60     		str	r2, [r3]
 1068              	.L92:
 473:usb/usb.c     **** 	while(!(USB->EPR[0] & USB_EP_CTR_TX)){}
 1069              		.loc 1 473 0 discriminator 1
 1070 00ca 0C4B     		ldr	r3, .L94+12
 1071 00cc 1B68     		ldr	r3, [r3]
 1072 00ce 1A68     		ldr	r2, [r3]
 1073 00d0 12F0800F 		tst	r2, #128
 1074 00d4 F9D0     		beq	.L92
 474:usb/usb.c     **** 	if(heap.devAddress){
 1075              		.loc 1 474 0
 1076 00d6 074A     		ldr	r2, .L94+4
 1077 00d8 92F83E21 		ldrb	r2, [r2, #318]	@ zero_extendqisi2
 1078 00dc 32B1     		cbz	r2, .L82
 475:usb/usb.c     **** 		// GPIOC->BSRR = GPIO_BSRR_BS13;
 476:usb/usb.c     **** 		USB->DADDR = USB_DADDR_EF | heap.devAddress;
 1079              		.loc 1 476 0
 1080 00de 42F08002 		orr	r2, r2, #128
 1081 00e2 DA64     		str	r2, [r3, #76]
 477:usb/usb.c     **** 		heap.devAddress = 0;
 1082              		.loc 1 477 0
 1083 00e4 0022     		movs	r2, #0
 1084 00e6 034B     		ldr	r3, .L94+4
 1085 00e8 83F83E21 		strb	r2, [r3, #318]
 1086              	.L82:
 1087 00ec 08BD     		pop	{r3, pc}
 1088              	.L95:
 1089 00ee 00BF     		.align	2
 1090              	.L94:
 1091 00f0 00000000 		.word	SetupPacket
 1092 00f4 00000000 		.word	heap
 1093 00f8 00000000 		.word	.LANCHOR12
 1094 00fc 00000000 		.word	.LANCHOR0
 1095              		.cfi_endproc
 1096              	.LFE41:
 1098              		.section	.text.USBCtrHandler,"ax",%progbits
 1099              		.align	2
ARM GAS  /tmp/ccNLaRzu.s 			page 55


 1100              		.global	USBCtrHandler
 1101              		.thumb
 1102              		.thumb_func
 1104              	USBCtrHandler:
 1105              	.LFB42:
 478:usb/usb.c     **** 	}
 479:usb/usb.c     **** 
 480:usb/usb.c     **** } 
 481:usb/usb.c     **** 
 482:usb/usb.c     **** void USBCtrHandler(void){
 1106              		.loc 1 482 0
 1107              		.cfi_startproc
 1108              		@ args = 0, pretend = 0, frame = 0
 1109              		@ frame_needed = 0, uses_anonymous_args = 0
 1110 0000 38B5     		push	{r3, r4, r5, lr}
 1111              	.LCFI9:
 1112              		.cfi_def_cfa_offset 16
 1113              		.cfi_offset 3, -16
 1114              		.cfi_offset 4, -12
 1115              		.cfi_offset 5, -8
 1116              		.cfi_offset 14, -4
 483:usb/usb.c     **** 	uint8_t numEp = heap.istr & USB_ISTR_EP_ID;
 1117              		.loc 1 483 0
 1118 0002 254B     		ldr	r3, .L102
 1119 0004 B3F84241 		ldrh	r4, [r3, #322]
 1120 0008 04F00F04 		and	r4, r4, #15
 1121              	.LVL55:
 484:usb/usb.c     **** 	if(USB->EPR[numEp] & USB_EP_CTR_RX){ 
 1122              		.loc 1 484 0
 1123 000c 234B     		ldr	r3, .L102+4
 1124 000e 1B68     		ldr	r3, [r3]
 1125 0010 53F82420 		ldr	r2, [r3, r4, lsl #2]
 1126 0014 12F4004F 		tst	r2, #32768
 1127 0018 2BD0     		beq	.L97
 485:usb/usb.c     **** 		if(numEp == 0){ 
 1128              		.loc 1 485 0
 1129 001a D4B9     		cbnz	r4, .L98
 486:usb/usb.c     **** 			if(USB->EPR[0] & USB_EP_SETUP){
 1130              		.loc 1 486 0
 1131 001c 1B68     		ldr	r3, [r3]
 1132 001e 13F4006F 		tst	r3, #2048
 1133 0022 16D0     		beq	.L98
 487:usb/usb.c     **** 				test++;
 1134              		.loc 1 487 0
 1135 0024 1E4A     		ldr	r2, .L102+8
 1136 0026 1388     		ldrh	r3, [r2]
 1137 0028 0133     		adds	r3, r3, #1
 1138 002a 9BB2     		uxth	r3, r3
 1139 002c 1380     		strh	r3, [r2]	@ movhi
 488:usb/usb.c     **** 				if(test > 16){
 1140              		.loc 1 488 0
 1141 002e 102B     		cmp	r3, #16
 1142 0030 03D9     		bls	.L99
 489:usb/usb.c     **** 					GPIOC->BSRR = GPIO_BSRR_BS13;
 1143              		.loc 1 489 0
 1144 0032 4FF40052 		mov	r2, #8192
 1145 0036 1B4B     		ldr	r3, .L102+12
ARM GAS  /tmp/ccNLaRzu.s 			page 56


 1146 0038 1A61     		str	r2, [r3, #16]
 1147              	.L99:
 490:usb/usb.c     **** 				}
 491:usb/usb.c     **** 				USBReadEP((uint8_t *)heap.buffSetup, 8, numEp);
 1148              		.loc 1 491 0
 1149 003a 1B4D     		ldr	r5, .L102+16
 1150 003c 2246     		mov	r2, r4
 1151 003e 0821     		movs	r1, #8
 1152 0040 2846     		mov	r0, r5
 1153 0042 FFF7FEFF 		bl	USBReadEP
 1154              	.LVL56:
 492:usb/usb.c     **** 				USBRequest(&SetupPacket, (uint8_t *)heap.buffSetup);
 1155              		.loc 1 492 0
 1156 0046 2946     		mov	r1, r5
 1157 0048 1848     		ldr	r0, .L102+20
 1158 004a FFF7FEFF 		bl	USBRequest
 1159              	.LVL57:
 493:usb/usb.c     **** 				USBSetup();
 1160              		.loc 1 493 0
 1161 004e FFF7FEFF 		bl	USBSetup
 1162              	.LVL58:
 1163              	.L98:
 494:usb/usb.c     **** 			}
 495:usb/usb.c     **** 		}else{
 496:usb/usb.c     **** 
 497:usb/usb.c     **** 		}
 498:usb/usb.c     **** 		heap.ep = USB->EPR[numEp];
 1164              		.loc 1 498 0
 1165 0052 124A     		ldr	r2, .L102+4
 1166 0054 1168     		ldr	r1, [r2]
 1167 0056 51F82430 		ldr	r3, [r1, r4, lsl #2]
 1168 005a 9BB2     		uxth	r3, r3
 1169 005c 0E48     		ldr	r0, .L102
 1170 005e A0F84031 		strh	r3, [r0, #320]	@ movhi
 499:usb/usb.c     **** 		USB->EPR[numEp] = heap.ep;;
 1171              		.loc 1 499 0
 1172 0062 41F82430 		str	r3, [r1, r4, lsl #2]
 500:usb/usb.c     **** 		USB->EPR[numEp] = USB_EP_CONTROL | USB_EP_RX_VALID; 
 1173              		.loc 1 500 0
 1174 0066 1368     		ldr	r3, [r2]
 1175 0068 4FF44852 		mov	r2, #12800
 1176 006c 43F82420 		str	r2, [r3, r4, lsl #2]
 1177 0070 38BD     		pop	{r3, r4, r5, pc}
 1178              	.LVL59:
 1179              	.L97:
 501:usb/usb.c     **** 	}else if(USB->EPR[numEp] & USB_EP_CTR_TX){
 1180              		.loc 1 501 0
 1181 0072 53F82430 		ldr	r3, [r3, r4, lsl #2]
 1182 0076 13F0800F 		tst	r3, #128
 1183 007a 0BD0     		beq	.L96
 502:usb/usb.c     **** 		GPIOC->BSRR = GPIO_BSRR_BS13;
 1184              		.loc 1 502 0
 1185 007c 4FF40052 		mov	r2, #8192
 1186 0080 084B     		ldr	r3, .L102+12
 1187 0082 1A61     		str	r2, [r3, #16]
 503:usb/usb.c     **** 		if(heap.cntTx){
 1188              		.loc 1 503 0
ARM GAS  /tmp/ccNLaRzu.s 			page 57


 1189 0084 044B     		ldr	r3, .L102
 1190 0086 9988     		ldrh	r1, [r3, #4]
 1191 0088 21B1     		cbz	r1, .L96
 504:usb/usb.c     **** 			USBSendData(heap.buffTx, heap.cntTx, numEp);
 1192              		.loc 1 504 0
 1193 008a 2246     		mov	r2, r4
 1194 008c C9B2     		uxtb	r1, r1
 1195 008e 1868     		ldr	r0, [r3]
 1196 0090 FFF7FEFF 		bl	USBSendData
 1197              	.LVL60:
 1198              	.L96:
 1199 0094 38BD     		pop	{r3, r4, r5, pc}
 1200              	.LVL61:
 1201              	.L103:
 1202 0096 00BF     		.align	2
 1203              	.L102:
 1204 0098 00000000 		.word	heap
 1205 009c 00000000 		.word	.LANCHOR0
 1206 00a0 00000000 		.word	.LANCHOR13
 1207 00a4 00100140 		.word	1073811456
 1208 00a8 0C010000 		.word	heap+268
 1209 00ac 00000000 		.word	SetupPacket
 1210              		.cfi_endproc
 1211              	.LFE42:
 1213              		.section	.text.USB_LP_CAN1_RX0_IRQHandler,"ax",%progbits
 1214              		.align	2
 1215              		.global	USB_LP_CAN1_RX0_IRQHandler
 1216              		.thumb
 1217              		.thumb_func
 1219              	USB_LP_CAN1_RX0_IRQHandler:
 1220              	.LFB43:
 505:usb/usb.c     **** 		}
 506:usb/usb.c     **** 		// heap.ep = USB->EPR[0] & USB_EP_STAT_TX;
 507:usb/usb.c     **** 		// USB->EPR[0] = heap.ep;
 508:usb/usb.c     **** 		// USB->EPR[0] = USB_EP_CONTROL | USB_EP_TX_VALID;
 509:usb/usb.c     **** 	}
 510:usb/usb.c     **** }
 511:usb/usb.c     **** /* Interrupt */
 512:usb/usb.c     **** 
 513:usb/usb.c     **** void USB_LP_CAN1_RX0_IRQHandler()
 514:usb/usb.c     **** {
 1221              		.loc 1 514 0
 1222              		.cfi_startproc
 1223              		@ args = 0, pretend = 0, frame = 0
 1224              		@ frame_needed = 0, uses_anonymous_args = 0
 1225 0000 08B5     		push	{r3, lr}
 1226              	.LCFI10:
 1227              		.cfi_def_cfa_offset 8
 1228              		.cfi_offset 3, -8
 1229              		.cfi_offset 14, -4
 515:usb/usb.c     **** 	heap.istr = USB->ISTR; 
 1230              		.loc 1 515 0
 1231 0002 2D4B     		ldr	r3, .L115
 1232 0004 1B68     		ldr	r3, [r3]
 1233 0006 596C     		ldr	r1, [r3, #68]
 1234 0008 2C4A     		ldr	r2, .L115+4
 1235 000a A2F84211 		strh	r1, [r2, #322]	@ movhi
ARM GAS  /tmp/ccNLaRzu.s 			page 58


 516:usb/usb.c     ****     if(USB->ISTR & USB_ISTR_RESET) { /* Reset */
 1236              		.loc 1 516 0
 1237 000e 5A6C     		ldr	r2, [r3, #68]
 1238 0010 12F4806F 		tst	r2, #1024
 1239 0014 13D0     		beq	.L105
 517:usb/usb.c     ****         USB->ISTR &= ~USB_ISTR_RESET;
 1240              		.loc 1 517 0
 1241 0016 5A6C     		ldr	r2, [r3, #68]
 1242 0018 22F48062 		bic	r2, r2, #1024
 1243 001c 5A64     		str	r2, [r3, #68]
 518:usb/usb.c     ****         USBReset();
 1244              		.loc 1 518 0
 1245 001e FFF7FEFF 		bl	USBReset
 1246              	.LVL62:
 519:usb/usb.c     ****         return;
 1247              		.loc 1 519 0
 1248 0022 08BD     		pop	{r3, pc}
 1249              	.L107:
 520:usb/usb.c     ****     }
 521:usb/usb.c     ****     while(USB->ISTR & USB_ISTR_CTR) { /* CTR */
 522:usb/usb.c     **** 		heap.istr = USB->ISTR;
 1250              		.loc 1 522 0
 1251 0024 5A6C     		ldr	r2, [r3, #68]
 1252 0026 254B     		ldr	r3, .L115+4
 1253 0028 A3F84221 		strh	r2, [r3, #322]	@ movhi
 523:usb/usb.c     ****         USBCtrHandler();
 1254              		.loc 1 523 0
 1255 002c FFF7FEFF 		bl	USBCtrHandler
 1256              	.LVL63:
 524:usb/usb.c     ****         USB->ISTR &= ~USB_ISTR_CTR;
 1257              		.loc 1 524 0
 1258 0030 214B     		ldr	r3, .L115
 1259 0032 1A68     		ldr	r2, [r3]
 1260 0034 536C     		ldr	r3, [r2, #68]
 1261 0036 23F40043 		bic	r3, r3, #32768
 1262 003a 5364     		str	r3, [r2, #68]
 525:usb/usb.c     ****         return;
 1263              		.loc 1 525 0
 1264 003c 08BD     		pop	{r3, pc}
 1265              	.L105:
 521:usb/usb.c     **** 		heap.istr = USB->ISTR;
 1266              		.loc 1 521 0
 1267 003e 5A6C     		ldr	r2, [r3, #68]
 1268 0040 12F4004F 		tst	r2, #32768
 1269 0044 EED1     		bne	.L107
 526:usb/usb.c     ****     }
 527:usb/usb.c     ****     if(USB->ISTR & USB_ISTR_PMAOVR) {
 1270              		.loc 1 527 0
 1271 0046 5A6C     		ldr	r2, [r3, #68]
 1272 0048 12F4804F 		tst	r2, #16384
 1273 004c 04D0     		beq	.L108
 528:usb/usb.c     ****         USB->ISTR &= ~USB_ISTR_PMAOVR;
 1274              		.loc 1 528 0
 1275 004e 5A6C     		ldr	r2, [r3, #68]
 1276 0050 22F48042 		bic	r2, r2, #16384
 1277 0054 5A64     		str	r2, [r3, #68]
 529:usb/usb.c     ****         /* Handle PMAOVR status */
ARM GAS  /tmp/ccNLaRzu.s 			page 59


 530:usb/usb.c     ****         return;
 1278              		.loc 1 530 0
 1279 0056 08BD     		pop	{r3, pc}
 1280              	.L108:
 531:usb/usb.c     ****     }
 532:usb/usb.c     ****     if(USB->ISTR & USB_ISTR_SUSP) {
 1281              		.loc 1 532 0
 1282 0058 5A6C     		ldr	r2, [r3, #68]
 1283 005a 12F4006F 		tst	r2, #2048
 1284 005e 04D0     		beq	.L109
 533:usb/usb.c     ****         USB->ISTR &= ~USB_ISTR_SUSP;
 1285              		.loc 1 533 0
 1286 0060 5A6C     		ldr	r2, [r3, #68]
 1287 0062 22F40062 		bic	r2, r2, #2048
 1288 0066 5A64     		str	r2, [r3, #68]
 534:usb/usb.c     ****         return;
 1289              		.loc 1 534 0
 1290 0068 08BD     		pop	{r3, pc}
 1291              	.L109:
 535:usb/usb.c     ****     }
 536:usb/usb.c     ****     if(USB->ISTR & USB_ISTR_ERR) {
 1292              		.loc 1 536 0
 1293 006a 5A6C     		ldr	r2, [r3, #68]
 1294 006c 12F4005F 		tst	r2, #8192
 1295 0070 04D0     		beq	.L110
 537:usb/usb.c     ****         USB->ISTR &= ~USB_ISTR_ERR;
 1296              		.loc 1 537 0
 1297 0072 5A6C     		ldr	r2, [r3, #68]
 1298 0074 22F40052 		bic	r2, r2, #8192
 1299 0078 5A64     		str	r2, [r3, #68]
 538:usb/usb.c     ****         /* Handle Error */
 539:usb/usb.c     ****         return;
 1300              		.loc 1 539 0
 1301 007a 08BD     		pop	{r3, pc}
 1302              	.L110:
 540:usb/usb.c     ****     }
 541:usb/usb.c     ****     if(USB->ISTR & USB_ISTR_WKUP) {
 1303              		.loc 1 541 0
 1304 007c 5A6C     		ldr	r2, [r3, #68]
 1305 007e 12F4805F 		tst	r2, #4096
 1306 0082 04D0     		beq	.L111
 542:usb/usb.c     ****         USB->ISTR &= ~USB_ISTR_WKUP;
 1307              		.loc 1 542 0
 1308 0084 5A6C     		ldr	r2, [r3, #68]
 1309 0086 22F48052 		bic	r2, r2, #4096
 1310 008a 5A64     		str	r2, [r3, #68]
 543:usb/usb.c     ****         /* Handle Wakeup */
 544:usb/usb.c     ****         return;
 1311              		.loc 1 544 0
 1312 008c 08BD     		pop	{r3, pc}
 1313              	.L111:
 545:usb/usb.c     ****     }
 546:usb/usb.c     ****     if(USB->ISTR & USB_ISTR_SOF) {
 1314              		.loc 1 546 0
 1315 008e 5A6C     		ldr	r2, [r3, #68]
 1316 0090 12F4007F 		tst	r2, #512
 1317 0094 04D0     		beq	.L112
ARM GAS  /tmp/ccNLaRzu.s 			page 60


 547:usb/usb.c     ****         USB->ISTR &= ~USB_ISTR_SOF;
 1318              		.loc 1 547 0
 1319 0096 5A6C     		ldr	r2, [r3, #68]
 1320 0098 22F40072 		bic	r2, r2, #512
 1321 009c 5A64     		str	r2, [r3, #68]
 548:usb/usb.c     ****         /* Handle SOF */
 549:usb/usb.c     ****         return;
 1322              		.loc 1 549 0
 1323 009e 08BD     		pop	{r3, pc}
 1324              	.L112:
 550:usb/usb.c     ****     }
 551:usb/usb.c     ****     if(USB->ISTR & USB_ISTR_ESOF) {
 1325              		.loc 1 551 0
 1326 00a0 5A6C     		ldr	r2, [r3, #68]
 1327 00a2 12F4807F 		tst	r2, #256
 1328 00a6 04D0     		beq	.L113
 552:usb/usb.c     ****         USB->ISTR &= ~USB_ISTR_ESOF;
 1329              		.loc 1 552 0
 1330 00a8 5A6C     		ldr	r2, [r3, #68]
 1331 00aa 22F48072 		bic	r2, r2, #256
 1332 00ae 5A64     		str	r2, [r3, #68]
 553:usb/usb.c     ****         /* Handle ESOF */
 554:usb/usb.c     ****         return;
 1333              		.loc 1 554 0
 1334 00b0 08BD     		pop	{r3, pc}
 1335              	.L113:
 555:usb/usb.c     ****     }
 556:usb/usb.c     ****     USB->ISTR = 0;
 1336              		.loc 1 556 0
 1337 00b2 0022     		movs	r2, #0
 1338 00b4 5A64     		str	r2, [r3, #68]
 1339 00b6 08BD     		pop	{r3, pc}
 1340              	.L116:
 1341              		.align	2
 1342              	.L115:
 1343 00b8 00000000 		.word	.LANCHOR0
 1344 00bc 00000000 		.word	heap
 1345              		.cfi_endproc
 1346              	.LFE43:
 1348              		.global	descHIDReport
 1349              		.global	descStringInterface
 1350              		.global	descStringConfig
 1351              		.global	descStringSerialNumber
 1352              		.global	descStringMFC
 1353              		.global	descStringProduct
 1354              		.global	descStringLangID
 1355              		.global	descConfiguration
 1356              		.global	descDeviceQualifier
 1357              		.global	descDevice
 1358              		.global	test
 1359              		.global	exitFun
 1360              		.comm	SetupPacket,8,4
 1361              		.comm	heap,324,4
 1362              		.global	EPBuffTable
 1363              		.global	USB
 1364              		.section	.data.descStringConfig,"aw",%progbits
 1365              		.align	2
ARM GAS  /tmp/ccNLaRzu.s 			page 61


 1366              		.set	.LANCHOR9,. + 0
 1369              	descStringConfig:
 1370 0000 24       		.byte	36
 1371 0001 03       		.byte	3
 1372 0002 43       		.byte	67
 1373 0003 00       		.byte	0
 1374 0004 75       		.byte	117
 1375 0005 00       		.byte	0
 1376 0006 73       		.byte	115
 1377 0007 00       		.byte	0
 1378 0008 74       		.byte	116
 1379 0009 00       		.byte	0
 1380 000a 6F       		.byte	111
 1381 000b 00       		.byte	0
 1382 000c 6D       		.byte	109
 1383 000d 00       		.byte	0
 1384 000e 20       		.byte	32
 1385 000f 00       		.byte	0
 1386 0010 48       		.byte	72
 1387 0011 00       		.byte	0
 1388 0012 49       		.byte	73
 1389 0013 00       		.byte	0
 1390 0014 44       		.byte	68
 1391 0015 00       		.byte	0
 1392 0016 20       		.byte	32
 1393 0017 00       		.byte	0
 1394 0018 43       		.byte	67
 1395 0019 00       		.byte	0
 1396 001a 6F       		.byte	111
 1397 001b 00       		.byte	0
 1398 001c 6E       		.byte	110
 1399 001d 00       		.byte	0
 1400 001e 66       		.byte	102
 1401 001f 00       		.byte	0
 1402 0020 69       		.byte	105
 1403 0021 00       		.byte	0
 1404 0022 67       		.byte	103
 1405 0023 00       		.byte	0
 1406              		.section	.bss.exitFun,"aw",%nobits
 1407              		.set	.LANCHOR12,. + 0
 1410              	exitFun:
 1411 0000 00       		.space	1
 1412              		.section	.data.descStringLangID,"aw",%progbits
 1413              		.align	2
 1414              		.set	.LANCHOR5,. + 0
 1417              	descStringLangID:
 1418 0000 04       		.byte	4
 1419 0001 03       		.byte	3
 1420 0002 09       		.byte	9
 1421 0003 04       		.byte	4
 1422              		.section	.data.descStringMFC,"aw",%progbits
 1423              		.align	2
 1424              		.set	.LANCHOR6,. + 0
 1427              	descStringMFC:
 1428 0000 0E       		.byte	14
 1429 0001 03       		.byte	3
 1430 0002 44       		.byte	68
ARM GAS  /tmp/ccNLaRzu.s 			page 62


 1431 0003 00       		.byte	0
 1432 0004 69       		.byte	105
 1433 0005 00       		.byte	0
 1434 0006 67       		.byte	103
 1435 0007 00       		.byte	0
 1436 0008 44       		.byte	68
 1437 0009 00       		.byte	0
 1438 000a 65       		.byte	101
 1439 000b 00       		.byte	0
 1440 000c 76       		.byte	118
 1441 000d 00       		.byte	0
 1442              		.section	.data.USB,"aw",%progbits
 1443              		.align	2
 1444              		.set	.LANCHOR0,. + 0
 1447              	USB:
 1448 0000 005C0040 		.word	1073765376
 1449              		.section	.data.descConfiguration,"aw",%progbits
 1450              		.align	2
 1451              		.set	.LANCHOR4,. + 0
 1454              	descConfiguration:
 1455 0000 09       		.byte	9
 1456 0001 02       		.byte	2
 1457 0002 29       		.byte	41
 1458 0003 00       		.byte	0
 1459 0004 01       		.byte	1
 1460 0005 01       		.byte	1
 1461 0006 00       		.byte	0
 1462 0007 C0       		.byte	-64
 1463 0008 32       		.byte	50
 1464 0009 09       		.byte	9
 1465 000a 04       		.byte	4
 1466 000b 00       		.byte	0
 1467 000c 00       		.byte	0
 1468 000d 02       		.byte	2
 1469 000e 03       		.byte	3
 1470 000f 00       		.byte	0
 1471 0010 00       		.byte	0
 1472 0011 05       		.byte	5
 1473 0012 09       		.byte	9
 1474 0013 21       		.byte	33
 1475 0014 11       		.byte	17
 1476 0015 01       		.byte	1
 1477 0016 00       		.byte	0
 1478 0017 01       		.byte	1
 1479 0018 22       		.byte	34
 1480 0019 24       		.byte	36
 1481 001a 00       		.byte	0
 1482 001b 07       		.byte	7
 1483 001c 05       		.byte	5
 1484 001d 81       		.byte	-127
 1485 001e 03       		.byte	3
 1486 001f 20       		.byte	32
 1487 0020 00       		.byte	0
 1488 0021 32       		.byte	50
 1489 0022 07       		.byte	7
 1490 0023 05       		.byte	5
 1491 0024 02       		.byte	2
ARM GAS  /tmp/ccNLaRzu.s 			page 63


 1492 0025 03       		.byte	3
 1493 0026 20       		.byte	32
 1494 0027 00       		.byte	0
 1495 0028 32       		.byte	50
 1496              		.section	.data.EPBuffTable,"aw",%progbits
 1497              		.align	2
 1498              		.set	.LANCHOR1,. + 0
 1501              	EPBuffTable:
 1502 0000 00600040 		.word	1073766400
 1503 0004 00610040 		.word	1073766656
 1504 0008 00620040 		.word	1073766912
 1505              		.section	.data.descHIDReport,"aw",%progbits
 1506              		.align	2
 1507              		.set	.LANCHOR11,. + 0
 1510              	descHIDReport:
 1511 0000 06       		.byte	6
 1512 0001 00       		.byte	0
 1513 0002 FF       		.byte	-1
 1514 0003 09       		.byte	9
 1515 0004 01       		.byte	1
 1516 0005 A1       		.byte	-95
 1517 0006 01       		.byte	1
 1518 0007 85       		.byte	-123
 1519 0008 01       		.byte	1
 1520 0009 09       		.byte	9
 1521 000a 01       		.byte	1
 1522 000b 15       		.byte	21
 1523 000c 00       		.byte	0
 1524 000d 25       		.byte	37
 1525 000e 7F       		.byte	127
 1526 000f 75       		.byte	117
 1527 0010 08       		.byte	8
 1528 0011 95       		.byte	-107
 1529 0012 04       		.byte	4
 1530 0013 91       		.byte	-111
 1531 0014 92       		.byte	-110
 1532 0015 85       		.byte	-123
 1533 0016 02       		.byte	2
 1534 0017 09       		.byte	9
 1535 0018 01       		.byte	1
 1536 0019 15       		.byte	21
 1537 001a 00       		.byte	0
 1538 001b 25       		.byte	37
 1539 001c 7F       		.byte	127
 1540 001d 75       		.byte	117
 1541 001e 08       		.byte	8
 1542 001f 95       		.byte	-107
 1543 0020 04       		.byte	4
 1544 0021 81       		.byte	-127
 1545 0022 92       		.byte	-110
 1546 0023 C0       		.byte	-64
 1547              		.section	.data.descStringProduct,"aw",%progbits
 1548              		.align	2
 1549              		.set	.LANCHOR7,. + 0
 1552              	descStringProduct:
 1553 0000 0E       		.byte	14
 1554 0001 03       		.byte	3
ARM GAS  /tmp/ccNLaRzu.s 			page 64


 1555 0002 44       		.byte	68
 1556 0003 00       		.byte	0
 1557 0004 69       		.byte	105
 1558 0005 00       		.byte	0
 1559 0006 67       		.byte	103
 1560 0007 00       		.byte	0
 1561 0008 44       		.byte	68
 1562 0009 00       		.byte	0
 1563 000a 65       		.byte	101
 1564 000b 00       		.byte	0
 1565 000c 76       		.byte	118
 1566 000d 00       		.byte	0
 1567              		.section	.data.descStringInterface,"aw",%progbits
 1568              		.align	2
 1569              		.set	.LANCHOR10,. + 0
 1572              	descStringInterface:
 1573 0000 2A       		.byte	42
 1574 0001 03       		.byte	3
 1575 0002 43       		.byte	67
 1576 0003 00       		.byte	0
 1577 0004 75       		.byte	117
 1578 0005 00       		.byte	0
 1579 0006 73       		.byte	115
 1580 0007 00       		.byte	0
 1581 0008 74       		.byte	116
 1582 0009 00       		.byte	0
 1583 000a 6F       		.byte	111
 1584 000b 00       		.byte	0
 1585 000c 6D       		.byte	109
 1586 000d 00       		.byte	0
 1587 000e 20       		.byte	32
 1588 000f 00       		.byte	0
 1589 0010 48       		.byte	72
 1590 0011 00       		.byte	0
 1591 0012 49       		.byte	73
 1592 0013 00       		.byte	0
 1593 0014 44       		.byte	68
 1594 0015 00       		.byte	0
 1595 0016 20       		.byte	32
 1596 0017 00       		.byte	0
 1597 0018 49       		.byte	73
 1598 0019 00       		.byte	0
 1599 001a 6E       		.byte	110
 1600 001b 00       		.byte	0
 1601 001c 74       		.byte	116
 1602 001d 00       		.byte	0
 1603 001e 65       		.byte	101
 1604 001f 00       		.byte	0
 1605 0020 72       		.byte	114
 1606 0021 00       		.byte	0
 1607 0022 66       		.byte	102
 1608 0023 00       		.byte	0
 1609 0024 61       		.byte	97
 1610 0025 00       		.byte	0
 1611 0026 63       		.byte	99
 1612 0027 00       		.byte	0
 1613 0028 65       		.byte	101
ARM GAS  /tmp/ccNLaRzu.s 			page 65


 1614 0029 00       		.byte	0
 1615              		.section	.data.descStringSerialNumber,"aw",%progbits
 1616              		.align	2
 1617              		.set	.LANCHOR8,. + 0
 1620              	descStringSerialNumber:
 1621 0000 1A       		.byte	26
 1622 0001 03       		.byte	3
 1623 0002 30       		.byte	48
 1624 0003 00       		.byte	0
 1625 0004 30       		.byte	48
 1626 0005 00       		.byte	0
 1627 0006 30       		.byte	48
 1628 0007 00       		.byte	0
 1629 0008 30       		.byte	48
 1630 0009 00       		.byte	0
 1631 000a 30       		.byte	48
 1632 000b 00       		.byte	0
 1633 000c 30       		.byte	48
 1634 000d 00       		.byte	0
 1635 000e 30       		.byte	48
 1636 000f 00       		.byte	0
 1637 0010 30       		.byte	48
 1638 0011 00       		.byte	0
 1639 0012 30       		.byte	48
 1640 0013 00       		.byte	0
 1641 0014 30       		.byte	48
 1642 0015 00       		.byte	0
 1643 0016 31       		.byte	49
 1644 0017 00       		.byte	0
 1645 0018 41       		.byte	65
 1646 0019 00       		.byte	0
 1647              		.section	.bss.test,"aw",%nobits
 1648              		.align	1
 1649              		.set	.LANCHOR13,. + 0
 1652              	test:
 1653 0000 0000     		.space	2
 1654              		.section	.data.descDeviceQualifier,"aw",%progbits
 1655              		.align	2
 1656              		.set	.LANCHOR3,. + 0
 1659              	descDeviceQualifier:
 1660 0000 0A       		.byte	10
 1661 0001 06       		.byte	6
 1662 0002 00       		.byte	0
 1663 0003 02       		.byte	2
 1664 0004 00       		.byte	0
 1665 0005 00       		.byte	0
 1666 0006 00       		.byte	0
 1667 0007 40       		.byte	64
 1668 0008 01       		.byte	1
 1669 0009 00       		.byte	0
 1670              		.section	.data.descDevice,"aw",%progbits
 1671              		.align	2
 1672              		.set	.LANCHOR2,. + 0
 1675              	descDevice:
 1676 0000 12       		.byte	18
 1677 0001 01       		.byte	1
 1678 0002 00       		.byte	0
ARM GAS  /tmp/ccNLaRzu.s 			page 66


 1679 0003 02       		.byte	2
 1680 0004 00       		.byte	0
 1681 0005 00       		.byte	0
 1682 0006 00       		.byte	0
 1683 0007 40       		.byte	64
 1684 0008 83       		.byte	-125
 1685 0009 04       		.byte	4
 1686 000a 50       		.byte	80
 1687 000b 57       		.byte	87
 1688 000c 00       		.byte	0
 1689 000d 02       		.byte	2
 1690 000e 01       		.byte	1
 1691 000f 02       		.byte	2
 1692 0010 03       		.byte	3
 1693 0011 01       		.byte	1
 1694              		.text
 1695              	.Letext0:
 1696              		.file 3 "usb/../cmsis/stm32f10x.h"
 1697              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 1698              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 1699              		.file 6 "usb/usb.h"
ARM GAS  /tmp/ccNLaRzu.s 			page 67


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb.c
     /tmp/ccNLaRzu.s:20     .text.USBConfig:0000000000000000 $t
     /tmp/ccNLaRzu.s:25     .text.USBConfig:0000000000000000 USBConfig
     /tmp/ccNLaRzu.s:78     .text.USBConfig:0000000000000038 $d
                            *COM*:0000000000000144 heap
     /tmp/ccNLaRzu.s:88     .text.USBWrite:0000000000000000 $t
     /tmp/ccNLaRzu.s:93     .text.USBWrite:0000000000000000 USBWrite
     /tmp/ccNLaRzu.s:106    .text.USBGetString:0000000000000000 $t
     /tmp/ccNLaRzu.s:111    .text.USBGetString:0000000000000000 USBGetString
     /tmp/ccNLaRzu.s:173    .text.USBWriteEP:0000000000000000 $t
     /tmp/ccNLaRzu.s:178    .text.USBWriteEP:0000000000000000 USBWriteEP
     /tmp/ccNLaRzu.s:263    .text.USBWriteEP:000000000000005c $d
     /tmp/ccNLaRzu.s:269    .text.USBReadEP:0000000000000000 $t
     /tmp/ccNLaRzu.s:274    .text.USBReadEP:0000000000000000 USBReadEP
     /tmp/ccNLaRzu.s:323    .text.USBReadEP:0000000000000030 $d
     /tmp/ccNLaRzu.s:328    .text.USBRead:0000000000000000 $t
     /tmp/ccNLaRzu.s:333    .text.USBRead:0000000000000000 USBRead
     /tmp/ccNLaRzu.s:365    .text.USBRead:0000000000000024 $d
     /tmp/ccNLaRzu.s:372    .text.USBStatusTx:0000000000000000 $t
     /tmp/ccNLaRzu.s:377    .text.USBStatusTx:0000000000000000 USBStatusTx
     /tmp/ccNLaRzu.s:404    .text.USBStatusTx:0000000000000024 $d
     /tmp/ccNLaRzu.s:409    .text.USBStatusRx:0000000000000000 $t
     /tmp/ccNLaRzu.s:414    .text.USBStatusRx:0000000000000000 USBStatusRx
     /tmp/ccNLaRzu.s:441    .text.USBStatusRx:0000000000000024 $d
     /tmp/ccNLaRzu.s:446    .text.USBSendData:0000000000000000 $t
     /tmp/ccNLaRzu.s:451    .text.USBSendData:0000000000000000 USBSendData
     /tmp/ccNLaRzu.s:504    .text.USBSendData:0000000000000038 $d
     /tmp/ccNLaRzu.s:511    .text.USBRequest:0000000000000000 $t
     /tmp/ccNLaRzu.s:516    .text.USBRequest:0000000000000000 USBRequest
     /tmp/ccNLaRzu.s:553    .text.USBReset:0000000000000000 $t
     /tmp/ccNLaRzu.s:558    .text.USBReset:0000000000000000 USBReset
     /tmp/ccNLaRzu.s:619    .text.USBReset:0000000000000050 $d
     /tmp/ccNLaRzu.s:625    .text.USBGetDescriptor:0000000000000000 $t
     /tmp/ccNLaRzu.s:630    .text.USBGetDescriptor:0000000000000000 USBGetDescriptor
     /tmp/ccNLaRzu.s:645    .text.USBGetDescriptor:0000000000000010 $d
     /tmp/ccNLaRzu.s:679    .text.USBGetDescriptor:0000000000000032 $t
     /tmp/ccNLaRzu.s:751    .text.USBGetDescriptor:0000000000000086 $d
     /tmp/ccNLaRzu.s:757    .text.USBGetDescriptor:000000000000008c $t
     /tmp/ccNLaRzu.s:908    .text.USBGetDescriptor:0000000000000134 $d
                            *COM*:0000000000000008 SetupPacket
     /tmp/ccNLaRzu.s:924    .text.USBSetup:0000000000000000 $t
     /tmp/ccNLaRzu.s:929    .text.USBSetup:0000000000000000 USBSetup
     /tmp/ccNLaRzu.s:1091   .text.USBSetup:00000000000000f0 $d
     /tmp/ccNLaRzu.s:1099   .text.USBCtrHandler:0000000000000000 $t
     /tmp/ccNLaRzu.s:1104   .text.USBCtrHandler:0000000000000000 USBCtrHandler
     /tmp/ccNLaRzu.s:1204   .text.USBCtrHandler:0000000000000098 $d
     /tmp/ccNLaRzu.s:1214   .text.USB_LP_CAN1_RX0_IRQHandler:0000000000000000 $t
     /tmp/ccNLaRzu.s:1219   .text.USB_LP_CAN1_RX0_IRQHandler:0000000000000000 USB_LP_CAN1_RX0_IRQHandler
     /tmp/ccNLaRzu.s:1343   .text.USB_LP_CAN1_RX0_IRQHandler:00000000000000b8 $d
     /tmp/ccNLaRzu.s:1510   .data.descHIDReport:0000000000000000 descHIDReport
     /tmp/ccNLaRzu.s:1572   .data.descStringInterface:0000000000000000 descStringInterface
     /tmp/ccNLaRzu.s:1369   .data.descStringConfig:0000000000000000 descStringConfig
     /tmp/ccNLaRzu.s:1620   .data.descStringSerialNumber:0000000000000000 descStringSerialNumber
     /tmp/ccNLaRzu.s:1427   .data.descStringMFC:0000000000000000 descStringMFC
     /tmp/ccNLaRzu.s:1552   .data.descStringProduct:0000000000000000 descStringProduct
     /tmp/ccNLaRzu.s:1417   .data.descStringLangID:0000000000000000 descStringLangID
ARM GAS  /tmp/ccNLaRzu.s 			page 68


     /tmp/ccNLaRzu.s:1454   .data.descConfiguration:0000000000000000 descConfiguration
     /tmp/ccNLaRzu.s:1659   .data.descDeviceQualifier:0000000000000000 descDeviceQualifier
     /tmp/ccNLaRzu.s:1675   .data.descDevice:0000000000000000 descDevice
     /tmp/ccNLaRzu.s:1652   .bss.test:0000000000000000 test
     /tmp/ccNLaRzu.s:1410   .bss.exitFun:0000000000000000 exitFun
     /tmp/ccNLaRzu.s:1501   .data.EPBuffTable:0000000000000000 EPBuffTable
     /tmp/ccNLaRzu.s:1447   .data.USB:0000000000000000 USB
     /tmp/ccNLaRzu.s:1365   .data.descStringConfig:0000000000000000 $d
     /tmp/ccNLaRzu.s:1411   .bss.exitFun:0000000000000000 $d
     /tmp/ccNLaRzu.s:1413   .data.descStringLangID:0000000000000000 $d
     /tmp/ccNLaRzu.s:1423   .data.descStringMFC:0000000000000000 $d
     /tmp/ccNLaRzu.s:1443   .data.USB:0000000000000000 $d
     /tmp/ccNLaRzu.s:1450   .data.descConfiguration:0000000000000000 $d
     /tmp/ccNLaRzu.s:1497   .data.EPBuffTable:0000000000000000 $d
     /tmp/ccNLaRzu.s:1506   .data.descHIDReport:0000000000000000 $d
     /tmp/ccNLaRzu.s:1548   .data.descStringProduct:0000000000000000 $d
     /tmp/ccNLaRzu.s:1568   .data.descStringInterface:0000000000000000 $d
     /tmp/ccNLaRzu.s:1616   .data.descStringSerialNumber:0000000000000000 $d
     /tmp/ccNLaRzu.s:1648   .bss.test:0000000000000000 $d
     /tmp/ccNLaRzu.s:1655   .data.descDeviceQualifier:0000000000000000 $d
     /tmp/ccNLaRzu.s:1671   .data.descDevice:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
