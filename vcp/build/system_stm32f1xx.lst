ARM GAS  /tmp/ccZSgViz.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"system_stm32f1xx.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.SetSysClockTo72,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	SetSysClockTo72:
  25              	.LFB32:
  26              		.file 1 "library/cmsis/src/system_stm32f1xx.c"
   1:library/cmsis/src/system_stm32f1xx.c **** /**
   2:library/cmsis/src/system_stm32f1xx.c ****   ******************************************************************************
   3:library/cmsis/src/system_stm32f1xx.c ****   * @file    system_stm32f10x.c
   4:library/cmsis/src/system_stm32f1xx.c ****   * @author  MCD Application Team
   5:library/cmsis/src/system_stm32f1xx.c ****   * @version V3.3.0
   6:library/cmsis/src/system_stm32f1xx.c ****   * @date    04/16/2010
   7:library/cmsis/src/system_stm32f1xx.c ****   * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
   8:library/cmsis/src/system_stm32f1xx.c ****   ******************************************************************************  
   9:library/cmsis/src/system_stm32f1xx.c ****   *
  10:library/cmsis/src/system_stm32f1xx.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  11:library/cmsis/src/system_stm32f1xx.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  12:library/cmsis/src/system_stm32f1xx.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  13:library/cmsis/src/system_stm32f1xx.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  14:library/cmsis/src/system_stm32f1xx.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  15:library/cmsis/src/system_stm32f1xx.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  16:library/cmsis/src/system_stm32f1xx.c ****   *
  17:library/cmsis/src/system_stm32f1xx.c ****   * <h2><center>&copy; COPYRIGHT 2010 STMicroelectronics</center></h2>
  18:library/cmsis/src/system_stm32f1xx.c ****   ******************************************************************************
  19:library/cmsis/src/system_stm32f1xx.c ****   */
  20:library/cmsis/src/system_stm32f1xx.c **** 
  21:library/cmsis/src/system_stm32f1xx.c **** /** @addtogroup CMSIS
  22:library/cmsis/src/system_stm32f1xx.c ****   * @{
  23:library/cmsis/src/system_stm32f1xx.c ****   */
  24:library/cmsis/src/system_stm32f1xx.c **** 
  25:library/cmsis/src/system_stm32f1xx.c **** /** @addtogroup stm32f10x_system
  26:library/cmsis/src/system_stm32f1xx.c ****   * @{
  27:library/cmsis/src/system_stm32f1xx.c ****   */  
  28:library/cmsis/src/system_stm32f1xx.c ****   
  29:library/cmsis/src/system_stm32f1xx.c **** /** @addtogroup STM32F10x_System_Private_Includes
  30:library/cmsis/src/system_stm32f1xx.c ****   * @{
  31:library/cmsis/src/system_stm32f1xx.c ****   */
  32:library/cmsis/src/system_stm32f1xx.c **** 
ARM GAS  /tmp/ccZSgViz.s 			page 2


  33:library/cmsis/src/system_stm32f1xx.c **** #include "stm32f1xx.h"
  34:library/cmsis/src/system_stm32f1xx.c **** 
  35:library/cmsis/src/system_stm32f1xx.c **** /**
  36:library/cmsis/src/system_stm32f1xx.c ****   * @}
  37:library/cmsis/src/system_stm32f1xx.c ****   */
  38:library/cmsis/src/system_stm32f1xx.c **** 
  39:library/cmsis/src/system_stm32f1xx.c **** /** @addtogroup STM32F10x_System_Private_TypesDefinitions
  40:library/cmsis/src/system_stm32f1xx.c ****   * @{
  41:library/cmsis/src/system_stm32f1xx.c ****   */
  42:library/cmsis/src/system_stm32f1xx.c **** 
  43:library/cmsis/src/system_stm32f1xx.c **** /**
  44:library/cmsis/src/system_stm32f1xx.c ****   * @}
  45:library/cmsis/src/system_stm32f1xx.c ****   */
  46:library/cmsis/src/system_stm32f1xx.c **** 
  47:library/cmsis/src/system_stm32f1xx.c **** /** @addtogroup STM32F10x_System_Private_Defines
  48:library/cmsis/src/system_stm32f1xx.c ****   * @{
  49:library/cmsis/src/system_stm32f1xx.c ****   */
  50:library/cmsis/src/system_stm32f1xx.c **** 
  51:library/cmsis/src/system_stm32f1xx.c **** /*!< Uncomment the line corresponding to the desired System clock (SYSCLK)
  52:library/cmsis/src/system_stm32f1xx.c ****    frequency (after reset the HSI is used as SYSCLK source)
  53:library/cmsis/src/system_stm32f1xx.c ****    
  54:library/cmsis/src/system_stm32f1xx.c ****    IMPORTANT NOTE:
  55:library/cmsis/src/system_stm32f1xx.c ****    ============== 
  56:library/cmsis/src/system_stm32f1xx.c ****    1. After each device reset the HSI is used as System clock source.
  57:library/cmsis/src/system_stm32f1xx.c **** 
  58:library/cmsis/src/system_stm32f1xx.c ****    2. Please make sure that the selected System clock doesn't exceed your device's
  59:library/cmsis/src/system_stm32f1xx.c ****       maximum frequency.
  60:library/cmsis/src/system_stm32f1xx.c ****       
  61:library/cmsis/src/system_stm32f1xx.c ****    3. If none of the define below is enabled, the HSI is used as System clock
  62:library/cmsis/src/system_stm32f1xx.c ****     source.
  63:library/cmsis/src/system_stm32f1xx.c **** 
  64:library/cmsis/src/system_stm32f1xx.c ****    4. The System clock configuration functions provided within this file assume that:
  65:library/cmsis/src/system_stm32f1xx.c ****         - For Low and Medium density Value line devices an external 8MHz crystal 
  66:library/cmsis/src/system_stm32f1xx.c ****           is used to drive the System clock.
  67:library/cmsis/src/system_stm32f1xx.c ****         - For Low, Medium and High density devices an external 8MHz crystal is
  68:library/cmsis/src/system_stm32f1xx.c ****           used to drive the System clock.
  69:library/cmsis/src/system_stm32f1xx.c ****         - For Connectivity line devices an external 25MHz crystal is used to drive
  70:library/cmsis/src/system_stm32f1xx.c ****           the System clock.
  71:library/cmsis/src/system_stm32f1xx.c ****      If you are using different crystal you have to adapt those functions accordingly.
  72:library/cmsis/src/system_stm32f1xx.c ****     */
  73:library/cmsis/src/system_stm32f1xx.c ****     
  74:library/cmsis/src/system_stm32f1xx.c **** #if defined (STM32F10X_LD_VL) || (defined STM32F10X_MD_VL) 
  75:library/cmsis/src/system_stm32f1xx.c **** /* #define SYSCLK_FREQ_HSE    HSE_Value */
  76:library/cmsis/src/system_stm32f1xx.c ****  #define SYSCLK_FREQ_24MHz  24000000
  77:library/cmsis/src/system_stm32f1xx.c **** #else
  78:library/cmsis/src/system_stm32f1xx.c **** /* #define SYSCLK_FREQ_HSE    HSE_Value */
  79:library/cmsis/src/system_stm32f1xx.c **** /* #define SYSCLK_FREQ_24MHz  24000000 */ 
  80:library/cmsis/src/system_stm32f1xx.c **** /* #define SYSCLK_FREQ_36MHz  36000000 */
  81:library/cmsis/src/system_stm32f1xx.c **** /* #define SYSCLK_FREQ_48MHz  48000000 */
  82:library/cmsis/src/system_stm32f1xx.c **** /* #define SYSCLK_FREQ_56MHz  56000000 */
  83:library/cmsis/src/system_stm32f1xx.c **** #define SYSCLK_FREQ_72MHz  72000000 
  84:library/cmsis/src/system_stm32f1xx.c **** #endif
  85:library/cmsis/src/system_stm32f1xx.c **** 
  86:library/cmsis/src/system_stm32f1xx.c **** /*!< Uncomment the following line if you need to use external SRAM mounted
  87:library/cmsis/src/system_stm32f1xx.c ****      on STM3210E-EVAL board (STM32 High density and XL-density devices) as data memory  */ 
  88:library/cmsis/src/system_stm32f1xx.c **** #if defined (STM32F10X_HD) || (defined STM32F10X_XL)
  89:library/cmsis/src/system_stm32f1xx.c **** /* #define DATA_IN_ExtSRAM */
ARM GAS  /tmp/ccZSgViz.s 			page 3


  90:library/cmsis/src/system_stm32f1xx.c **** #endif
  91:library/cmsis/src/system_stm32f1xx.c **** 
  92:library/cmsis/src/system_stm32f1xx.c **** /**
  93:library/cmsis/src/system_stm32f1xx.c ****   * @}
  94:library/cmsis/src/system_stm32f1xx.c ****   */
  95:library/cmsis/src/system_stm32f1xx.c **** 
  96:library/cmsis/src/system_stm32f1xx.c **** /** @addtogroup STM32F10x_System_Private_Macros
  97:library/cmsis/src/system_stm32f1xx.c ****   * @{
  98:library/cmsis/src/system_stm32f1xx.c ****   */
  99:library/cmsis/src/system_stm32f1xx.c **** 
 100:library/cmsis/src/system_stm32f1xx.c **** /**
 101:library/cmsis/src/system_stm32f1xx.c ****   * @}
 102:library/cmsis/src/system_stm32f1xx.c ****   */
 103:library/cmsis/src/system_stm32f1xx.c **** 
 104:library/cmsis/src/system_stm32f1xx.c **** /** @addtogroup STM32F10x_System_Private_Variables
 105:library/cmsis/src/system_stm32f1xx.c ****   * @{
 106:library/cmsis/src/system_stm32f1xx.c ****   */
 107:library/cmsis/src/system_stm32f1xx.c **** 
 108:library/cmsis/src/system_stm32f1xx.c **** /*******************************************************************************
 109:library/cmsis/src/system_stm32f1xx.c **** *  Clock Definitions
 110:library/cmsis/src/system_stm32f1xx.c **** *******************************************************************************/
 111:library/cmsis/src/system_stm32f1xx.c **** #ifdef SYSCLK_FREQ_HSE
 112:library/cmsis/src/system_stm32f1xx.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_HSE;        /*!< System Clock Frequency (Core Cloc
 113:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_24MHz
 114:library/cmsis/src/system_stm32f1xx.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_24MHz;        /*!< System Clock Frequency (Core Cl
 115:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_36MHz
 116:library/cmsis/src/system_stm32f1xx.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_36MHz;        /*!< System Clock Frequency (Core Cl
 117:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_48MHz
 118:library/cmsis/src/system_stm32f1xx.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_48MHz;        /*!< System Clock Frequency (Core Cl
 119:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_56MHz
 120:library/cmsis/src/system_stm32f1xx.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_56MHz;        /*!< System Clock Frequency (Core Cl
 121:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_72MHz
 122:library/cmsis/src/system_stm32f1xx.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_72MHz;        /*!< System Clock Frequency (Core Cl
 123:library/cmsis/src/system_stm32f1xx.c **** #else /*!< HSI Selected as System Clock source */
 124:library/cmsis/src/system_stm32f1xx.c ****   uint32_t SystemCoreClock         = HSI_Value;        /*!< System Clock Frequency (Core Clock) */
 125:library/cmsis/src/system_stm32f1xx.c **** #endif
 126:library/cmsis/src/system_stm32f1xx.c **** 
 127:library/cmsis/src/system_stm32f1xx.c **** __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 128:library/cmsis/src/system_stm32f1xx.c **** /**
 129:library/cmsis/src/system_stm32f1xx.c ****   * @}
 130:library/cmsis/src/system_stm32f1xx.c ****   */
 131:library/cmsis/src/system_stm32f1xx.c **** 
 132:library/cmsis/src/system_stm32f1xx.c **** /** @addtogroup STM32F10x_System_Private_FunctionPrototypes
 133:library/cmsis/src/system_stm32f1xx.c ****   * @{
 134:library/cmsis/src/system_stm32f1xx.c ****   */
 135:library/cmsis/src/system_stm32f1xx.c **** 
 136:library/cmsis/src/system_stm32f1xx.c **** static void SetSysClock(void);
 137:library/cmsis/src/system_stm32f1xx.c **** 
 138:library/cmsis/src/system_stm32f1xx.c **** #ifdef SYSCLK_FREQ_HSE
 139:library/cmsis/src/system_stm32f1xx.c ****   static void SetSysClockToHSE(void);
 140:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_24MHz
 141:library/cmsis/src/system_stm32f1xx.c ****   static void SetSysClockTo24(void);
 142:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_36MHz
 143:library/cmsis/src/system_stm32f1xx.c ****   static void SetSysClockTo36(void);
 144:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_48MHz
 145:library/cmsis/src/system_stm32f1xx.c ****   static void SetSysClockTo48(void);
 146:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_56MHz
ARM GAS  /tmp/ccZSgViz.s 			page 4


 147:library/cmsis/src/system_stm32f1xx.c ****   static void SetSysClockTo56(void);  
 148:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_72MHz
 149:library/cmsis/src/system_stm32f1xx.c ****   static void SetSysClockTo72(void);
 150:library/cmsis/src/system_stm32f1xx.c **** #endif
 151:library/cmsis/src/system_stm32f1xx.c **** 
 152:library/cmsis/src/system_stm32f1xx.c **** #ifdef DATA_IN_ExtSRAM
 153:library/cmsis/src/system_stm32f1xx.c ****   static void SystemInit_ExtMemCtl(void); 
 154:library/cmsis/src/system_stm32f1xx.c **** #endif /* DATA_IN_ExtSRAM */
 155:library/cmsis/src/system_stm32f1xx.c **** 
 156:library/cmsis/src/system_stm32f1xx.c **** /**
 157:library/cmsis/src/system_stm32f1xx.c ****   * @}
 158:library/cmsis/src/system_stm32f1xx.c ****   */
 159:library/cmsis/src/system_stm32f1xx.c **** 
 160:library/cmsis/src/system_stm32f1xx.c **** /** @addtogroup STM32F10x_System_Private_Functions
 161:library/cmsis/src/system_stm32f1xx.c ****   * @{
 162:library/cmsis/src/system_stm32f1xx.c ****   */
 163:library/cmsis/src/system_stm32f1xx.c **** 
 164:library/cmsis/src/system_stm32f1xx.c **** /**
 165:library/cmsis/src/system_stm32f1xx.c ****   * @brief  Setup the microcontroller system
 166:library/cmsis/src/system_stm32f1xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 167:library/cmsis/src/system_stm32f1xx.c ****   *         SystemCoreClock variable.
 168:library/cmsis/src/system_stm32f1xx.c ****   * @note   This function should be used only after reset.
 169:library/cmsis/src/system_stm32f1xx.c ****   * @param  None
 170:library/cmsis/src/system_stm32f1xx.c ****   * @retval None
 171:library/cmsis/src/system_stm32f1xx.c ****   */
 172:library/cmsis/src/system_stm32f1xx.c **** void SystemInit (void)
 173:library/cmsis/src/system_stm32f1xx.c **** {
 174:library/cmsis/src/system_stm32f1xx.c ****   /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
 175:library/cmsis/src/system_stm32f1xx.c ****   /* Set HSION bit */
 176:library/cmsis/src/system_stm32f1xx.c ****   RCC->CR |= (uint32_t)0x00000001;
 177:library/cmsis/src/system_stm32f1xx.c **** 
 178:library/cmsis/src/system_stm32f1xx.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 179:library/cmsis/src/system_stm32f1xx.c **** #ifndef STM32F10X_CL
 180:library/cmsis/src/system_stm32f1xx.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
 181:library/cmsis/src/system_stm32f1xx.c **** #else
 182:library/cmsis/src/system_stm32f1xx.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 183:library/cmsis/src/system_stm32f1xx.c **** #endif /* STM32F10X_CL */   
 184:library/cmsis/src/system_stm32f1xx.c ****   
 185:library/cmsis/src/system_stm32f1xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 186:library/cmsis/src/system_stm32f1xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
 187:library/cmsis/src/system_stm32f1xx.c **** 
 188:library/cmsis/src/system_stm32f1xx.c ****   /* Reset HSEBYP bit */
 189:library/cmsis/src/system_stm32f1xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
 190:library/cmsis/src/system_stm32f1xx.c **** 
 191:library/cmsis/src/system_stm32f1xx.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 192:library/cmsis/src/system_stm32f1xx.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
 193:library/cmsis/src/system_stm32f1xx.c **** 
 194:library/cmsis/src/system_stm32f1xx.c **** #ifdef STM32F10X_CL
 195:library/cmsis/src/system_stm32f1xx.c ****   /* Reset PLL2ON and PLL3ON bits */
 196:library/cmsis/src/system_stm32f1xx.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 197:library/cmsis/src/system_stm32f1xx.c **** 
 198:library/cmsis/src/system_stm32f1xx.c ****   /* Disable all interrupts and clear pending bits  */
 199:library/cmsis/src/system_stm32f1xx.c ****   RCC->CIR = 0x00FF0000;
 200:library/cmsis/src/system_stm32f1xx.c **** 
 201:library/cmsis/src/system_stm32f1xx.c ****   /* Reset CFGR2 register */
 202:library/cmsis/src/system_stm32f1xx.c ****   RCC->CFGR2 = 0x00000000;
 203:library/cmsis/src/system_stm32f1xx.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) 
ARM GAS  /tmp/ccZSgViz.s 			page 5


 204:library/cmsis/src/system_stm32f1xx.c ****   /* Disable all interrupts and clear pending bits  */
 205:library/cmsis/src/system_stm32f1xx.c ****   RCC->CIR = 0x009F0000;
 206:library/cmsis/src/system_stm32f1xx.c **** 
 207:library/cmsis/src/system_stm32f1xx.c ****   /* Reset CFGR2 register */
 208:library/cmsis/src/system_stm32f1xx.c ****   RCC->CFGR2 = 0x00000000;      
 209:library/cmsis/src/system_stm32f1xx.c **** #else
 210:library/cmsis/src/system_stm32f1xx.c ****   /* Disable all interrupts and clear pending bits  */
 211:library/cmsis/src/system_stm32f1xx.c ****   RCC->CIR = 0x009F0000;
 212:library/cmsis/src/system_stm32f1xx.c **** #endif /* STM32F10X_CL */
 213:library/cmsis/src/system_stm32f1xx.c ****     
 214:library/cmsis/src/system_stm32f1xx.c **** #if defined (STM32F10X_HD) || (defined STM32F10X_XL)
 215:library/cmsis/src/system_stm32f1xx.c ****   #ifdef DATA_IN_ExtSRAM
 216:library/cmsis/src/system_stm32f1xx.c ****     SystemInit_ExtMemCtl(); 
 217:library/cmsis/src/system_stm32f1xx.c ****   #endif /* DATA_IN_ExtSRAM */
 218:library/cmsis/src/system_stm32f1xx.c **** #endif 
 219:library/cmsis/src/system_stm32f1xx.c **** 
 220:library/cmsis/src/system_stm32f1xx.c ****   /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
 221:library/cmsis/src/system_stm32f1xx.c ****   /* Configure the Flash Latency cycles and enable prefetch buffer */
 222:library/cmsis/src/system_stm32f1xx.c ****   SetSysClock();
 223:library/cmsis/src/system_stm32f1xx.c **** }
 224:library/cmsis/src/system_stm32f1xx.c **** 
 225:library/cmsis/src/system_stm32f1xx.c **** /**
 226:library/cmsis/src/system_stm32f1xx.c ****   * @brief  Update SystemCoreClock according to Clock Register Values
 227:library/cmsis/src/system_stm32f1xx.c ****   * @note   None
 228:library/cmsis/src/system_stm32f1xx.c ****   * @param  None
 229:library/cmsis/src/system_stm32f1xx.c ****   * @retval None
 230:library/cmsis/src/system_stm32f1xx.c ****   */
 231:library/cmsis/src/system_stm32f1xx.c **** void SystemCoreClockUpdate (void)
 232:library/cmsis/src/system_stm32f1xx.c **** {
 233:library/cmsis/src/system_stm32f1xx.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 234:library/cmsis/src/system_stm32f1xx.c **** 
 235:library/cmsis/src/system_stm32f1xx.c **** #ifdef  STM32F10X_CL
 236:library/cmsis/src/system_stm32f1xx.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 237:library/cmsis/src/system_stm32f1xx.c **** #endif /* STM32F10X_CL */
 238:library/cmsis/src/system_stm32f1xx.c **** 
 239:library/cmsis/src/system_stm32f1xx.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
 240:library/cmsis/src/system_stm32f1xx.c ****   uint32_t prediv1factor = 0;
 241:library/cmsis/src/system_stm32f1xx.c **** #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL */
 242:library/cmsis/src/system_stm32f1xx.c ****     
 243:library/cmsis/src/system_stm32f1xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 244:library/cmsis/src/system_stm32f1xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 245:library/cmsis/src/system_stm32f1xx.c ****   
 246:library/cmsis/src/system_stm32f1xx.c ****   switch (tmp)
 247:library/cmsis/src/system_stm32f1xx.c ****   {
 248:library/cmsis/src/system_stm32f1xx.c ****     case 0x00:  /* HSI used as system clock */
 249:library/cmsis/src/system_stm32f1xx.c ****       SystemCoreClock = HSI_Value;
 250:library/cmsis/src/system_stm32f1xx.c ****       break;
 251:library/cmsis/src/system_stm32f1xx.c ****     case 0x04:  /* HSE used as system clock */
 252:library/cmsis/src/system_stm32f1xx.c ****       SystemCoreClock = HSE_Value;
 253:library/cmsis/src/system_stm32f1xx.c ****       break;
 254:library/cmsis/src/system_stm32f1xx.c ****     case 0x08:  /* PLL used as system clock */
 255:library/cmsis/src/system_stm32f1xx.c **** 
 256:library/cmsis/src/system_stm32f1xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 257:library/cmsis/src/system_stm32f1xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 258:library/cmsis/src/system_stm32f1xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 259:library/cmsis/src/system_stm32f1xx.c ****       
 260:library/cmsis/src/system_stm32f1xx.c **** #ifndef STM32F10X_CL      
ARM GAS  /tmp/ccZSgViz.s 			page 6


 261:library/cmsis/src/system_stm32f1xx.c ****       pllmull = ( pllmull >> 18) + 2;
 262:library/cmsis/src/system_stm32f1xx.c ****       
 263:library/cmsis/src/system_stm32f1xx.c ****       if (pllsource == 0x00)
 264:library/cmsis/src/system_stm32f1xx.c ****       {
 265:library/cmsis/src/system_stm32f1xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 266:library/cmsis/src/system_stm32f1xx.c ****         SystemCoreClock = (HSI_Value >> 1) * pllmull;
 267:library/cmsis/src/system_stm32f1xx.c ****       }
 268:library/cmsis/src/system_stm32f1xx.c ****       else
 269:library/cmsis/src/system_stm32f1xx.c ****       {
 270:library/cmsis/src/system_stm32f1xx.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
 271:library/cmsis/src/system_stm32f1xx.c ****        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 272:library/cmsis/src/system_stm32f1xx.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 273:library/cmsis/src/system_stm32f1xx.c ****        SystemCoreClock = (HSE_Value / prediv1factor) * pllmull; 
 274:library/cmsis/src/system_stm32f1xx.c ****  #else
 275:library/cmsis/src/system_stm32f1xx.c ****         /* HSE selected as PLL clock entry */
 276:library/cmsis/src/system_stm32f1xx.c ****         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 277:library/cmsis/src/system_stm32f1xx.c ****         {/* HSE oscillator clock divided by 2 */
 278:library/cmsis/src/system_stm32f1xx.c ****           SystemCoreClock = (HSE_Value >> 1) * pllmull;
 279:library/cmsis/src/system_stm32f1xx.c ****         }
 280:library/cmsis/src/system_stm32f1xx.c ****         else
 281:library/cmsis/src/system_stm32f1xx.c ****         {
 282:library/cmsis/src/system_stm32f1xx.c ****           SystemCoreClock = HSE_Value * pllmull;
 283:library/cmsis/src/system_stm32f1xx.c ****         }
 284:library/cmsis/src/system_stm32f1xx.c ****  #endif
 285:library/cmsis/src/system_stm32f1xx.c ****       }
 286:library/cmsis/src/system_stm32f1xx.c **** #else
 287:library/cmsis/src/system_stm32f1xx.c ****       pllmull = pllmull >> 18;
 288:library/cmsis/src/system_stm32f1xx.c ****       
 289:library/cmsis/src/system_stm32f1xx.c ****       if (pllmull != 0x0D)
 290:library/cmsis/src/system_stm32f1xx.c ****       {
 291:library/cmsis/src/system_stm32f1xx.c ****          pllmull += 2;
 292:library/cmsis/src/system_stm32f1xx.c ****       }
 293:library/cmsis/src/system_stm32f1xx.c ****       else
 294:library/cmsis/src/system_stm32f1xx.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 295:library/cmsis/src/system_stm32f1xx.c ****         pllmull = 13 / 2; 
 296:library/cmsis/src/system_stm32f1xx.c ****       }
 297:library/cmsis/src/system_stm32f1xx.c ****             
 298:library/cmsis/src/system_stm32f1xx.c ****       if (pllsource == 0x00)
 299:library/cmsis/src/system_stm32f1xx.c ****       {
 300:library/cmsis/src/system_stm32f1xx.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 301:library/cmsis/src/system_stm32f1xx.c ****         SystemCoreClock = (HSI_Value >> 1) * pllmull;
 302:library/cmsis/src/system_stm32f1xx.c ****       }
 303:library/cmsis/src/system_stm32f1xx.c ****       else
 304:library/cmsis/src/system_stm32f1xx.c ****       {/* PREDIV1 selected as PLL clock entry */
 305:library/cmsis/src/system_stm32f1xx.c ****         
 306:library/cmsis/src/system_stm32f1xx.c ****         /* Get PREDIV1 clock source and division factor */
 307:library/cmsis/src/system_stm32f1xx.c ****         prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 308:library/cmsis/src/system_stm32f1xx.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 309:library/cmsis/src/system_stm32f1xx.c ****         
 310:library/cmsis/src/system_stm32f1xx.c ****         if (prediv1source == 0)
 311:library/cmsis/src/system_stm32f1xx.c ****         { 
 312:library/cmsis/src/system_stm32f1xx.c ****           /* HSE oscillator clock selected as PREDIV1 clock entry */
 313:library/cmsis/src/system_stm32f1xx.c ****           SystemCoreClock = (HSE_Value / prediv1factor) * pllmull;          
 314:library/cmsis/src/system_stm32f1xx.c ****         }
 315:library/cmsis/src/system_stm32f1xx.c ****         else
 316:library/cmsis/src/system_stm32f1xx.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 317:library/cmsis/src/system_stm32f1xx.c ****           
ARM GAS  /tmp/ccZSgViz.s 			page 7


 318:library/cmsis/src/system_stm32f1xx.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 319:library/cmsis/src/system_stm32f1xx.c ****           prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
 320:library/cmsis/src/system_stm32f1xx.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
 321:library/cmsis/src/system_stm32f1xx.c ****           SystemCoreClock = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 322:library/cmsis/src/system_stm32f1xx.c ****         }
 323:library/cmsis/src/system_stm32f1xx.c ****       }
 324:library/cmsis/src/system_stm32f1xx.c **** #endif /* STM32F10X_CL */ 
 325:library/cmsis/src/system_stm32f1xx.c ****       break;
 326:library/cmsis/src/system_stm32f1xx.c **** 
 327:library/cmsis/src/system_stm32f1xx.c ****     default:
 328:library/cmsis/src/system_stm32f1xx.c ****       SystemCoreClock = HSI_Value;
 329:library/cmsis/src/system_stm32f1xx.c ****       break;
 330:library/cmsis/src/system_stm32f1xx.c ****   }
 331:library/cmsis/src/system_stm32f1xx.c ****   
 332:library/cmsis/src/system_stm32f1xx.c ****   /* Compute HCLK clock frequency ----------------*/
 333:library/cmsis/src/system_stm32f1xx.c ****   /* Get HCLK prescaler */
 334:library/cmsis/src/system_stm32f1xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 335:library/cmsis/src/system_stm32f1xx.c ****   /* HCLK clock frequency */
 336:library/cmsis/src/system_stm32f1xx.c ****   SystemCoreClock >>= tmp;  
 337:library/cmsis/src/system_stm32f1xx.c **** }
 338:library/cmsis/src/system_stm32f1xx.c **** 
 339:library/cmsis/src/system_stm32f1xx.c **** /**
 340:library/cmsis/src/system_stm32f1xx.c ****   * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
 341:library/cmsis/src/system_stm32f1xx.c ****   * @param  None
 342:library/cmsis/src/system_stm32f1xx.c ****   * @retval None
 343:library/cmsis/src/system_stm32f1xx.c ****   */
 344:library/cmsis/src/system_stm32f1xx.c **** static void SetSysClock(void)
 345:library/cmsis/src/system_stm32f1xx.c **** {
 346:library/cmsis/src/system_stm32f1xx.c **** #ifdef SYSCLK_FREQ_HSE
 347:library/cmsis/src/system_stm32f1xx.c ****   SetSysClockToHSE();
 348:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_24MHz
 349:library/cmsis/src/system_stm32f1xx.c ****   SetSysClockTo24();
 350:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_36MHz
 351:library/cmsis/src/system_stm32f1xx.c ****   SetSysClockTo36();
 352:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_48MHz
 353:library/cmsis/src/system_stm32f1xx.c ****   SetSysClockTo48();
 354:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_56MHz
 355:library/cmsis/src/system_stm32f1xx.c ****   SetSysClockTo56();  
 356:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_72MHz
 357:library/cmsis/src/system_stm32f1xx.c ****   SetSysClockTo72();
 358:library/cmsis/src/system_stm32f1xx.c **** #endif
 359:library/cmsis/src/system_stm32f1xx.c ****  
 360:library/cmsis/src/system_stm32f1xx.c ****  /* If none of the define above is enabled, the HSI is used as System clock
 361:library/cmsis/src/system_stm32f1xx.c ****     source (default after reset) */ 
 362:library/cmsis/src/system_stm32f1xx.c **** }
 363:library/cmsis/src/system_stm32f1xx.c **** 
 364:library/cmsis/src/system_stm32f1xx.c **** /**
 365:library/cmsis/src/system_stm32f1xx.c ****   * @brief  Setup the external memory controller. Called in startup_stm32f10x.s 
 366:library/cmsis/src/system_stm32f1xx.c ****   *          before jump to __main
 367:library/cmsis/src/system_stm32f1xx.c ****   * @param  None
 368:library/cmsis/src/system_stm32f1xx.c ****   * @retval None
 369:library/cmsis/src/system_stm32f1xx.c ****   */ 
 370:library/cmsis/src/system_stm32f1xx.c **** #ifdef DATA_IN_ExtSRAM
 371:library/cmsis/src/system_stm32f1xx.c **** /**
 372:library/cmsis/src/system_stm32f1xx.c ****   * @brief  Setup the external memory controller. 
 373:library/cmsis/src/system_stm32f1xx.c ****   *         Called in startup_stm32f10x_xx.s/.c before jump to main.
 374:library/cmsis/src/system_stm32f1xx.c ****   * 	      This function configures the external SRAM mounted on STM3210E-EVAL
ARM GAS  /tmp/ccZSgViz.s 			page 8


 375:library/cmsis/src/system_stm32f1xx.c ****   *         board (STM32 High density devices). This SRAM will be used as program
 376:library/cmsis/src/system_stm32f1xx.c ****   *         data memory (including heap and stack).
 377:library/cmsis/src/system_stm32f1xx.c ****   * @param  None
 378:library/cmsis/src/system_stm32f1xx.c ****   * @retval None
 379:library/cmsis/src/system_stm32f1xx.c ****   */ 
 380:library/cmsis/src/system_stm32f1xx.c **** void SystemInit_ExtMemCtl(void) 
 381:library/cmsis/src/system_stm32f1xx.c **** {
 382:library/cmsis/src/system_stm32f1xx.c **** /*!< FSMC Bank1 NOR/SRAM3 is used for the STM3210E-EVAL, if another Bank is 
 383:library/cmsis/src/system_stm32f1xx.c ****   required, then adjust the Register Addresses */
 384:library/cmsis/src/system_stm32f1xx.c **** 
 385:library/cmsis/src/system_stm32f1xx.c ****   /* Enable FSMC clock */
 386:library/cmsis/src/system_stm32f1xx.c ****   RCC->AHBENR = 0x00000114;
 387:library/cmsis/src/system_stm32f1xx.c ****   
 388:library/cmsis/src/system_stm32f1xx.c ****   /* Enable GPIOD, GPIOE, GPIOF and GPIOG clocks */  
 389:library/cmsis/src/system_stm32f1xx.c ****   RCC->APB2ENR = 0x000001E0;
 390:library/cmsis/src/system_stm32f1xx.c ****   
 391:library/cmsis/src/system_stm32f1xx.c **** /* ---------------  SRAM Data lines, NOE and NWE configuration ---------------*/
 392:library/cmsis/src/system_stm32f1xx.c **** /*----------------  SRAM Address lines configuration -------------------------*/
 393:library/cmsis/src/system_stm32f1xx.c **** /*----------------  NOE and NWE configuration --------------------------------*/  
 394:library/cmsis/src/system_stm32f1xx.c **** /*----------------  NE3 configuration ----------------------------------------*/
 395:library/cmsis/src/system_stm32f1xx.c **** /*----------------  NBL0, NBL1 configuration ---------------------------------*/
 396:library/cmsis/src/system_stm32f1xx.c ****   
 397:library/cmsis/src/system_stm32f1xx.c ****   GPIOD->CRL = 0x44BB44BB;  
 398:library/cmsis/src/system_stm32f1xx.c ****   GPIOD->CRH = 0xBBBBBBBB;
 399:library/cmsis/src/system_stm32f1xx.c **** 
 400:library/cmsis/src/system_stm32f1xx.c ****   GPIOE->CRL = 0xB44444BB;  
 401:library/cmsis/src/system_stm32f1xx.c ****   GPIOE->CRH = 0xBBBBBBBB;
 402:library/cmsis/src/system_stm32f1xx.c **** 
 403:library/cmsis/src/system_stm32f1xx.c ****   GPIOF->CRL = 0x44BBBBBB;  
 404:library/cmsis/src/system_stm32f1xx.c ****   GPIOF->CRH = 0xBBBB4444;
 405:library/cmsis/src/system_stm32f1xx.c **** 
 406:library/cmsis/src/system_stm32f1xx.c ****   GPIOG->CRL = 0x44BBBBBB;  
 407:library/cmsis/src/system_stm32f1xx.c ****   GPIOG->CRH = 0x44444B44;
 408:library/cmsis/src/system_stm32f1xx.c ****    
 409:library/cmsis/src/system_stm32f1xx.c **** /*----------------  FSMC Configuration ---------------------------------------*/  
 410:library/cmsis/src/system_stm32f1xx.c **** /*----------------  Enable FSMC Bank1_SRAM Bank ------------------------------*/
 411:library/cmsis/src/system_stm32f1xx.c ****   
 412:library/cmsis/src/system_stm32f1xx.c ****   FSMC_Bank1->BTCR[4] = 0x00001011;
 413:library/cmsis/src/system_stm32f1xx.c ****   FSMC_Bank1->BTCR[5] = 0x00000200;
 414:library/cmsis/src/system_stm32f1xx.c **** }
 415:library/cmsis/src/system_stm32f1xx.c **** #endif /* DATA_IN_ExtSRAM */
 416:library/cmsis/src/system_stm32f1xx.c **** 
 417:library/cmsis/src/system_stm32f1xx.c **** #ifdef SYSCLK_FREQ_HSE
 418:library/cmsis/src/system_stm32f1xx.c **** /**
 419:library/cmsis/src/system_stm32f1xx.c ****   * @brief  Selects HSE as System clock source and configure HCLK, PCLK2
 420:library/cmsis/src/system_stm32f1xx.c ****   *          and PCLK1 prescalers.
 421:library/cmsis/src/system_stm32f1xx.c ****   * @note   This function should be used only after reset.
 422:library/cmsis/src/system_stm32f1xx.c ****   * @param  None
 423:library/cmsis/src/system_stm32f1xx.c ****   * @retval None
 424:library/cmsis/src/system_stm32f1xx.c ****   */
 425:library/cmsis/src/system_stm32f1xx.c **** static void SetSysClockToHSE(void)
 426:library/cmsis/src/system_stm32f1xx.c **** {
 427:library/cmsis/src/system_stm32f1xx.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 428:library/cmsis/src/system_stm32f1xx.c ****   
 429:library/cmsis/src/system_stm32f1xx.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 430:library/cmsis/src/system_stm32f1xx.c ****   /* Enable HSE */    
 431:library/cmsis/src/system_stm32f1xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
ARM GAS  /tmp/ccZSgViz.s 			page 9


 432:library/cmsis/src/system_stm32f1xx.c ****  
 433:library/cmsis/src/system_stm32f1xx.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 434:library/cmsis/src/system_stm32f1xx.c ****   do
 435:library/cmsis/src/system_stm32f1xx.c ****   {
 436:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 437:library/cmsis/src/system_stm32f1xx.c ****     StartUpCounter++;  
 438:library/cmsis/src/system_stm32f1xx.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 439:library/cmsis/src/system_stm32f1xx.c **** 
 440:library/cmsis/src/system_stm32f1xx.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 441:library/cmsis/src/system_stm32f1xx.c ****   {
 442:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = (uint32_t)0x01;
 443:library/cmsis/src/system_stm32f1xx.c ****   }
 444:library/cmsis/src/system_stm32f1xx.c ****   else
 445:library/cmsis/src/system_stm32f1xx.c ****   {
 446:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = (uint32_t)0x00;
 447:library/cmsis/src/system_stm32f1xx.c ****   }  
 448:library/cmsis/src/system_stm32f1xx.c **** 
 449:library/cmsis/src/system_stm32f1xx.c ****   if (HSEStatus == (uint32_t)0x01)
 450:library/cmsis/src/system_stm32f1xx.c ****   {
 451:library/cmsis/src/system_stm32f1xx.c **** 
 452:library/cmsis/src/system_stm32f1xx.c **** #if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL 
 453:library/cmsis/src/system_stm32f1xx.c ****     /* Enable Prefetch Buffer */
 454:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 455:library/cmsis/src/system_stm32f1xx.c **** 
 456:library/cmsis/src/system_stm32f1xx.c ****     /* Flash 0 wait state */
 457:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 458:library/cmsis/src/system_stm32f1xx.c **** 
 459:library/cmsis/src/system_stm32f1xx.c **** #ifndef STM32F10X_CL
 460:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
 461:library/cmsis/src/system_stm32f1xx.c **** #else
 462:library/cmsis/src/system_stm32f1xx.c ****     if (HSE_Value <= 24000000)
 463:library/cmsis/src/system_stm32f1xx.c **** 	{
 464:library/cmsis/src/system_stm32f1xx.c ****       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
 465:library/cmsis/src/system_stm32f1xx.c **** 	}
 466:library/cmsis/src/system_stm32f1xx.c **** 	else
 467:library/cmsis/src/system_stm32f1xx.c **** 	{
 468:library/cmsis/src/system_stm32f1xx.c ****       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;
 469:library/cmsis/src/system_stm32f1xx.c **** 	}
 470:library/cmsis/src/system_stm32f1xx.c **** #endif /* STM32F10X_CL */
 471:library/cmsis/src/system_stm32f1xx.c **** #endif
 472:library/cmsis/src/system_stm32f1xx.c ****  
 473:library/cmsis/src/system_stm32f1xx.c ****     /* HCLK = SYSCLK */
 474:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 475:library/cmsis/src/system_stm32f1xx.c ****       
 476:library/cmsis/src/system_stm32f1xx.c ****     /* PCLK2 = HCLK */
 477:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 478:library/cmsis/src/system_stm32f1xx.c ****     
 479:library/cmsis/src/system_stm32f1xx.c ****     /* PCLK1 = HCLK */
 480:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 481:library/cmsis/src/system_stm32f1xx.c ****     
 482:library/cmsis/src/system_stm32f1xx.c ****     /* Select HSE as system clock source */
 483:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 484:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSE;    
 485:library/cmsis/src/system_stm32f1xx.c **** 
 486:library/cmsis/src/system_stm32f1xx.c ****     /* Wait till HSE is used as system clock source */
 487:library/cmsis/src/system_stm32f1xx.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x04)
 488:library/cmsis/src/system_stm32f1xx.c ****     {
ARM GAS  /tmp/ccZSgViz.s 			page 10


 489:library/cmsis/src/system_stm32f1xx.c ****     }
 490:library/cmsis/src/system_stm32f1xx.c ****   }
 491:library/cmsis/src/system_stm32f1xx.c ****   else
 492:library/cmsis/src/system_stm32f1xx.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 493:library/cmsis/src/system_stm32f1xx.c ****          configuration. User can add here some code to deal with this error */
 494:library/cmsis/src/system_stm32f1xx.c ****   }  
 495:library/cmsis/src/system_stm32f1xx.c **** }
 496:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_24MHz
 497:library/cmsis/src/system_stm32f1xx.c **** /**
 498:library/cmsis/src/system_stm32f1xx.c ****   * @brief  Sets System clock frequency to 24MHz and configure HCLK, PCLK2 
 499:library/cmsis/src/system_stm32f1xx.c ****   *          and PCLK1 prescalers.
 500:library/cmsis/src/system_stm32f1xx.c ****   * @note   This function should be used only after reset.
 501:library/cmsis/src/system_stm32f1xx.c ****   * @param  None
 502:library/cmsis/src/system_stm32f1xx.c ****   * @retval None
 503:library/cmsis/src/system_stm32f1xx.c ****   */
 504:library/cmsis/src/system_stm32f1xx.c **** static void SetSysClockTo24(void)
 505:library/cmsis/src/system_stm32f1xx.c **** {
 506:library/cmsis/src/system_stm32f1xx.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 507:library/cmsis/src/system_stm32f1xx.c ****   
 508:library/cmsis/src/system_stm32f1xx.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 509:library/cmsis/src/system_stm32f1xx.c ****   /* Enable HSE */    
 510:library/cmsis/src/system_stm32f1xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 511:library/cmsis/src/system_stm32f1xx.c ****  
 512:library/cmsis/src/system_stm32f1xx.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 513:library/cmsis/src/system_stm32f1xx.c ****   do
 514:library/cmsis/src/system_stm32f1xx.c ****   {
 515:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 516:library/cmsis/src/system_stm32f1xx.c ****     StartUpCounter++;  
 517:library/cmsis/src/system_stm32f1xx.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 518:library/cmsis/src/system_stm32f1xx.c **** 
 519:library/cmsis/src/system_stm32f1xx.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 520:library/cmsis/src/system_stm32f1xx.c ****   {
 521:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = (uint32_t)0x01;
 522:library/cmsis/src/system_stm32f1xx.c ****   }
 523:library/cmsis/src/system_stm32f1xx.c ****   else
 524:library/cmsis/src/system_stm32f1xx.c ****   {
 525:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = (uint32_t)0x00;
 526:library/cmsis/src/system_stm32f1xx.c ****   }  
 527:library/cmsis/src/system_stm32f1xx.c **** 
 528:library/cmsis/src/system_stm32f1xx.c ****   if (HSEStatus == (uint32_t)0x01)
 529:library/cmsis/src/system_stm32f1xx.c ****   {
 530:library/cmsis/src/system_stm32f1xx.c **** #if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL 
 531:library/cmsis/src/system_stm32f1xx.c ****     /* Enable Prefetch Buffer */
 532:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 533:library/cmsis/src/system_stm32f1xx.c **** 
 534:library/cmsis/src/system_stm32f1xx.c ****     /* Flash 0 wait state */
 535:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 536:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
 537:library/cmsis/src/system_stm32f1xx.c **** #endif
 538:library/cmsis/src/system_stm32f1xx.c ****  
 539:library/cmsis/src/system_stm32f1xx.c ****     /* HCLK = SYSCLK */
 540:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 541:library/cmsis/src/system_stm32f1xx.c ****       
 542:library/cmsis/src/system_stm32f1xx.c ****     /* PCLK2 = HCLK */
 543:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 544:library/cmsis/src/system_stm32f1xx.c ****     
 545:library/cmsis/src/system_stm32f1xx.c ****     /* PCLK1 = HCLK */
ARM GAS  /tmp/ccZSgViz.s 			page 11


 546:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 547:library/cmsis/src/system_stm32f1xx.c ****     
 548:library/cmsis/src/system_stm32f1xx.c **** #ifdef STM32F10X_CL
 549:library/cmsis/src/system_stm32f1xx.c ****     /* Configure PLLs ------------------------------------------------------*/
 550:library/cmsis/src/system_stm32f1xx.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 6 = 24 MHz */ 
 551:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 552:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 553:library/cmsis/src/system_stm32f1xx.c ****                             RCC_CFGR_PLLMULL6); 
 554:library/cmsis/src/system_stm32f1xx.c **** 
 555:library/cmsis/src/system_stm32f1xx.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 556:library/cmsis/src/system_stm32f1xx.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 10 = 4 MHz */       
 557:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 558:library/cmsis/src/system_stm32f1xx.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 559:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 560:library/cmsis/src/system_stm32f1xx.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV10);
 561:library/cmsis/src/system_stm32f1xx.c ****   
 562:library/cmsis/src/system_stm32f1xx.c ****     /* Enable PLL2 */
 563:library/cmsis/src/system_stm32f1xx.c ****     RCC->CR |= RCC_CR_PLL2ON;
 564:library/cmsis/src/system_stm32f1xx.c ****     /* Wait till PLL2 is ready */
 565:library/cmsis/src/system_stm32f1xx.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 566:library/cmsis/src/system_stm32f1xx.c ****     {
 567:library/cmsis/src/system_stm32f1xx.c ****     }   
 568:library/cmsis/src/system_stm32f1xx.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL)
 569:library/cmsis/src/system_stm32f1xx.c ****     /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
 570:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 571:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLL
 572:library/cmsis/src/system_stm32f1xx.c **** #else    
 573:library/cmsis/src/system_stm32f1xx.c ****     /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
 574:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 575:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
 576:library/cmsis/src/system_stm32f1xx.c **** #endif /* STM32F10X_CL */
 577:library/cmsis/src/system_stm32f1xx.c **** 
 578:library/cmsis/src/system_stm32f1xx.c ****     /* Enable PLL */
 579:library/cmsis/src/system_stm32f1xx.c ****     RCC->CR |= RCC_CR_PLLON;
 580:library/cmsis/src/system_stm32f1xx.c **** 
 581:library/cmsis/src/system_stm32f1xx.c ****     /* Wait till PLL is ready */
 582:library/cmsis/src/system_stm32f1xx.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 583:library/cmsis/src/system_stm32f1xx.c ****     {
 584:library/cmsis/src/system_stm32f1xx.c ****     }
 585:library/cmsis/src/system_stm32f1xx.c **** 
 586:library/cmsis/src/system_stm32f1xx.c ****     /* Select PLL as system clock source */
 587:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 588:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 589:library/cmsis/src/system_stm32f1xx.c **** 
 590:library/cmsis/src/system_stm32f1xx.c ****     /* Wait till PLL is used as system clock source */
 591:library/cmsis/src/system_stm32f1xx.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 592:library/cmsis/src/system_stm32f1xx.c ****     {
 593:library/cmsis/src/system_stm32f1xx.c ****     }
 594:library/cmsis/src/system_stm32f1xx.c ****   }
 595:library/cmsis/src/system_stm32f1xx.c ****   else
 596:library/cmsis/src/system_stm32f1xx.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 597:library/cmsis/src/system_stm32f1xx.c ****          configuration. User can add here some code to deal with this error */
 598:library/cmsis/src/system_stm32f1xx.c ****   } 
 599:library/cmsis/src/system_stm32f1xx.c **** }
 600:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_36MHz
 601:library/cmsis/src/system_stm32f1xx.c **** /**
 602:library/cmsis/src/system_stm32f1xx.c ****   * @brief  Sets System clock frequency to 36MHz and configure HCLK, PCLK2 
ARM GAS  /tmp/ccZSgViz.s 			page 12


 603:library/cmsis/src/system_stm32f1xx.c ****   *          and PCLK1 prescalers. 
 604:library/cmsis/src/system_stm32f1xx.c ****   * @note   This function should be used only after reset.
 605:library/cmsis/src/system_stm32f1xx.c ****   * @param  None
 606:library/cmsis/src/system_stm32f1xx.c ****   * @retval None
 607:library/cmsis/src/system_stm32f1xx.c ****   */
 608:library/cmsis/src/system_stm32f1xx.c **** static void SetSysClockTo36(void)
 609:library/cmsis/src/system_stm32f1xx.c **** {
 610:library/cmsis/src/system_stm32f1xx.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 611:library/cmsis/src/system_stm32f1xx.c ****   
 612:library/cmsis/src/system_stm32f1xx.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 613:library/cmsis/src/system_stm32f1xx.c ****   /* Enable HSE */    
 614:library/cmsis/src/system_stm32f1xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 615:library/cmsis/src/system_stm32f1xx.c ****  
 616:library/cmsis/src/system_stm32f1xx.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 617:library/cmsis/src/system_stm32f1xx.c ****   do
 618:library/cmsis/src/system_stm32f1xx.c ****   {
 619:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 620:library/cmsis/src/system_stm32f1xx.c ****     StartUpCounter++;  
 621:library/cmsis/src/system_stm32f1xx.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 622:library/cmsis/src/system_stm32f1xx.c **** 
 623:library/cmsis/src/system_stm32f1xx.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 624:library/cmsis/src/system_stm32f1xx.c ****   {
 625:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = (uint32_t)0x01;
 626:library/cmsis/src/system_stm32f1xx.c ****   }
 627:library/cmsis/src/system_stm32f1xx.c ****   else
 628:library/cmsis/src/system_stm32f1xx.c ****   {
 629:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = (uint32_t)0x00;
 630:library/cmsis/src/system_stm32f1xx.c ****   }  
 631:library/cmsis/src/system_stm32f1xx.c **** 
 632:library/cmsis/src/system_stm32f1xx.c ****   if (HSEStatus == (uint32_t)0x01)
 633:library/cmsis/src/system_stm32f1xx.c ****   {
 634:library/cmsis/src/system_stm32f1xx.c ****     /* Enable Prefetch Buffer */
 635:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 636:library/cmsis/src/system_stm32f1xx.c **** 
 637:library/cmsis/src/system_stm32f1xx.c ****     /* Flash 1 wait state */
 638:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 639:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;    
 640:library/cmsis/src/system_stm32f1xx.c ****  
 641:library/cmsis/src/system_stm32f1xx.c ****     /* HCLK = SYSCLK */
 642:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 643:library/cmsis/src/system_stm32f1xx.c ****       
 644:library/cmsis/src/system_stm32f1xx.c ****     /* PCLK2 = HCLK */
 645:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 646:library/cmsis/src/system_stm32f1xx.c ****     
 647:library/cmsis/src/system_stm32f1xx.c ****     /* PCLK1 = HCLK */
 648:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 649:library/cmsis/src/system_stm32f1xx.c ****     
 650:library/cmsis/src/system_stm32f1xx.c **** #ifdef STM32F10X_CL
 651:library/cmsis/src/system_stm32f1xx.c ****     /* Configure PLLs ------------------------------------------------------*/
 652:library/cmsis/src/system_stm32f1xx.c ****     
 653:library/cmsis/src/system_stm32f1xx.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 9 = 36 MHz */ 
 654:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 655:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 656:library/cmsis/src/system_stm32f1xx.c ****                             RCC_CFGR_PLLMULL9); 
 657:library/cmsis/src/system_stm32f1xx.c **** 
 658:library/cmsis/src/system_stm32f1xx.c **** 	/*!< PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 659:library/cmsis/src/system_stm32f1xx.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 10 = 4 MHz */
ARM GAS  /tmp/ccZSgViz.s 			page 13


 660:library/cmsis/src/system_stm32f1xx.c ****         
 661:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 662:library/cmsis/src/system_stm32f1xx.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 663:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 664:library/cmsis/src/system_stm32f1xx.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV10);
 665:library/cmsis/src/system_stm32f1xx.c ****   
 666:library/cmsis/src/system_stm32f1xx.c ****     /* Enable PLL2 */
 667:library/cmsis/src/system_stm32f1xx.c ****     RCC->CR |= RCC_CR_PLL2ON;
 668:library/cmsis/src/system_stm32f1xx.c ****     /* Wait till PLL2 is ready */
 669:library/cmsis/src/system_stm32f1xx.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 670:library/cmsis/src/system_stm32f1xx.c ****     {
 671:library/cmsis/src/system_stm32f1xx.c ****     }
 672:library/cmsis/src/system_stm32f1xx.c ****     
 673:library/cmsis/src/system_stm32f1xx.c **** #else    
 674:library/cmsis/src/system_stm32f1xx.c ****     /*  PLL configuration: PLLCLK = (HSE / 2) * 9 = 36 MHz */
 675:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 676:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL9);
 677:library/cmsis/src/system_stm32f1xx.c **** #endif /* STM32F10X_CL */
 678:library/cmsis/src/system_stm32f1xx.c **** 
 679:library/cmsis/src/system_stm32f1xx.c ****     /* Enable PLL */
 680:library/cmsis/src/system_stm32f1xx.c ****     RCC->CR |= RCC_CR_PLLON;
 681:library/cmsis/src/system_stm32f1xx.c **** 
 682:library/cmsis/src/system_stm32f1xx.c ****     /* Wait till PLL is ready */
 683:library/cmsis/src/system_stm32f1xx.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 684:library/cmsis/src/system_stm32f1xx.c ****     {
 685:library/cmsis/src/system_stm32f1xx.c ****     }
 686:library/cmsis/src/system_stm32f1xx.c **** 
 687:library/cmsis/src/system_stm32f1xx.c ****     /* Select PLL as system clock source */
 688:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 689:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 690:library/cmsis/src/system_stm32f1xx.c **** 
 691:library/cmsis/src/system_stm32f1xx.c ****     /* Wait till PLL is used as system clock source */
 692:library/cmsis/src/system_stm32f1xx.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 693:library/cmsis/src/system_stm32f1xx.c ****     {
 694:library/cmsis/src/system_stm32f1xx.c ****     }
 695:library/cmsis/src/system_stm32f1xx.c ****   }
 696:library/cmsis/src/system_stm32f1xx.c ****   else
 697:library/cmsis/src/system_stm32f1xx.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 698:library/cmsis/src/system_stm32f1xx.c ****          configuration. User can add here some code to deal with this error */
 699:library/cmsis/src/system_stm32f1xx.c ****   } 
 700:library/cmsis/src/system_stm32f1xx.c **** }
 701:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_48MHz
 702:library/cmsis/src/system_stm32f1xx.c **** /**
 703:library/cmsis/src/system_stm32f1xx.c ****   * @brief  Sets System clock frequency to 48MHz and configure HCLK, PCLK2 
 704:library/cmsis/src/system_stm32f1xx.c ****   *          and PCLK1 prescalers. 
 705:library/cmsis/src/system_stm32f1xx.c ****   * @note   This function should be used only after reset.
 706:library/cmsis/src/system_stm32f1xx.c ****   * @param  None
 707:library/cmsis/src/system_stm32f1xx.c ****   * @retval None
 708:library/cmsis/src/system_stm32f1xx.c ****   */
 709:library/cmsis/src/system_stm32f1xx.c **** static void SetSysClockTo48(void)
 710:library/cmsis/src/system_stm32f1xx.c **** {
 711:library/cmsis/src/system_stm32f1xx.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 712:library/cmsis/src/system_stm32f1xx.c ****   
 713:library/cmsis/src/system_stm32f1xx.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 714:library/cmsis/src/system_stm32f1xx.c ****   /* Enable HSE */    
 715:library/cmsis/src/system_stm32f1xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 716:library/cmsis/src/system_stm32f1xx.c ****  
ARM GAS  /tmp/ccZSgViz.s 			page 14


 717:library/cmsis/src/system_stm32f1xx.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 718:library/cmsis/src/system_stm32f1xx.c ****   do
 719:library/cmsis/src/system_stm32f1xx.c ****   {
 720:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 721:library/cmsis/src/system_stm32f1xx.c ****     StartUpCounter++;  
 722:library/cmsis/src/system_stm32f1xx.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 723:library/cmsis/src/system_stm32f1xx.c **** 
 724:library/cmsis/src/system_stm32f1xx.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 725:library/cmsis/src/system_stm32f1xx.c ****   {
 726:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = (uint32_t)0x01;
 727:library/cmsis/src/system_stm32f1xx.c ****   }
 728:library/cmsis/src/system_stm32f1xx.c ****   else
 729:library/cmsis/src/system_stm32f1xx.c ****   {
 730:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = (uint32_t)0x00;
 731:library/cmsis/src/system_stm32f1xx.c ****   }  
 732:library/cmsis/src/system_stm32f1xx.c **** 
 733:library/cmsis/src/system_stm32f1xx.c ****   if (HSEStatus == (uint32_t)0x01)
 734:library/cmsis/src/system_stm32f1xx.c ****   {
 735:library/cmsis/src/system_stm32f1xx.c ****     /* Enable Prefetch Buffer */
 736:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 737:library/cmsis/src/system_stm32f1xx.c **** 
 738:library/cmsis/src/system_stm32f1xx.c ****     /* Flash 1 wait state */
 739:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 740:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;    
 741:library/cmsis/src/system_stm32f1xx.c ****  
 742:library/cmsis/src/system_stm32f1xx.c ****     /* HCLK = SYSCLK */
 743:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 744:library/cmsis/src/system_stm32f1xx.c ****       
 745:library/cmsis/src/system_stm32f1xx.c ****     /* PCLK2 = HCLK */
 746:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 747:library/cmsis/src/system_stm32f1xx.c ****     
 748:library/cmsis/src/system_stm32f1xx.c ****     /* PCLK1 = HCLK */
 749:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 750:library/cmsis/src/system_stm32f1xx.c ****     
 751:library/cmsis/src/system_stm32f1xx.c **** #ifdef STM32F10X_CL
 752:library/cmsis/src/system_stm32f1xx.c ****     /* Configure PLLs ------------------------------------------------------*/
 753:library/cmsis/src/system_stm32f1xx.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 754:library/cmsis/src/system_stm32f1xx.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
 755:library/cmsis/src/system_stm32f1xx.c ****         
 756:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 757:library/cmsis/src/system_stm32f1xx.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 758:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 759:library/cmsis/src/system_stm32f1xx.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
 760:library/cmsis/src/system_stm32f1xx.c ****   
 761:library/cmsis/src/system_stm32f1xx.c ****     /* Enable PLL2 */
 762:library/cmsis/src/system_stm32f1xx.c ****     RCC->CR |= RCC_CR_PLL2ON;
 763:library/cmsis/src/system_stm32f1xx.c ****     /* Wait till PLL2 is ready */
 764:library/cmsis/src/system_stm32f1xx.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 765:library/cmsis/src/system_stm32f1xx.c ****     {
 766:library/cmsis/src/system_stm32f1xx.c ****     }
 767:library/cmsis/src/system_stm32f1xx.c ****     
 768:library/cmsis/src/system_stm32f1xx.c ****    
 769:library/cmsis/src/system_stm32f1xx.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 6 = 48 MHz */ 
 770:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 771:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 772:library/cmsis/src/system_stm32f1xx.c ****                             RCC_CFGR_PLLMULL6); 
 773:library/cmsis/src/system_stm32f1xx.c **** #else    
ARM GAS  /tmp/ccZSgViz.s 			page 15


 774:library/cmsis/src/system_stm32f1xx.c ****     /*  PLL configuration: PLLCLK = HSE * 6 = 48 MHz */
 775:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 776:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL6);
 777:library/cmsis/src/system_stm32f1xx.c **** #endif /* STM32F10X_CL */
 778:library/cmsis/src/system_stm32f1xx.c **** 
 779:library/cmsis/src/system_stm32f1xx.c ****     /* Enable PLL */
 780:library/cmsis/src/system_stm32f1xx.c ****     RCC->CR |= RCC_CR_PLLON;
 781:library/cmsis/src/system_stm32f1xx.c **** 
 782:library/cmsis/src/system_stm32f1xx.c ****     /* Wait till PLL is ready */
 783:library/cmsis/src/system_stm32f1xx.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 784:library/cmsis/src/system_stm32f1xx.c ****     {
 785:library/cmsis/src/system_stm32f1xx.c ****     }
 786:library/cmsis/src/system_stm32f1xx.c **** 
 787:library/cmsis/src/system_stm32f1xx.c ****     /* Select PLL as system clock source */
 788:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 789:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 790:library/cmsis/src/system_stm32f1xx.c **** 
 791:library/cmsis/src/system_stm32f1xx.c ****     /* Wait till PLL is used as system clock source */
 792:library/cmsis/src/system_stm32f1xx.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 793:library/cmsis/src/system_stm32f1xx.c ****     {
 794:library/cmsis/src/system_stm32f1xx.c ****     }
 795:library/cmsis/src/system_stm32f1xx.c ****   }
 796:library/cmsis/src/system_stm32f1xx.c ****   else
 797:library/cmsis/src/system_stm32f1xx.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 798:library/cmsis/src/system_stm32f1xx.c ****          configuration. User can add here some code to deal with this error */
 799:library/cmsis/src/system_stm32f1xx.c ****   } 
 800:library/cmsis/src/system_stm32f1xx.c **** }
 801:library/cmsis/src/system_stm32f1xx.c **** 
 802:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_56MHz
 803:library/cmsis/src/system_stm32f1xx.c **** /**
 804:library/cmsis/src/system_stm32f1xx.c ****   * @brief  Sets System clock frequency to 56MHz and configure HCLK, PCLK2 
 805:library/cmsis/src/system_stm32f1xx.c ****   *          and PCLK1 prescalers. 
 806:library/cmsis/src/system_stm32f1xx.c ****   * @note   This function should be used only after reset.
 807:library/cmsis/src/system_stm32f1xx.c ****   * @param  None
 808:library/cmsis/src/system_stm32f1xx.c ****   * @retval None
 809:library/cmsis/src/system_stm32f1xx.c ****   */
 810:library/cmsis/src/system_stm32f1xx.c **** static void SetSysClockTo56(void)
 811:library/cmsis/src/system_stm32f1xx.c **** {
 812:library/cmsis/src/system_stm32f1xx.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 813:library/cmsis/src/system_stm32f1xx.c ****   
 814:library/cmsis/src/system_stm32f1xx.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/   
 815:library/cmsis/src/system_stm32f1xx.c ****   /* Enable HSE */    
 816:library/cmsis/src/system_stm32f1xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 817:library/cmsis/src/system_stm32f1xx.c ****  
 818:library/cmsis/src/system_stm32f1xx.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 819:library/cmsis/src/system_stm32f1xx.c ****   do
 820:library/cmsis/src/system_stm32f1xx.c ****   {
 821:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 822:library/cmsis/src/system_stm32f1xx.c ****     StartUpCounter++;  
 823:library/cmsis/src/system_stm32f1xx.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
 824:library/cmsis/src/system_stm32f1xx.c **** 
 825:library/cmsis/src/system_stm32f1xx.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 826:library/cmsis/src/system_stm32f1xx.c ****   {
 827:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = (uint32_t)0x01;
 828:library/cmsis/src/system_stm32f1xx.c ****   }
 829:library/cmsis/src/system_stm32f1xx.c ****   else
 830:library/cmsis/src/system_stm32f1xx.c ****   {
ARM GAS  /tmp/ccZSgViz.s 			page 16


 831:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = (uint32_t)0x00;
 832:library/cmsis/src/system_stm32f1xx.c ****   }  
 833:library/cmsis/src/system_stm32f1xx.c **** 
 834:library/cmsis/src/system_stm32f1xx.c ****   if (HSEStatus == (uint32_t)0x01)
 835:library/cmsis/src/system_stm32f1xx.c ****   {
 836:library/cmsis/src/system_stm32f1xx.c ****     /* Enable Prefetch Buffer */
 837:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 838:library/cmsis/src/system_stm32f1xx.c **** 
 839:library/cmsis/src/system_stm32f1xx.c ****     /* Flash 2 wait state */
 840:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 841:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 842:library/cmsis/src/system_stm32f1xx.c ****  
 843:library/cmsis/src/system_stm32f1xx.c ****     /* HCLK = SYSCLK */
 844:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 845:library/cmsis/src/system_stm32f1xx.c ****       
 846:library/cmsis/src/system_stm32f1xx.c ****     /* PCLK2 = HCLK */
 847:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 848:library/cmsis/src/system_stm32f1xx.c ****     
 849:library/cmsis/src/system_stm32f1xx.c ****     /* PCLK1 = HCLK */
 850:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 851:library/cmsis/src/system_stm32f1xx.c **** 
 852:library/cmsis/src/system_stm32f1xx.c **** #ifdef STM32F10X_CL
 853:library/cmsis/src/system_stm32f1xx.c ****     /* Configure PLLs ------------------------------------------------------*/
 854:library/cmsis/src/system_stm32f1xx.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 855:library/cmsis/src/system_stm32f1xx.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
 856:library/cmsis/src/system_stm32f1xx.c ****         
 857:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 858:library/cmsis/src/system_stm32f1xx.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 859:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 860:library/cmsis/src/system_stm32f1xx.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
 861:library/cmsis/src/system_stm32f1xx.c ****   
 862:library/cmsis/src/system_stm32f1xx.c ****     /* Enable PLL2 */
 863:library/cmsis/src/system_stm32f1xx.c ****     RCC->CR |= RCC_CR_PLL2ON;
 864:library/cmsis/src/system_stm32f1xx.c ****     /* Wait till PLL2 is ready */
 865:library/cmsis/src/system_stm32f1xx.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 866:library/cmsis/src/system_stm32f1xx.c ****     {
 867:library/cmsis/src/system_stm32f1xx.c ****     }
 868:library/cmsis/src/system_stm32f1xx.c ****     
 869:library/cmsis/src/system_stm32f1xx.c ****    
 870:library/cmsis/src/system_stm32f1xx.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 7 = 56 MHz */ 
 871:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 872:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 873:library/cmsis/src/system_stm32f1xx.c ****                             RCC_CFGR_PLLMULL7); 
 874:library/cmsis/src/system_stm32f1xx.c **** #else     
 875:library/cmsis/src/system_stm32f1xx.c ****     /* PLL configuration: PLLCLK = HSE * 7 = 56 MHz */
 876:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 877:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL7);
 878:library/cmsis/src/system_stm32f1xx.c **** 
 879:library/cmsis/src/system_stm32f1xx.c **** #endif /* STM32F10X_CL */
 880:library/cmsis/src/system_stm32f1xx.c **** 
 881:library/cmsis/src/system_stm32f1xx.c ****     /* Enable PLL */
 882:library/cmsis/src/system_stm32f1xx.c ****     RCC->CR |= RCC_CR_PLLON;
 883:library/cmsis/src/system_stm32f1xx.c **** 
 884:library/cmsis/src/system_stm32f1xx.c ****     /* Wait till PLL is ready */
 885:library/cmsis/src/system_stm32f1xx.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 886:library/cmsis/src/system_stm32f1xx.c ****     {
 887:library/cmsis/src/system_stm32f1xx.c ****     }
ARM GAS  /tmp/ccZSgViz.s 			page 17


 888:library/cmsis/src/system_stm32f1xx.c **** 
 889:library/cmsis/src/system_stm32f1xx.c ****     /* Select PLL as system clock source */
 890:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 891:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 892:library/cmsis/src/system_stm32f1xx.c **** 
 893:library/cmsis/src/system_stm32f1xx.c ****     /* Wait till PLL is used as system clock source */
 894:library/cmsis/src/system_stm32f1xx.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 895:library/cmsis/src/system_stm32f1xx.c ****     {
 896:library/cmsis/src/system_stm32f1xx.c ****     }
 897:library/cmsis/src/system_stm32f1xx.c ****   }
 898:library/cmsis/src/system_stm32f1xx.c ****   else
 899:library/cmsis/src/system_stm32f1xx.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 900:library/cmsis/src/system_stm32f1xx.c ****          configuration. User can add here some code to deal with this error */
 901:library/cmsis/src/system_stm32f1xx.c ****   } 
 902:library/cmsis/src/system_stm32f1xx.c **** }
 903:library/cmsis/src/system_stm32f1xx.c **** 
 904:library/cmsis/src/system_stm32f1xx.c **** #elif defined SYSCLK_FREQ_72MHz
 905:library/cmsis/src/system_stm32f1xx.c **** /**
 906:library/cmsis/src/system_stm32f1xx.c ****   * @brief  Sets System clock frequency to 72MHz and configure HCLK, PCLK2 
 907:library/cmsis/src/system_stm32f1xx.c ****   *          and PCLK1 prescalers. 
 908:library/cmsis/src/system_stm32f1xx.c ****   * @note   This function should be used only after reset.
 909:library/cmsis/src/system_stm32f1xx.c ****   * @param  None
 910:library/cmsis/src/system_stm32f1xx.c ****   * @retval None
 911:library/cmsis/src/system_stm32f1xx.c ****   */
 912:library/cmsis/src/system_stm32f1xx.c **** static void SetSysClockTo72(void)
 913:library/cmsis/src/system_stm32f1xx.c **** {
  27              		.loc 1 913 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 82B0     		sub	sp, sp, #8
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
 914:library/cmsis/src/system_stm32f1xx.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
  35              		.loc 1 914 0
  36 0002 0023     		movs	r3, #0
  37 0004 0193     		str	r3, [sp, #4]
  38 0006 0093     		str	r3, [sp]
 915:library/cmsis/src/system_stm32f1xx.c ****   
 916:library/cmsis/src/system_stm32f1xx.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 917:library/cmsis/src/system_stm32f1xx.c ****   /* Enable HSE */    
 918:library/cmsis/src/system_stm32f1xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
  39              		.loc 1 918 0
  40 0008 2C4A     		ldr	r2, .L10
  41 000a 1368     		ldr	r3, [r2]
  42 000c 43F48033 		orr	r3, r3, #65536
  43 0010 1360     		str	r3, [r2]
  44              	.L3:
 919:library/cmsis/src/system_stm32f1xx.c ****  
 920:library/cmsis/src/system_stm32f1xx.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 921:library/cmsis/src/system_stm32f1xx.c ****   do
 922:library/cmsis/src/system_stm32f1xx.c ****   {
 923:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
  45              		.loc 1 923 0 discriminator 2
  46 0012 2A4B     		ldr	r3, .L10
  47 0014 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccZSgViz.s 			page 18


  48 0016 03F40033 		and	r3, r3, #131072
  49 001a 0093     		str	r3, [sp]
 924:library/cmsis/src/system_stm32f1xx.c ****     StartUpCounter++;  
  50              		.loc 1 924 0 discriminator 2
  51 001c 019B     		ldr	r3, [sp, #4]
  52 001e 0133     		adds	r3, r3, #1
  53 0020 0193     		str	r3, [sp, #4]
 925:library/cmsis/src/system_stm32f1xx.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSEStartUp_TimeOut));
  54              		.loc 1 925 0 discriminator 2
  55 0022 009B     		ldr	r3, [sp]
  56 0024 1BB9     		cbnz	r3, .L2
  57              		.loc 1 925 0 is_stmt 0 discriminator 1
  58 0026 019B     		ldr	r3, [sp, #4]
  59 0028 B3F5A06F 		cmp	r3, #1280
  60 002c F1D1     		bne	.L3
  61              	.L2:
 926:library/cmsis/src/system_stm32f1xx.c **** 
 927:library/cmsis/src/system_stm32f1xx.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
  62              		.loc 1 927 0 is_stmt 1
  63 002e 234B     		ldr	r3, .L10
  64 0030 1B68     		ldr	r3, [r3]
  65 0032 13F4003F 		tst	r3, #131072
  66 0036 02D0     		beq	.L4
 928:library/cmsis/src/system_stm32f1xx.c ****   {
 929:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = (uint32_t)0x01;
  67              		.loc 1 929 0
  68 0038 0123     		movs	r3, #1
  69 003a 0093     		str	r3, [sp]
  70 003c 01E0     		b	.L5
  71              	.L4:
 930:library/cmsis/src/system_stm32f1xx.c ****   }
 931:library/cmsis/src/system_stm32f1xx.c ****   else
 932:library/cmsis/src/system_stm32f1xx.c ****   {
 933:library/cmsis/src/system_stm32f1xx.c ****     HSEStatus = (uint32_t)0x00;
  72              		.loc 1 933 0
  73 003e 0023     		movs	r3, #0
  74 0040 0093     		str	r3, [sp]
  75              	.L5:
 934:library/cmsis/src/system_stm32f1xx.c ****   }  
 935:library/cmsis/src/system_stm32f1xx.c **** 
 936:library/cmsis/src/system_stm32f1xx.c ****   if (HSEStatus == (uint32_t)0x01)
  76              		.loc 1 936 0
  77 0042 009B     		ldr	r3, [sp]
  78 0044 012B     		cmp	r3, #1
  79 0046 36D1     		bne	.L1
 937:library/cmsis/src/system_stm32f1xx.c ****   {
 938:library/cmsis/src/system_stm32f1xx.c ****     /* Enable Prefetch Buffer */
 939:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
  80              		.loc 1 939 0
  81 0048 1D4B     		ldr	r3, .L10+4
  82 004a 1A68     		ldr	r2, [r3]
  83 004c 42F01002 		orr	r2, r2, #16
  84 0050 1A60     		str	r2, [r3]
 940:library/cmsis/src/system_stm32f1xx.c **** 
 941:library/cmsis/src/system_stm32f1xx.c ****     /* Flash 2 wait state */
 942:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
  85              		.loc 1 942 0
ARM GAS  /tmp/ccZSgViz.s 			page 19


  86 0052 1A68     		ldr	r2, [r3]
  87 0054 22F00302 		bic	r2, r2, #3
  88 0058 1A60     		str	r2, [r3]
 943:library/cmsis/src/system_stm32f1xx.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
  89              		.loc 1 943 0
  90 005a 1A68     		ldr	r2, [r3]
  91 005c 42F00202 		orr	r2, r2, #2
  92 0060 1A60     		str	r2, [r3]
 944:library/cmsis/src/system_stm32f1xx.c **** 
 945:library/cmsis/src/system_stm32f1xx.c ****  
 946:library/cmsis/src/system_stm32f1xx.c ****     /* HCLK = SYSCLK */
 947:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
  93              		.loc 1 947 0
  94 0062 A3F58053 		sub	r3, r3, #4096
  95 0066 5A68     		ldr	r2, [r3, #4]
  96 0068 5A60     		str	r2, [r3, #4]
 948:library/cmsis/src/system_stm32f1xx.c ****       
 949:library/cmsis/src/system_stm32f1xx.c ****     /* PCLK2 = HCLK */
 950:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
  97              		.loc 1 950 0
  98 006a 5A68     		ldr	r2, [r3, #4]
  99 006c 5A60     		str	r2, [r3, #4]
 951:library/cmsis/src/system_stm32f1xx.c ****     
 952:library/cmsis/src/system_stm32f1xx.c ****     /* PCLK1 = HCLK */
 953:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 100              		.loc 1 953 0
 101 006e 5A68     		ldr	r2, [r3, #4]
 102 0070 42F48062 		orr	r2, r2, #1024
 103 0074 5A60     		str	r2, [r3, #4]
 954:library/cmsis/src/system_stm32f1xx.c **** 
 955:library/cmsis/src/system_stm32f1xx.c **** #ifdef STM32F10X_CL
 956:library/cmsis/src/system_stm32f1xx.c ****     /* Configure PLLs ------------------------------------------------------*/
 957:library/cmsis/src/system_stm32f1xx.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 958:library/cmsis/src/system_stm32f1xx.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
 959:library/cmsis/src/system_stm32f1xx.c ****         
 960:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 961:library/cmsis/src/system_stm32f1xx.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 962:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 963:library/cmsis/src/system_stm32f1xx.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
 964:library/cmsis/src/system_stm32f1xx.c ****   
 965:library/cmsis/src/system_stm32f1xx.c ****     /* Enable PLL2 */
 966:library/cmsis/src/system_stm32f1xx.c ****     RCC->CR |= RCC_CR_PLL2ON;
 967:library/cmsis/src/system_stm32f1xx.c ****     /* Wait till PLL2 is ready */
 968:library/cmsis/src/system_stm32f1xx.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 969:library/cmsis/src/system_stm32f1xx.c ****     {
 970:library/cmsis/src/system_stm32f1xx.c ****     }
 971:library/cmsis/src/system_stm32f1xx.c ****     
 972:library/cmsis/src/system_stm32f1xx.c ****    
 973:library/cmsis/src/system_stm32f1xx.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
 974:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 975:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 976:library/cmsis/src/system_stm32f1xx.c ****                             RCC_CFGR_PLLMULL9); 
 977:library/cmsis/src/system_stm32f1xx.c **** #else    
 978:library/cmsis/src/system_stm32f1xx.c ****     /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
 979:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 104              		.loc 1 979 0
 105 0076 5A68     		ldr	r2, [r3, #4]
ARM GAS  /tmp/ccZSgViz.s 			page 20


 106 0078 22F47C12 		bic	r2, r2, #4128768
 107 007c 5A60     		str	r2, [r3, #4]
 980:library/cmsis/src/system_stm32f1xx.c ****                                         RCC_CFGR_PLLMULL));
 981:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 108              		.loc 1 981 0
 109 007e 5A68     		ldr	r2, [r3, #4]
 110 0080 42F4E812 		orr	r2, r2, #1900544
 111 0084 5A60     		str	r2, [r3, #4]
 982:library/cmsis/src/system_stm32f1xx.c **** #endif /* STM32F10X_CL */
 983:library/cmsis/src/system_stm32f1xx.c **** 
 984:library/cmsis/src/system_stm32f1xx.c ****     /* Enable PLL */
 985:library/cmsis/src/system_stm32f1xx.c ****     RCC->CR |= RCC_CR_PLLON;
 112              		.loc 1 985 0
 113 0086 1A68     		ldr	r2, [r3]
 114 0088 42F08072 		orr	r2, r2, #16777216
 115 008c 1A60     		str	r2, [r3]
 116              	.L7:
 986:library/cmsis/src/system_stm32f1xx.c **** 
 987:library/cmsis/src/system_stm32f1xx.c ****     /* Wait till PLL is ready */
 988:library/cmsis/src/system_stm32f1xx.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 117              		.loc 1 988 0 discriminator 1
 118 008e 0B4B     		ldr	r3, .L10
 119 0090 1B68     		ldr	r3, [r3]
 120 0092 13F0007F 		tst	r3, #33554432
 121 0096 FAD0     		beq	.L7
 989:library/cmsis/src/system_stm32f1xx.c ****     {
 990:library/cmsis/src/system_stm32f1xx.c ****     }
 991:library/cmsis/src/system_stm32f1xx.c ****     
 992:library/cmsis/src/system_stm32f1xx.c ****     /* Select PLL as system clock source */
 993:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 122              		.loc 1 993 0
 123 0098 084B     		ldr	r3, .L10
 124 009a 5A68     		ldr	r2, [r3, #4]
 125 009c 22F00302 		bic	r2, r2, #3
 126 00a0 5A60     		str	r2, [r3, #4]
 994:library/cmsis/src/system_stm32f1xx.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 127              		.loc 1 994 0
 128 00a2 5A68     		ldr	r2, [r3, #4]
 129 00a4 42F00202 		orr	r2, r2, #2
 130 00a8 5A60     		str	r2, [r3, #4]
 131              	.L8:
 995:library/cmsis/src/system_stm32f1xx.c **** 
 996:library/cmsis/src/system_stm32f1xx.c ****     /* Wait till PLL is used as system clock source */
 997:library/cmsis/src/system_stm32f1xx.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 132              		.loc 1 997 0 discriminator 1
 133 00aa 044B     		ldr	r3, .L10
 134 00ac 5B68     		ldr	r3, [r3, #4]
 135 00ae 03F00C03 		and	r3, r3, #12
 136 00b2 082B     		cmp	r3, #8
 137 00b4 F9D1     		bne	.L8
 138              	.L1:
 998:library/cmsis/src/system_stm32f1xx.c ****     {
 999:library/cmsis/src/system_stm32f1xx.c ****     }
1000:library/cmsis/src/system_stm32f1xx.c ****   }
1001:library/cmsis/src/system_stm32f1xx.c ****   else
1002:library/cmsis/src/system_stm32f1xx.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
1003:library/cmsis/src/system_stm32f1xx.c ****          configuration. User can add here some code to deal with this error */
ARM GAS  /tmp/ccZSgViz.s 			page 21


1004:library/cmsis/src/system_stm32f1xx.c ****   }
1005:library/cmsis/src/system_stm32f1xx.c **** }
 139              		.loc 1 1005 0
 140 00b6 02B0     		add	sp, sp, #8
 141              	.LCFI1:
 142              		.cfi_def_cfa_offset 0
 143              		@ sp needed
 144 00b8 7047     		bx	lr
 145              	.L11:
 146 00ba 00BF     		.align	2
 147              	.L10:
 148 00bc 00100240 		.word	1073876992
 149 00c0 00200240 		.word	1073881088
 150              		.cfi_endproc
 151              	.LFE32:
 153              		.section	.text.SetSysClock,"ax",%progbits
 154              		.align	2
 155              		.thumb
 156              		.thumb_func
 158              	SetSysClock:
 159              	.LFB31:
 345:library/cmsis/src/system_stm32f1xx.c **** #ifdef SYSCLK_FREQ_HSE
 160              		.loc 1 345 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164 0000 08B5     		push	{r3, lr}
 165              	.LCFI2:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 3, -8
 168              		.cfi_offset 14, -4
 357:library/cmsis/src/system_stm32f1xx.c **** #endif
 169              		.loc 1 357 0
 170 0002 FFF7FEFF 		bl	SetSysClockTo72
 171              	.LVL0:
 172 0006 08BD     		pop	{r3, pc}
 173              		.cfi_endproc
 174              	.LFE31:
 176              		.section	.text.SystemInit,"ax",%progbits
 177              		.align	2
 178              		.global	SystemInit
 179              		.thumb
 180              		.thumb_func
 182              	SystemInit:
 183              	.LFB29:
 173:library/cmsis/src/system_stm32f1xx.c ****   /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
 184              		.loc 1 173 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188 0000 08B5     		push	{r3, lr}
 189              	.LCFI3:
 190              		.cfi_def_cfa_offset 8
 191              		.cfi_offset 3, -8
 192              		.cfi_offset 14, -4
 176:library/cmsis/src/system_stm32f1xx.c **** 
 193              		.loc 1 176 0
ARM GAS  /tmp/ccZSgViz.s 			page 22


 194 0002 0E4B     		ldr	r3, .L16
 195 0004 1A68     		ldr	r2, [r3]
 196 0006 42F00102 		orr	r2, r2, #1
 197 000a 1A60     		str	r2, [r3]
 180:library/cmsis/src/system_stm32f1xx.c **** #else
 198              		.loc 1 180 0
 199 000c 5968     		ldr	r1, [r3, #4]
 200 000e 0C4A     		ldr	r2, .L16+4
 201 0010 0A40     		ands	r2, r2, r1
 202 0012 5A60     		str	r2, [r3, #4]
 186:library/cmsis/src/system_stm32f1xx.c **** 
 203              		.loc 1 186 0
 204 0014 1A68     		ldr	r2, [r3]
 205 0016 22F08472 		bic	r2, r2, #17301504
 206 001a 22F48032 		bic	r2, r2, #65536
 207 001e 1A60     		str	r2, [r3]
 189:library/cmsis/src/system_stm32f1xx.c **** 
 208              		.loc 1 189 0
 209 0020 1A68     		ldr	r2, [r3]
 210 0022 22F48022 		bic	r2, r2, #262144
 211 0026 1A60     		str	r2, [r3]
 192:library/cmsis/src/system_stm32f1xx.c **** 
 212              		.loc 1 192 0
 213 0028 5A68     		ldr	r2, [r3, #4]
 214 002a 22F4FE02 		bic	r2, r2, #8323072
 215 002e 5A60     		str	r2, [r3, #4]
 211:library/cmsis/src/system_stm32f1xx.c **** #endif /* STM32F10X_CL */
 216              		.loc 1 211 0
 217 0030 4FF41F02 		mov	r2, #10420224
 218 0034 9A60     		str	r2, [r3, #8]
 222:library/cmsis/src/system_stm32f1xx.c **** }
 219              		.loc 1 222 0
 220 0036 FFF7FEFF 		bl	SetSysClock
 221              	.LVL1:
 222 003a 08BD     		pop	{r3, pc}
 223              	.L17:
 224              		.align	2
 225              	.L16:
 226 003c 00100240 		.word	1073876992
 227 0040 0000FFF8 		.word	-117506048
 228              		.cfi_endproc
 229              	.LFE29:
 231              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 232              		.align	2
 233              		.global	SystemCoreClockUpdate
 234              		.thumb
 235              		.thumb_func
 237              	SystemCoreClockUpdate:
 238              	.LFB30:
 232:library/cmsis/src/system_stm32f1xx.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 239              		.loc 1 232 0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 243              		@ link register save eliminated.
 244              	.LVL2:
 244:library/cmsis/src/system_stm32f1xx.c ****   
ARM GAS  /tmp/ccZSgViz.s 			page 23


 245              		.loc 1 244 0
 246 0000 1F4B     		ldr	r3, .L27
 247 0002 5B68     		ldr	r3, [r3, #4]
 248 0004 03F00C03 		and	r3, r3, #12
 249              	.LVL3:
 246:library/cmsis/src/system_stm32f1xx.c ****   {
 250              		.loc 1 246 0
 251 0008 042B     		cmp	r3, #4
 252 000a 06D0     		beq	.L20
 253 000c 082B     		cmp	r3, #8
 254 000e 08D0     		beq	.L21
 255 0010 3BBB     		cbnz	r3, .L26
 249:library/cmsis/src/system_stm32f1xx.c ****       break;
 256              		.loc 1 249 0
 257 0012 1C4A     		ldr	r2, .L27+4
 258 0014 1C4B     		ldr	r3, .L27+8
 259              	.LVL4:
 260 0016 1A60     		str	r2, [r3]
 250:library/cmsis/src/system_stm32f1xx.c ****     case 0x04:  /* HSE used as system clock */
 261              		.loc 1 250 0
 262 0018 26E0     		b	.L23
 263              	.LVL5:
 264              	.L20:
 252:library/cmsis/src/system_stm32f1xx.c ****       break;
 265              		.loc 1 252 0
 266 001a 1A4A     		ldr	r2, .L27+4
 267 001c 1A4B     		ldr	r3, .L27+8
 268              	.LVL6:
 269 001e 1A60     		str	r2, [r3]
 253:library/cmsis/src/system_stm32f1xx.c ****     case 0x08:  /* PLL used as system clock */
 270              		.loc 1 253 0
 271 0020 22E0     		b	.L23
 272              	.LVL7:
 273              	.L21:
 257:library/cmsis/src/system_stm32f1xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 274              		.loc 1 257 0
 275 0022 174A     		ldr	r2, .L27
 276 0024 5368     		ldr	r3, [r2, #4]
 277              	.LVL8:
 258:library/cmsis/src/system_stm32f1xx.c ****       
 278              		.loc 1 258 0
 279 0026 5268     		ldr	r2, [r2, #4]
 280              	.LVL9:
 261:library/cmsis/src/system_stm32f1xx.c ****       
 281              		.loc 1 261 0
 282 0028 C3F38343 		ubfx	r3, r3, #18, #4
 283              	.LVL10:
 284 002c 0233     		adds	r3, r3, #2
 285              	.LVL11:
 263:library/cmsis/src/system_stm32f1xx.c ****       {
 286              		.loc 1 263 0
 287 002e 12F4803F 		tst	r2, #65536
 288 0032 05D1     		bne	.L24
 266:library/cmsis/src/system_stm32f1xx.c ****       }
 289              		.loc 1 266 0
 290 0034 154A     		ldr	r2, .L27+12
 291              	.LVL12:
ARM GAS  /tmp/ccZSgViz.s 			page 24


 292 0036 02FB03F3 		mul	r3, r2, r3
 293              	.LVL13:
 294 003a 134A     		ldr	r2, .L27+8
 295 003c 1360     		str	r3, [r2]
 296 003e 13E0     		b	.L23
 297              	.LVL14:
 298              	.L24:
 276:library/cmsis/src/system_stm32f1xx.c ****         {/* HSE oscillator clock divided by 2 */
 299              		.loc 1 276 0
 300 0040 0F4A     		ldr	r2, .L27
 301              	.LVL15:
 302 0042 5268     		ldr	r2, [r2, #4]
 303 0044 12F4003F 		tst	r2, #131072
 304 0048 05D0     		beq	.L25
 278:library/cmsis/src/system_stm32f1xx.c ****         }
 305              		.loc 1 278 0
 306 004a 104A     		ldr	r2, .L27+12
 307 004c 02FB03F3 		mul	r3, r2, r3
 308              	.LVL16:
 309 0050 0D4A     		ldr	r2, .L27+8
 310 0052 1360     		str	r3, [r2]
 311 0054 08E0     		b	.L23
 312              	.LVL17:
 313              	.L25:
 282:library/cmsis/src/system_stm32f1xx.c ****         }
 314              		.loc 1 282 0
 315 0056 0B4A     		ldr	r2, .L27+4
 316 0058 02FB03F3 		mul	r3, r2, r3
 317              	.LVL18:
 318 005c 0A4A     		ldr	r2, .L27+8
 319 005e 1360     		str	r3, [r2]
 320 0060 02E0     		b	.L23
 321              	.LVL19:
 322              	.L26:
 328:library/cmsis/src/system_stm32f1xx.c ****       break;
 323              		.loc 1 328 0
 324 0062 084A     		ldr	r2, .L27+4
 325 0064 084B     		ldr	r3, .L27+8
 326              	.LVL20:
 327 0066 1A60     		str	r2, [r3]
 328              	.LVL21:
 329              	.L23:
 334:library/cmsis/src/system_stm32f1xx.c ****   /* HCLK clock frequency */
 330              		.loc 1 334 0
 331 0068 054B     		ldr	r3, .L27
 332 006a 5B68     		ldr	r3, [r3, #4]
 333 006c C3F30313 		ubfx	r3, r3, #4, #4
 334 0070 074A     		ldr	r2, .L27+16
 335 0072 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 336 0074 DAB2     		uxtb	r2, r3
 337              	.LVL22:
 336:library/cmsis/src/system_stm32f1xx.c **** }
 338              		.loc 1 336 0
 339 0076 0449     		ldr	r1, .L27+8
 340 0078 0B68     		ldr	r3, [r1]
 341 007a D340     		lsrs	r3, r3, r2
 342 007c 0B60     		str	r3, [r1]
ARM GAS  /tmp/ccZSgViz.s 			page 25


 343 007e 7047     		bx	lr
 344              	.L28:
 345              		.align	2
 346              	.L27:
 347 0080 00100240 		.word	1073876992
 348 0084 00127A00 		.word	8000000
 349 0088 00000000 		.word	.LANCHOR0
 350 008c 00093D00 		.word	4000000
 351 0090 00000000 		.word	.LANCHOR1
 352              		.cfi_endproc
 353              	.LFE30:
 355              		.global	AHBPrescTable
 356              		.global	SystemCoreClock
 357              		.section	.data.AHBPrescTable,"aw",%progbits
 358              		.align	2
 359              		.set	.LANCHOR1,. + 0
 362              	AHBPrescTable:
 363 0000 00       		.byte	0
 364 0001 00       		.byte	0
 365 0002 00       		.byte	0
 366 0003 00       		.byte	0
 367 0004 00       		.byte	0
 368 0005 00       		.byte	0
 369 0006 00       		.byte	0
 370 0007 00       		.byte	0
 371 0008 01       		.byte	1
 372 0009 02       		.byte	2
 373 000a 03       		.byte	3
 374 000b 04       		.byte	4
 375 000c 06       		.byte	6
 376 000d 07       		.byte	7
 377 000e 08       		.byte	8
 378 000f 09       		.byte	9
 379              		.section	.data.SystemCoreClock,"aw",%progbits
 380              		.align	2
 381              		.set	.LANCHOR0,. + 0
 384              	SystemCoreClock:
 385 0000 00A24A04 		.word	72000000
 386              		.text
 387              	.Letext0:
 388              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 389              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 390              		.file 4 "library/cmsis/inc/stm32f1xx.h"
 391              		.file 5 "library/cmsis/inc/core_cm3.h"
ARM GAS  /tmp/ccZSgViz.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f1xx.c
     /tmp/ccZSgViz.s:20     .text.SetSysClockTo72:0000000000000000 $t
     /tmp/ccZSgViz.s:24     .text.SetSysClockTo72:0000000000000000 SetSysClockTo72
     /tmp/ccZSgViz.s:148    .text.SetSysClockTo72:00000000000000bc $d
     /tmp/ccZSgViz.s:154    .text.SetSysClock:0000000000000000 $t
     /tmp/ccZSgViz.s:158    .text.SetSysClock:0000000000000000 SetSysClock
     /tmp/ccZSgViz.s:177    .text.SystemInit:0000000000000000 $t
     /tmp/ccZSgViz.s:182    .text.SystemInit:0000000000000000 SystemInit
     /tmp/ccZSgViz.s:226    .text.SystemInit:000000000000003c $d
     /tmp/ccZSgViz.s:232    .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/ccZSgViz.s:237    .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/ccZSgViz.s:347    .text.SystemCoreClockUpdate:0000000000000080 $d
     /tmp/ccZSgViz.s:362    .data.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/ccZSgViz.s:384    .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/ccZSgViz.s:358    .data.AHBPrescTable:0000000000000000 $d
     /tmp/ccZSgViz.s:380    .data.SystemCoreClock:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
